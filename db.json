{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.266c1c.css","path":"main.266c1c.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.906508.js","path":"mobile.906508.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.096dc6.js","path":"slider.096dc6.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.266c1c.js","path":"main.266c1c.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1501593705160},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1501593705161},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1501593705162},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1501593705165},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1501593705164},{"_id":"themes/yilia/_config.yml","hash":"656ea53c9e8634a37c72a3ad8f1247d2dc73b3f0","modified":1502423265563},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1501593705167},{"_id":"source/categories/index.md","hash":"c441cc618418fd2904cd5e2b8c70a7a375ca4258","modified":1502423417831},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1501593705398},{"_id":"source/_posts/C-OOP.md","hash":"fab92ffc0f3decd42639f29e6a3f453bd9ca3830","modified":1501765271869},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1501593706119},{"_id":"source/_posts/C-高级特性.md","hash":"5b209c2c1421647abe59ca482a8d834172634588","modified":1502445114246},{"_id":"source/_posts/CPP学习之旅.md","hash":"d89a70fed4927026e41f41994c53db3856c0a477","modified":1501638784421},{"_id":"source/_posts/C-拷贝构造函数和赋值运算符.md","hash":"b07855ec63c595daa819c6347744a2ea5ffa4859","modified":1501645171900},{"_id":"source/_posts/C-类型转换.md","hash":"014ff020e67d3abe0d61dac7fe44648d7c39b167","modified":1501728491173},{"_id":"source/_posts/LinkedList源码分析.md","hash":"e314677ff38fc61aa1f1ac66ca8bc8365455aff7","modified":1502455819801},{"_id":"source/_posts/Lua基础知识.md","hash":"5fc991b5729a886842b7b3a67407bb32b86dd765","modified":1505184434026},{"_id":"source/_posts/lua-协同程序.md","hash":"a54a24d940ebfaf13d397b2a76bba3ff0fdd04d6","modified":1505275031857},{"_id":"source/_posts/strtok、strtok-s、strtok-r字符串分割.md","hash":"3f932b3240fe31defd551950612ccc1ad7e7fb2d","modified":1502187630975},{"_id":"source/_posts/C-递归-引用或者参数传递.md","hash":"97eb32940988c105fbdd68c29439c748f7e35a60","modified":1502361031219},{"_id":"source/tags/index.md","hash":"2b0e146f38429b1ce2640ccb0a40c558959b5607","modified":1502423402728},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1501574585274},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1501593705170},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1501593705171},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1501593705173},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1501593705174},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1501593705175},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1501593705176},{"_id":"themes/yilia/README.md","hash":"86757b00d393bd4956a252d92a469f11f2ae8914","modified":1501593705168},{"_id":"source/_posts/条款02-尽量以const，enum，inline，替换-define.md","hash":"cccb6a5ec9e57d50c089b82ce10ffa7e7474622f","modified":1503733154465},{"_id":"source/_posts/C-模板与泛型编程.md","hash":"957922a821fb44edd28548293d93db87279df446","modified":1501925499770},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1501593705178},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1501593705349},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1501593705347},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1501593705350},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1501593705352},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1501593705355},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1501593705354},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1501593705351},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1501593705399},{"_id":"themes/yilia/source/main.266c1c.css","hash":"6b9cfabb81f021081a93da5a069674e9be910194","modified":1501593706111},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501593705331},{"_id":"themes/yilia/source/mobile.906508.js","hash":"86e50eecba93644d6cf4f78fd4f9ff54a0ea82d5","modified":1501593706113},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1501593705233},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1501593705235},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1501593705709},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"b75e8fff732292fa26b5a0b47cd253d4281e321a","modified":1501593705237},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"9bfcbd9e71401b6da6b2bbbe61e97625ca247b7a","modified":1501593705242},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1501593705240},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1501593705244},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1501593705243},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1501593705239},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1501593705247},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1501593705248},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1501593705249},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1501593705236},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1501593705250},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1501593705332},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1501593705245},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1501593705851},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1501593705854},{"_id":"themes/yilia/source/slider.096dc6.js","hash":"a8b66ef85d96616086ea6256e7288d0b5a2df56d","modified":1501593706115},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1501593705858},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1501593705853},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1501593705879},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1501593705880},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1501593705333},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1501593705400},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1501593705856},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1501593705882},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1501593705857},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1501593705404},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1501593705406},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1501593705405},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1501593705409},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"e6e83d4863afcc589d4dd2f327e9f396f7d7b343","modified":1501593705410},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1501593705402},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1501593705401},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1501593705561},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1501593705562},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1501593705407},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1501593705540},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1501593705610},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1501593705612},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1501593705609},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1501593705616},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1501593705615},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1501593705565},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1501593705564},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1501593705613},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1501593705621},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1501593705622},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1501593705618},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1501593705617},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"17a97f7c38f5dfacc3eadf354b5826d77f1c2bdb","modified":1501593705623},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1501593705690},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1501593705624},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1501593705692},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1501593705691},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1501593705696},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1501593705619},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1501593705699},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1501593705698},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9bb1a4918c1b1ee62ce0a71381990a1978c51b2a","modified":1501593705695},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1501593705694},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1501593705702},{"_id":"themes/yilia/source/main.266c1c.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1501593706112},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"171b130d25c36f496e4b43e3808707a8f1897729","modified":1501593705329},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1501593705251},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1501593705703},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1501593705254},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1501593705701},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1501593705704},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1501593705255},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1501593705258},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1501593705260},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1501593705261},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1501593705411},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1501593705412},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"9f9fa4f8b0de5f87a9494fd0cb5064502a5d5ef5","modified":1501593705252},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1501593705257},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1501593705416},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1501593705256},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1501593705545},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1501593705543},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1501593705413},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1501593705566},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1501593705414},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1501593705568},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1501593705544},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1501593705567},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1501593705541},{"_id":"public/content.json","hash":"a19710763b973849f8dd5c4e1cf1e3ef646052bc","modified":1505275108333},{"_id":"public/categories/index.html","hash":"e477bc927fa9856cca456f85fbae3a3d7792c26d","modified":1505275108637},{"_id":"public/tags/index.html","hash":"ee55fa4949e6cd29edb06f74afcc900562412d4d","modified":1505275108792},{"_id":"public/2017/09/12/Lua基础知识/index.html","hash":"1a23f4fe8aa3a7751c42d3b155c1b3fca5b703ca","modified":1505275108812},{"_id":"public/2017/09/13/lua-协同程序/index.html","hash":"9d89d792d516256b3661dfd472ebb2241c8dbc1c","modified":1505275108815},{"_id":"public/2017/08/26/条款02-尽量以const，enum，inline，替换-define/index.html","hash":"23aa10ffa160a10544f8f029a972808f0113772a","modified":1505275108815},{"_id":"public/2017/08/11/LinkedList源码分析/index.html","hash":"7fb9181a544bb03084e990745b8f9a14cc7ca852","modified":1505275108815},{"_id":"public/2017/08/11/C-高级特性/index.html","hash":"9865a525e20befdc61df4a23127037cb05522ba0","modified":1505275108815},{"_id":"public/2017/08/10/C-递归-引用或者参数传递/index.html","hash":"9521554e001e6b168c05da44979f9908b17b9f6e","modified":1505275108815},{"_id":"public/2017/08/08/strtok、strtok-s、strtok-r字符串分割/index.html","hash":"b323ad0a644d22d9c12db6efe198771139ec1e1f","modified":1505275108815},{"_id":"public/2017/08/05/C-模板与泛型编程/index.html","hash":"b0656a32d9a756183ce568d6d9cbd34932c537dd","modified":1505275108815},{"_id":"public/2017/08/03/C-OOP/index.html","hash":"5c5cf58f38614444801ca9390294c4a48072142a","modified":1505275108816},{"_id":"public/2017/08/03/C-类型转换/index.html","hash":"3535453ee0fb80b3365d4a59a5759b5965d0741d","modified":1505275108816},{"_id":"public/2017/08/02/C-拷贝构造函数和赋值运算符/index.html","hash":"746eb52b88f940cfd5e2dc14ad25ea4ff21199d3","modified":1505275108816},{"_id":"public/2017/08/01/CPP学习之旅/index.html","hash":"92ea1c55678fbbf931383eaf94d1e80f0c93632d","modified":1505275108816},{"_id":"public/2017/08/01/hello-world/index.html","hash":"de76282968338089da85b663bac92031fd659cfe","modified":1505275108816},{"_id":"public/archives/index.html","hash":"ded36e4498e7e86d0abf5be3554a6df3b152ae86","modified":1505275108816},{"_id":"public/archives/page/2/index.html","hash":"b3fca4372bbebe1acaa8bb82dec3265b103c03ce","modified":1505275108816},{"_id":"public/archives/2017/index.html","hash":"b661834b424106ec21087a8979f560fd25677662","modified":1505275108816},{"_id":"public/archives/2017/08/index.html","hash":"74ac57d885f82aea6ef0f60fdae6d66d9a32437b","modified":1505275108817},{"_id":"public/archives/2017/page/2/index.html","hash":"4d4fe94eba51b2c4f237b9a74feb6e3bb6937f0c","modified":1505275108817},{"_id":"public/archives/2017/09/index.html","hash":"f76cfd5abceb7382726841644ba53330aafe041d","modified":1505275108817},{"_id":"public/archives/2017/08/page/2/index.html","hash":"097948fcc84b6d065da1f409e7356dc18e4160ae","modified":1505275108817},{"_id":"public/index.html","hash":"d5652e57402408a7c018a71f4f72ec482d977ce6","modified":1505275108817},{"_id":"public/page/2/index.html","hash":"d46d87e1a56e21400d9ab9f718292b7731d57fed","modified":1505275108817},{"_id":"public/tags/c/index.html","hash":"75f08420e57af5461ffa62331675e4835a18ebfa","modified":1505275108817},{"_id":"public/tags/C/index.html","hash":"8608be3da2f8eed67bee9ec53cf242cca4ca5866","modified":1505275108817},{"_id":"public/tags/lua/index.html","hash":"47ca83c4997189d2a43c4d3bdfafa78bb09a4ee4","modified":1505275108817},{"_id":"public/tags/java/index.html","hash":"8dae2f7a1c48e3c8a0991bf88f22f8e3c90173fc","modified":1505275108817},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1505275108821},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1505275108821},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1505275108821},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1505275108821},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1505275108821},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1505275108821},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1505275108825},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1505275108825},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1505275108826},{"_id":"public/main.266c1c.css","hash":"6b9cfabb81f021081a93da5a069674e9be910194","modified":1505275108826},{"_id":"public/slider.096dc6.js","hash":"a8b66ef85d96616086ea6256e7288d0b5a2df56d","modified":1505275108826},{"_id":"public/mobile.906508.js","hash":"86e50eecba93644d6cf4f78fd4f9ff54a0ea82d5","modified":1505275108826},{"_id":"public/main.266c1c.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1505275108826}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2017-08-11T03:42:01.000Z","type":"categories","_content":"\n> 什么都没有！","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-08-11 11:42:01\ntype: \"categories\"\n---\n\n> 什么都没有！","updated":"2017-08-11T03:50:17.831Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj7ihxmct00006ci6q3lx7nds","content":"<blockquote>\n<p>什么都没有！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>什么都没有！</p>\n</blockquote>\n"},{"title":"标签","date":"2017-08-11T03:41:24.000Z","type":"tags","_content":"\n> 什么都没有！！！","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-08-11 11:41:24\ntype: \"tags\"\n---\n\n> 什么都没有！！！","updated":"2017-08-11T03:50:02.728Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj7ihxmd600026ci6c2tvsfft","content":"<blockquote>\n<p>什么都没有！！！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>什么都没有！！！</p>\n</blockquote>\n"}],"Post":[{"title":"C++ OOP","date":"2017-08-03T13:00:25.000Z","_content":"\n## 基类派生类定义规则\n\n- 基类通常都应该定义一个虚析构函数，即使该函数不执行任何实际操作也是如此。\n- 关键字virtual只能出现在类内部的声明语句之前而不能用于类外部的函数定义。\n- 如果基类函数时virtual，那么该函数在派生类中隐式也是虚函数。\n- 首先初始化基类的部分，然后按照声明的顺序依次初始化派生类的成员。并且通过调用基类的构造函数来初始化那些从基类中继承而来的成员。\n- 静态成员会被继承，但是对于静态成员来说都只存在唯一的实例。\n\n    ```\n    #include <iostream>\n    using namespace std;\n    class Base {\n    public:\n    \tstatic void statment();\n    \n    };\n    class Derived :public Base {\n    \tvoid fun(const Derived&);\n    \n    };\n    void Base::statment() {\n    \tcout << \"this is static function of Base\" << endl;\n    }\n    void Derived::fun(const Derived& derived) {\n    \tBase::statment();\n    \tDerived::statment();\n    \tderived.statment();\n    \tstatment();\n    }\n    ```\n\n- 防止类继承的方法有：在类名后加final关键字修饰\n\n    ```\n    class Derived final:public Base {\n\t    void fun(const Derived&);\n\n    };\n    ```\n\n- 派生类向基类的自动类型转换只是针对指针和引用类型有效，而对于派生类类型和基类类型之间不存在这样的转换（基类定义了拷贝控制成员函数除外）\n\n## 虚函数\n- 动态绑定只有当我们通过指针或者引用调用虚函数时才会发生，当通过一个普通类型得我表达式调用虚函数时，在编译时就会将调用的版本确定下来。\n- 基类中虚函数在派生类中隐含地也是一个虚函数，当派生类覆盖了某个虚函数后，该函数在基类中的形参必须与派生类中的形参严格匹配。\n- 如果某次函数调用使用了默认实参，那么该实参由本次的静态类型决定：通过指针或者引用调用virtual函数，Base定义了默认实参，Derived继承了这个虚函数，调用时实际运行的是Derived的版本，但是传入函数的默认实际参数还是Base函数的默认实参，因此最好保证基类和派生类的默认实参一致。\n- 派生类继承而来的函数调用基类virtual函数的方式：\n\n```\nbase->Base::func(args);\n```\n\n## 抽象基类\n- 不能直接实例化（创建）抽查基类的对象\n\n## 访问控制\n- **派生类的成员和友元只能访问派生类对象的基类部分受保护成员，对于普通的基类对象中的成员不具有特殊的访问权限。**\n\n```\nclass Base{\nprotected:\n\tint pro_mem;\n};\nclass Sneaky :public Base {\n\tfriend void clobber(Sneaky&); //可以访问Sneaky::pro_mem\n\tfriend void clobber(Base&);  //不能访问base::pro_mem\n\tint j;\npublic:\n\tvoid visit() {\n\t\tthis->pro_mem = 0; //正确  \n\t}\n};\n\nvoid clobber(Sneaky& s) {\n\ts.j = s.pro_mem = 0; //正确\n}\nvoid clobber(Base& b) {\n\tb.pro_mem = 0;  //错误\n}\nvoid visit2() {\n\tSneaky s;\n\ts.pro_mem = 0;  //错误： 对象不能访问基类保护成员\n}\n```\n- 默认情况下，使用class关键字定义的派生类是私有继承的；而使用struct关键字定义的派生类是公有继承的\n- 基类析构函数必须是虚函数，这样才会动态绑定，才会在delete 基类指针或者引用的时候能够调用正确的析构函数，否者delete一个指向派生类对象的基类指针将产生未定义的行为。\n- 如果构造函数或者析构函数调用了某个虚函数，则我们应该执行与构造函数或者析构函数所属类型相对应的虚函数版本。\n- 当派生类对象呗赋值给基类对象时，其中派生类部分将被切掉。\n- 一般在容器中是存放基类的指针或者引用（智能指针），不应该是类类型：\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/6B3C93642A6D46FDA954FA196F01557C/4007)\n\n\n","source":"_posts/C-OOP.md","raw":"---\ntitle: C++ OOP\ndate: 2017-08-03 21:00:25\ntags:\n\tc++\n---\n\n## 基类派生类定义规则\n\n- 基类通常都应该定义一个虚析构函数，即使该函数不执行任何实际操作也是如此。\n- 关键字virtual只能出现在类内部的声明语句之前而不能用于类外部的函数定义。\n- 如果基类函数时virtual，那么该函数在派生类中隐式也是虚函数。\n- 首先初始化基类的部分，然后按照声明的顺序依次初始化派生类的成员。并且通过调用基类的构造函数来初始化那些从基类中继承而来的成员。\n- 静态成员会被继承，但是对于静态成员来说都只存在唯一的实例。\n\n    ```\n    #include <iostream>\n    using namespace std;\n    class Base {\n    public:\n    \tstatic void statment();\n    \n    };\n    class Derived :public Base {\n    \tvoid fun(const Derived&);\n    \n    };\n    void Base::statment() {\n    \tcout << \"this is static function of Base\" << endl;\n    }\n    void Derived::fun(const Derived& derived) {\n    \tBase::statment();\n    \tDerived::statment();\n    \tderived.statment();\n    \tstatment();\n    }\n    ```\n\n- 防止类继承的方法有：在类名后加final关键字修饰\n\n    ```\n    class Derived final:public Base {\n\t    void fun(const Derived&);\n\n    };\n    ```\n\n- 派生类向基类的自动类型转换只是针对指针和引用类型有效，而对于派生类类型和基类类型之间不存在这样的转换（基类定义了拷贝控制成员函数除外）\n\n## 虚函数\n- 动态绑定只有当我们通过指针或者引用调用虚函数时才会发生，当通过一个普通类型得我表达式调用虚函数时，在编译时就会将调用的版本确定下来。\n- 基类中虚函数在派生类中隐含地也是一个虚函数，当派生类覆盖了某个虚函数后，该函数在基类中的形参必须与派生类中的形参严格匹配。\n- 如果某次函数调用使用了默认实参，那么该实参由本次的静态类型决定：通过指针或者引用调用virtual函数，Base定义了默认实参，Derived继承了这个虚函数，调用时实际运行的是Derived的版本，但是传入函数的默认实际参数还是Base函数的默认实参，因此最好保证基类和派生类的默认实参一致。\n- 派生类继承而来的函数调用基类virtual函数的方式：\n\n```\nbase->Base::func(args);\n```\n\n## 抽象基类\n- 不能直接实例化（创建）抽查基类的对象\n\n## 访问控制\n- **派生类的成员和友元只能访问派生类对象的基类部分受保护成员，对于普通的基类对象中的成员不具有特殊的访问权限。**\n\n```\nclass Base{\nprotected:\n\tint pro_mem;\n};\nclass Sneaky :public Base {\n\tfriend void clobber(Sneaky&); //可以访问Sneaky::pro_mem\n\tfriend void clobber(Base&);  //不能访问base::pro_mem\n\tint j;\npublic:\n\tvoid visit() {\n\t\tthis->pro_mem = 0; //正确  \n\t}\n};\n\nvoid clobber(Sneaky& s) {\n\ts.j = s.pro_mem = 0; //正确\n}\nvoid clobber(Base& b) {\n\tb.pro_mem = 0;  //错误\n}\nvoid visit2() {\n\tSneaky s;\n\ts.pro_mem = 0;  //错误： 对象不能访问基类保护成员\n}\n```\n- 默认情况下，使用class关键字定义的派生类是私有继承的；而使用struct关键字定义的派生类是公有继承的\n- 基类析构函数必须是虚函数，这样才会动态绑定，才会在delete 基类指针或者引用的时候能够调用正确的析构函数，否者delete一个指向派生类对象的基类指针将产生未定义的行为。\n- 如果构造函数或者析构函数调用了某个虚函数，则我们应该执行与构造函数或者析构函数所属类型相对应的虚函数版本。\n- 当派生类对象呗赋值给基类对象时，其中派生类部分将被切掉。\n- 一般在容器中是存放基类的指针或者引用（智能指针），不应该是类类型：\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/6B3C93642A6D46FDA954FA196F01557C/4007)\n\n\n","slug":"C-OOP","published":1,"updated":"2017-08-03T13:01:11.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ihxmcv00016ci6svocd85g","content":"<h2 id=\"基类派生类定义规则\"><a href=\"#基类派生类定义规则\" class=\"headerlink\" title=\"基类派生类定义规则\"></a>基类派生类定义规则</h2><ul>\n<li>基类通常都应该定义一个虚析构函数，即使该函数不执行任何实际操作也是如此。</li>\n<li>关键字virtual只能出现在类内部的声明语句之前而不能用于类外部的函数定义。</li>\n<li>如果基类函数时virtual，那么该函数在派生类中隐式也是虚函数。</li>\n<li>首先初始化基类的部分，然后按照声明的顺序依次初始化派生类的成员。并且通过调用基类的构造函数来初始化那些从基类中继承而来的成员。</li>\n<li><p>静态成员会被继承，但是对于静态成员来说都只存在唯一的实例。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;iostream&gt;</div><div class=\"line\">using namespace std;</div><div class=\"line\">class Base &#123;</div><div class=\"line\">public:</div><div class=\"line\">\tstatic void statment();</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\">class Derived :public Base &#123;</div><div class=\"line\">\tvoid fun(const Derived&amp;);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\">void Base::statment() &#123;</div><div class=\"line\">\tcout &lt;&lt; &quot;this is static function of Base&quot; &lt;&lt; endl;</div><div class=\"line\">&#125;</div><div class=\"line\">void Derived::fun(const Derived&amp; derived) &#123;</div><div class=\"line\">\tBase::statment();</div><div class=\"line\">\tDerived::statment();</div><div class=\"line\">\tderived.statment();</div><div class=\"line\">\tstatment();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>防止类继承的方法有：在类名后加final关键字修饰</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Derived final:public Base &#123;</div><div class=\"line\"> void fun(const Derived&amp;);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>派生类向基类的自动类型转换只是针对指针和引用类型有效，而对于派生类类型和基类类型之间不存在这样的转换（基类定义了拷贝控制成员函数除外）</p>\n</li>\n</ul>\n<h2 id=\"虚函数\"><a href=\"#虚函数\" class=\"headerlink\" title=\"虚函数\"></a>虚函数</h2><ul>\n<li>动态绑定只有当我们通过指针或者引用调用虚函数时才会发生，当通过一个普通类型得我表达式调用虚函数时，在编译时就会将调用的版本确定下来。</li>\n<li>基类中虚函数在派生类中隐含地也是一个虚函数，当派生类覆盖了某个虚函数后，该函数在基类中的形参必须与派生类中的形参严格匹配。</li>\n<li>如果某次函数调用使用了默认实参，那么该实参由本次的静态类型决定：通过指针或者引用调用virtual函数，Base定义了默认实参，Derived继承了这个虚函数，调用时实际运行的是Derived的版本，但是传入函数的默认实际参数还是Base函数的默认实参，因此最好保证基类和派生类的默认实参一致。</li>\n<li>派生类继承而来的函数调用基类virtual函数的方式：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">base-&gt;Base::func(args);</div></pre></td></tr></table></figure>\n<h2 id=\"抽象基类\"><a href=\"#抽象基类\" class=\"headerlink\" title=\"抽象基类\"></a>抽象基类</h2><ul>\n<li>不能直接实例化（创建）抽查基类的对象</li>\n</ul>\n<h2 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h2><ul>\n<li><strong>派生类的成员和友元只能访问派生类对象的基类部分受保护成员，对于普通的基类对象中的成员不具有特殊的访问权限。</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Base&#123;</div><div class=\"line\">protected:</div><div class=\"line\">\tint pro_mem;</div><div class=\"line\">&#125;;</div><div class=\"line\">class Sneaky :public Base &#123;</div><div class=\"line\">\tfriend void clobber(Sneaky&amp;); //可以访问Sneaky::pro_mem</div><div class=\"line\">\tfriend void clobber(Base&amp;);  //不能访问base::pro_mem</div><div class=\"line\">\tint j;</div><div class=\"line\">public:</div><div class=\"line\">\tvoid visit() &#123;</div><div class=\"line\">\t\tthis-&gt;pro_mem = 0; //正确  </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">void clobber(Sneaky&amp; s) &#123;</div><div class=\"line\">\ts.j = s.pro_mem = 0; //正确</div><div class=\"line\">&#125;</div><div class=\"line\">void clobber(Base&amp; b) &#123;</div><div class=\"line\">\tb.pro_mem = 0;  //错误</div><div class=\"line\">&#125;</div><div class=\"line\">void visit2() &#123;</div><div class=\"line\">\tSneaky s;</div><div class=\"line\">\ts.pro_mem = 0;  //错误： 对象不能访问基类保护成员</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>默认情况下，使用class关键字定义的派生类是私有继承的；而使用struct关键字定义的派生类是公有继承的</li>\n<li>基类析构函数必须是虚函数，这样才会动态绑定，才会在delete 基类指针或者引用的时候能够调用正确的析构函数，否者delete一个指向派生类对象的基类指针将产生未定义的行为。</li>\n<li>如果构造函数或者析构函数调用了某个虚函数，则我们应该执行与构造函数或者析构函数所属类型相对应的虚函数版本。</li>\n<li>当派生类对象呗赋值给基类对象时，其中派生类部分将被切掉。</li>\n<li>一般在容器中是存放基类的指针或者引用（智能指针），不应该是类类型：<br><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/6B3C93642A6D46FDA954FA196F01557C/4007\" alt=\"image\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基类派生类定义规则\"><a href=\"#基类派生类定义规则\" class=\"headerlink\" title=\"基类派生类定义规则\"></a>基类派生类定义规则</h2><ul>\n<li>基类通常都应该定义一个虚析构函数，即使该函数不执行任何实际操作也是如此。</li>\n<li>关键字virtual只能出现在类内部的声明语句之前而不能用于类外部的函数定义。</li>\n<li>如果基类函数时virtual，那么该函数在派生类中隐式也是虚函数。</li>\n<li>首先初始化基类的部分，然后按照声明的顺序依次初始化派生类的成员。并且通过调用基类的构造函数来初始化那些从基类中继承而来的成员。</li>\n<li><p>静态成员会被继承，但是对于静态成员来说都只存在唯一的实例。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;iostream&gt;</div><div class=\"line\">using namespace std;</div><div class=\"line\">class Base &#123;</div><div class=\"line\">public:</div><div class=\"line\">\tstatic void statment();</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\">class Derived :public Base &#123;</div><div class=\"line\">\tvoid fun(const Derived&amp;);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\">void Base::statment() &#123;</div><div class=\"line\">\tcout &lt;&lt; &quot;this is static function of Base&quot; &lt;&lt; endl;</div><div class=\"line\">&#125;</div><div class=\"line\">void Derived::fun(const Derived&amp; derived) &#123;</div><div class=\"line\">\tBase::statment();</div><div class=\"line\">\tDerived::statment();</div><div class=\"line\">\tderived.statment();</div><div class=\"line\">\tstatment();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>防止类继承的方法有：在类名后加final关键字修饰</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Derived final:public Base &#123;</div><div class=\"line\"> void fun(const Derived&amp;);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>派生类向基类的自动类型转换只是针对指针和引用类型有效，而对于派生类类型和基类类型之间不存在这样的转换（基类定义了拷贝控制成员函数除外）</p>\n</li>\n</ul>\n<h2 id=\"虚函数\"><a href=\"#虚函数\" class=\"headerlink\" title=\"虚函数\"></a>虚函数</h2><ul>\n<li>动态绑定只有当我们通过指针或者引用调用虚函数时才会发生，当通过一个普通类型得我表达式调用虚函数时，在编译时就会将调用的版本确定下来。</li>\n<li>基类中虚函数在派生类中隐含地也是一个虚函数，当派生类覆盖了某个虚函数后，该函数在基类中的形参必须与派生类中的形参严格匹配。</li>\n<li>如果某次函数调用使用了默认实参，那么该实参由本次的静态类型决定：通过指针或者引用调用virtual函数，Base定义了默认实参，Derived继承了这个虚函数，调用时实际运行的是Derived的版本，但是传入函数的默认实际参数还是Base函数的默认实参，因此最好保证基类和派生类的默认实参一致。</li>\n<li>派生类继承而来的函数调用基类virtual函数的方式：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">base-&gt;Base::func(args);</div></pre></td></tr></table></figure>\n<h2 id=\"抽象基类\"><a href=\"#抽象基类\" class=\"headerlink\" title=\"抽象基类\"></a>抽象基类</h2><ul>\n<li>不能直接实例化（创建）抽查基类的对象</li>\n</ul>\n<h2 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h2><ul>\n<li><strong>派生类的成员和友元只能访问派生类对象的基类部分受保护成员，对于普通的基类对象中的成员不具有特殊的访问权限。</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Base&#123;</div><div class=\"line\">protected:</div><div class=\"line\">\tint pro_mem;</div><div class=\"line\">&#125;;</div><div class=\"line\">class Sneaky :public Base &#123;</div><div class=\"line\">\tfriend void clobber(Sneaky&amp;); //可以访问Sneaky::pro_mem</div><div class=\"line\">\tfriend void clobber(Base&amp;);  //不能访问base::pro_mem</div><div class=\"line\">\tint j;</div><div class=\"line\">public:</div><div class=\"line\">\tvoid visit() &#123;</div><div class=\"line\">\t\tthis-&gt;pro_mem = 0; //正确  </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">void clobber(Sneaky&amp; s) &#123;</div><div class=\"line\">\ts.j = s.pro_mem = 0; //正确</div><div class=\"line\">&#125;</div><div class=\"line\">void clobber(Base&amp; b) &#123;</div><div class=\"line\">\tb.pro_mem = 0;  //错误</div><div class=\"line\">&#125;</div><div class=\"line\">void visit2() &#123;</div><div class=\"line\">\tSneaky s;</div><div class=\"line\">\ts.pro_mem = 0;  //错误： 对象不能访问基类保护成员</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>默认情况下，使用class关键字定义的派生类是私有继承的；而使用struct关键字定义的派生类是公有继承的</li>\n<li>基类析构函数必须是虚函数，这样才会动态绑定，才会在delete 基类指针或者引用的时候能够调用正确的析构函数，否者delete一个指向派生类对象的基类指针将产生未定义的行为。</li>\n<li>如果构造函数或者析构函数调用了某个虚函数，则我们应该执行与构造函数或者析构函数所属类型相对应的虚函数版本。</li>\n<li>当派生类对象呗赋值给基类对象时，其中派生类部分将被切掉。</li>\n<li>一般在容器中是存放基类的指针或者引用（智能指针），不应该是类类型：<br><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/6B3C93642A6D46FDA954FA196F01557C/4007\" alt=\"image\"></li>\n</ul>\n"},{"title":"C++ 高级特性","date":"2017-08-11T06:28:05.000Z","_content":"\n## 元组tuple\n\n包含标准库\n```c++\n#include <tuple>\n```\n\ntuple(元组)在定义的时候需要制定每个字段的类型，字段个数定义过后不能再次改变，和pair类似，算是其加强版。两个tuple就可以进行< 和 == 运算，但是前提是字段个数相同，而且字段类型也需要一致。\n\n```c++\n#include <iostream>\n#include <tuple>\n\nusing namespace std;\n\nint main(int argc, char * args[])\n{\n\ttuple<int, string> tup1 = make_tuple(1, \"huzhgien\");\n\ttypedef decltype(tup1) my_tuple;\n\t\n\t//tuple<int, string> tup1(1, \"huzhgien\");\n\t// 等价  explicit构造函数不能使用=赋值方式初始化\n\tcout << get<1>(tup1).c_str()<<endl;     //得到tuple的第二个字段值\n\t//tuple_element<1, my_tuple>::type cnt = get<1>(tup1);\n\tcout << tuple_size<my_tuple>::value << endl;  //得到tuple的字段个数\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n***这个数据结构常常用在函数需要返回多个值且不需要新建一个struct或者class时使用***\n\n## 位图bitset\n\n```c++\n// bitvec1 比初始值小：初始值中的高位被丢弃，只保留13位\nbitset<13> bitvec1(0xbeef);  // 二进制位序列为1111011101111\n\n// bitvec1 比初始值大：他的高位置为0\nbitset<20> bitvec2(0xbeef);  // 二进制位序列为0001011111011101111\n\n// 在64位机器中,long long 0ULL是64个0比特，因此~0ULL是64个1\nbitset<128> bitvec3(~0ULL);  // 0~63位为1；63~127位为0\n\n\n```\n\n还可以使用字符串来初始化bitset\n字符串中下标最小的字符对应高位，反之亦然；如果string包含字符数比bitset少，那么biset的高位被置为0;\n\n```c++\nbitset<32> bitvec4(\"1100\"); //2、3 两位为1，剩余两位为0；其他为都是0\nstring str(\"1111111111111111000000\");\nbitset<32> bitvec6(str,5,4);  // 使用字符串的其中几位来初始化bitset\n```\n关于bitset一些操作：\n\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/4A68ADE99018414EB7B6F81FE9609E27/4364)\n\n\n## 随机数\n\n> 在老版本的c和c++语言中都依赖于一个简单的C库函数rand来生成随机数，这个函数生成均匀分布的伪随机数（随机种子不改的话，每次运行结果都一样，因此每次都需要重置随机种子），每个随机数的范围在0~Max_Value系统相关最大值（最少为332767） \n\n> 然而很多情况下，非均匀的分布随机数也需要，还有浮点数等，这个函数并不适用。\n\n> C++程序不应该使用库函数rand，而应该使用default_random_engine类和恰当分布类对象。\n\n\n```c++\n#include <iostream>\n#include <random>\nusing namespace std;\n\nint main(int argc, char * args[])\n{\n\tdefault_random_engine e;\n\t//default_random_engine e(int); // 指定随机发生种子\n\t\n\tcout << e()<<endl;  //直接生成  使用默认的分布对象\n\tuniform_int_distribution<unsigned> u(0, 9);\n\tfor (size_t i=0;i<10;++i)\n\t{\n\t\tcout << u(e) << endl;  //指定分布函数\n\t}\n\t// 一般使用时间戳来设置随机种子  秒级别的随机种子  在一秒内生成的随机数序列相同\n\t//default_random_engine e(time(0)); \n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n```c++\ndefault_real_engine  ;//实数随机生成引擎\nnormal_distribution  ;//正太分布：需要指定均值和标准差\nbernoulli_distrbution ;//伯努利分布，可以生成50%的bool值\n```\n\n> 老版本C++一般使用srand((uint32)time(0))来重置随机种子 ，然后使用rand来生成\n\n\n\n## IO再探\n\n1. **ends与endl的区别:**\n> ends函数 终止字符串 endl 函数 终止一行并刷新缓冲区\n\n> << ends 相当于 << '\\0'     \n    << endl 相当于 << '\\n' << flush\n    \n```c++\n#include <iostream> \nusing namespace std; \n\nint main() \n{ \n   \n    cout << \"a\" ; \n    cout << \"b\" <<ends; \n    cout << \"c\" <<endl; \n    cout << \"e\" << flush; \n    cout << \"f\" << flush; \n    cout << \"g\" ; \n    cout << \"h\" <<ends; \n    cout << \"i\" << flush; \n    cout << \"j\" <<endl; \n    return 0; \n} \n\n//结果 \nab c \nefgh ij\n```\n\n2. 控制bool输出格式（其他类型类似）\n```\ncout<<boolalpha<<true;//这样可以直接输出字符串true而不是1，修正采用noboolalpha\n\ncout<<hex;十六进制\ncout<<oct;八进制\ncout<<dec；//十进制\ncout<<showbase；可以输出进制\ncout<<noshowbase;//遇上一个命令相反，一般搭配使用\n```\n\n3. 文件IO流\n文件输出输入流指针位置的控制\n\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/0069327153F6444F92E38D5262D47B7D/4467)","source":"_posts/C-高级特性.md","raw":"---\ntitle: C++ 高级特性\ndate: 2017-08-11 14:28:05\ntags:\n\tc++\n---\n\n## 元组tuple\n\n包含标准库\n```c++\n#include <tuple>\n```\n\ntuple(元组)在定义的时候需要制定每个字段的类型，字段个数定义过后不能再次改变，和pair类似，算是其加强版。两个tuple就可以进行< 和 == 运算，但是前提是字段个数相同，而且字段类型也需要一致。\n\n```c++\n#include <iostream>\n#include <tuple>\n\nusing namespace std;\n\nint main(int argc, char * args[])\n{\n\ttuple<int, string> tup1 = make_tuple(1, \"huzhgien\");\n\ttypedef decltype(tup1) my_tuple;\n\t\n\t//tuple<int, string> tup1(1, \"huzhgien\");\n\t// 等价  explicit构造函数不能使用=赋值方式初始化\n\tcout << get<1>(tup1).c_str()<<endl;     //得到tuple的第二个字段值\n\t//tuple_element<1, my_tuple>::type cnt = get<1>(tup1);\n\tcout << tuple_size<my_tuple>::value << endl;  //得到tuple的字段个数\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n***这个数据结构常常用在函数需要返回多个值且不需要新建一个struct或者class时使用***\n\n## 位图bitset\n\n```c++\n// bitvec1 比初始值小：初始值中的高位被丢弃，只保留13位\nbitset<13> bitvec1(0xbeef);  // 二进制位序列为1111011101111\n\n// bitvec1 比初始值大：他的高位置为0\nbitset<20> bitvec2(0xbeef);  // 二进制位序列为0001011111011101111\n\n// 在64位机器中,long long 0ULL是64个0比特，因此~0ULL是64个1\nbitset<128> bitvec3(~0ULL);  // 0~63位为1；63~127位为0\n\n\n```\n\n还可以使用字符串来初始化bitset\n字符串中下标最小的字符对应高位，反之亦然；如果string包含字符数比bitset少，那么biset的高位被置为0;\n\n```c++\nbitset<32> bitvec4(\"1100\"); //2、3 两位为1，剩余两位为0；其他为都是0\nstring str(\"1111111111111111000000\");\nbitset<32> bitvec6(str,5,4);  // 使用字符串的其中几位来初始化bitset\n```\n关于bitset一些操作：\n\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/4A68ADE99018414EB7B6F81FE9609E27/4364)\n\n\n## 随机数\n\n> 在老版本的c和c++语言中都依赖于一个简单的C库函数rand来生成随机数，这个函数生成均匀分布的伪随机数（随机种子不改的话，每次运行结果都一样，因此每次都需要重置随机种子），每个随机数的范围在0~Max_Value系统相关最大值（最少为332767） \n\n> 然而很多情况下，非均匀的分布随机数也需要，还有浮点数等，这个函数并不适用。\n\n> C++程序不应该使用库函数rand，而应该使用default_random_engine类和恰当分布类对象。\n\n\n```c++\n#include <iostream>\n#include <random>\nusing namespace std;\n\nint main(int argc, char * args[])\n{\n\tdefault_random_engine e;\n\t//default_random_engine e(int); // 指定随机发生种子\n\t\n\tcout << e()<<endl;  //直接生成  使用默认的分布对象\n\tuniform_int_distribution<unsigned> u(0, 9);\n\tfor (size_t i=0;i<10;++i)\n\t{\n\t\tcout << u(e) << endl;  //指定分布函数\n\t}\n\t// 一般使用时间戳来设置随机种子  秒级别的随机种子  在一秒内生成的随机数序列相同\n\t//default_random_engine e(time(0)); \n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n\n```c++\ndefault_real_engine  ;//实数随机生成引擎\nnormal_distribution  ;//正太分布：需要指定均值和标准差\nbernoulli_distrbution ;//伯努利分布，可以生成50%的bool值\n```\n\n> 老版本C++一般使用srand((uint32)time(0))来重置随机种子 ，然后使用rand来生成\n\n\n\n## IO再探\n\n1. **ends与endl的区别:**\n> ends函数 终止字符串 endl 函数 终止一行并刷新缓冲区\n\n> << ends 相当于 << '\\0'     \n    << endl 相当于 << '\\n' << flush\n    \n```c++\n#include <iostream> \nusing namespace std; \n\nint main() \n{ \n   \n    cout << \"a\" ; \n    cout << \"b\" <<ends; \n    cout << \"c\" <<endl; \n    cout << \"e\" << flush; \n    cout << \"f\" << flush; \n    cout << \"g\" ; \n    cout << \"h\" <<ends; \n    cout << \"i\" << flush; \n    cout << \"j\" <<endl; \n    return 0; \n} \n\n//结果 \nab c \nefgh ij\n```\n\n2. 控制bool输出格式（其他类型类似）\n```\ncout<<boolalpha<<true;//这样可以直接输出字符串true而不是1，修正采用noboolalpha\n\ncout<<hex;十六进制\ncout<<oct;八进制\ncout<<dec；//十进制\ncout<<showbase；可以输出进制\ncout<<noshowbase;//遇上一个命令相反，一般搭配使用\n```\n\n3. 文件IO流\n文件输出输入流指针位置的控制\n\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/0069327153F6444F92E38D5262D47B7D/4467)","slug":"C-高级特性","published":1,"updated":"2017-08-11T09:51:54.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ihxmd800036ci6xu7jwn5h","content":"<h2 id=\"元组tuple\"><a href=\"#元组tuple\" class=\"headerlink\" title=\"元组tuple\"></a>元组tuple</h2><p>包含标准库<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tuple&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>tuple(元组)在定义的时候需要制定每个字段的类型，字段个数定义过后不能再次改变，和pair类似，算是其加强版。两个tuple就可以进行&lt; 和 == 运算，但是前提是字段个数相同，而且字段类型也需要一致。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tuple&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * args[])</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">\ttuple&lt;<span class=\"keyword\">int</span>, <span class=\"built_in\">string</span>&gt; tup1 = make_tuple(<span class=\"number\">1</span>, <span class=\"string\">\"huzhgien\"</span>);</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">decltype</span><span class=\"params\">(tup1)</span> my_tuple</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//tuple&lt;int, string&gt; tup1(1, \"huzhgien\");</span></div><div class=\"line\">\t<span class=\"comment\">// 等价  explicit构造函数不能使用=赋值方式初始化</span></div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; get&lt;<span class=\"number\">1</span>&gt;(tup1).c_str()&lt;&lt;<span class=\"built_in\">endl</span>;     <span class=\"comment\">//得到tuple的第二个字段值</span></div><div class=\"line\">\t<span class=\"comment\">//tuple_element&lt;1, my_tuple&gt;::type cnt = get&lt;1&gt;(tup1);</span></div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; tuple_size&lt;my_tuple&gt;::value &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//得到tuple的字段个数</span></div><div class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong><em>这个数据结构常常用在函数需要返回多个值且不需要新建一个struct或者class时使用</em></strong></p>\n<h2 id=\"位图bitset\"><a href=\"#位图bitset\" class=\"headerlink\" title=\"位图bitset\"></a>位图bitset</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bitvec1 比初始值小：初始值中的高位被丢弃，只保留13位</span></div><div class=\"line\"><span class=\"built_in\">bitset</span>&lt;13&gt; bitvec1(<span class=\"number\">0xbeef</span>);  <span class=\"comment\">// 二进制位序列为1111011101111</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bitvec1 比初始值大：他的高位置为0</span></div><div class=\"line\"><span class=\"built_in\">bitset</span>&lt;20&gt; bitvec2(<span class=\"number\">0xbeef</span>);  <span class=\"comment\">// 二进制位序列为0001011111011101111</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在64位机器中,long long 0ULL是64个0比特，因此~0ULL是64个1</span></div><div class=\"line\"><span class=\"built_in\">bitset</span>&lt;128&gt; bitvec3(~<span class=\"number\">0U</span>LL);  <span class=\"comment\">// 0~63位为1；63~127位为0</span></div></pre></td></tr></table></figure>\n<p>还可以使用字符串来初始化bitset<br>字符串中下标最小的字符对应高位，反之亦然；如果string包含字符数比bitset少，那么biset的高位被置为0;</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">bitset</span>&lt;32&gt; bitvec4(<span class=\"string\">\"1100\"</span>); <span class=\"comment\">//2、3 两位为1，剩余两位为0；其他为都是0</span></div><div class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">str</span><span class=\"params\">(<span class=\"string\">\"1111111111111111000000\"</span>)</span></span>;</div><div class=\"line\"><span class=\"built_in\">bitset</span>&lt;32&gt; bitvec6(str,<span class=\"number\">5</span>,<span class=\"number\">4</span>);  <span class=\"comment\">// 使用字符串的其中几位来初始化bitset</span></div></pre></td></tr></table></figure>\n<p>关于bitset一些操作：</p>\n<p><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/4A68ADE99018414EB7B6F81FE9609E27/4364\" alt=\"image\"></p>\n<h2 id=\"随机数\"><a href=\"#随机数\" class=\"headerlink\" title=\"随机数\"></a>随机数</h2><blockquote>\n<p>在老版本的c和c++语言中都依赖于一个简单的C库函数rand来生成随机数，这个函数生成均匀分布的伪随机数（随机种子不改的话，每次运行结果都一样，因此每次都需要重置随机种子），每个随机数的范围在0~Max_Value系统相关最大值（最少为332767） </p>\n<p>然而很多情况下，非均匀的分布随机数也需要，还有浮点数等，这个函数并不适用。</p>\n<p>C++程序不应该使用库函数rand，而应该使用default_random_engine类和恰当分布类对象。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;random&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * args[])</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">\tdefault_random_engine e;</div><div class=\"line\">\t<span class=\"comment\">//default_random_engine e(int); // 指定随机发生种子</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; e()&lt;&lt;<span class=\"built_in\">endl</span>;  <span class=\"comment\">//直接生成  使用默认的分布对象</span></div><div class=\"line\">\tuniform_int_distribution&lt;<span class=\"keyword\">unsigned</span>&gt; u(<span class=\"number\">0</span>, <span class=\"number\">9</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;++i)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; u(e) &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//指定分布函数</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 一般使用时间戳来设置随机种子  秒级别的随机种子  在一秒内生成的随机数序列相同</span></div><div class=\"line\">\t<span class=\"comment\">//default_random_engine e(time(0)); </span></div><div class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">default_real_engine  ;<span class=\"comment\">//实数随机生成引擎</span></div><div class=\"line\">normal_distribution  ;<span class=\"comment\">//正太分布：需要指定均值和标准差</span></div><div class=\"line\">bernoulli_distrbution ;<span class=\"comment\">//伯努利分布，可以生成50%的bool值</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>老版本C++一般使用srand((uint32)time(0))来重置随机种子 ，然后使用rand来生成</p>\n</blockquote>\n<h2 id=\"IO再探\"><a href=\"#IO再探\" class=\"headerlink\" title=\"IO再探\"></a>IO再探</h2><ol>\n<li><strong>ends与endl的区别:</strong><blockquote>\n<p>ends函数 终止字符串 endl 函数 终止一行并刷新缓冲区</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p>&lt;&lt; ends 相当于 &lt;&lt; ‘\\0’<br>    &lt;&lt; endl 相当于 &lt;&lt; ‘\\n’ &lt;&lt; flush</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt; </span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>; </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></div><div class=\"line\"><span class=\"function\"></span>&#123; </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a\"</span> ; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b\"</span> &lt;&lt;ends; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"c\"</span> &lt;&lt;<span class=\"built_in\">endl</span>; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"e\"</span> &lt;&lt; flush; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"f\"</span> &lt;&lt; flush; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"g\"</span> ; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"h\"</span> &lt;&lt;ends; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; flush; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"j\"</span> &lt;&lt;<span class=\"built_in\">endl</span>; </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结果 </span></div><div class=\"line\">ab c </div><div class=\"line\">efgh ij</div></pre></td></tr></table></figure>\n<ol>\n<li><p>控制bool输出格式（其他类型类似）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cout&lt;&lt;boolalpha&lt;&lt;true;//这样可以直接输出字符串true而不是1，修正采用noboolalpha</div><div class=\"line\"></div><div class=\"line\">cout&lt;&lt;hex;十六进制</div><div class=\"line\">cout&lt;&lt;oct;八进制</div><div class=\"line\">cout&lt;&lt;dec；//十进制</div><div class=\"line\">cout&lt;&lt;showbase；可以输出进制</div><div class=\"line\">cout&lt;&lt;noshowbase;//遇上一个命令相反，一般搭配使用</div></pre></td></tr></table></figure>\n</li>\n<li><p>文件IO流<br>文件输出输入流指针位置的控制</p>\n</li>\n</ol>\n<p><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/0069327153F6444F92E38D5262D47B7D/4467\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"元组tuple\"><a href=\"#元组tuple\" class=\"headerlink\" title=\"元组tuple\"></a>元组tuple</h2><p>包含标准库<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tuple&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>tuple(元组)在定义的时候需要制定每个字段的类型，字段个数定义过后不能再次改变，和pair类似，算是其加强版。两个tuple就可以进行&lt; 和 == 运算，但是前提是字段个数相同，而且字段类型也需要一致。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tuple&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * args[])</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">\ttuple&lt;<span class=\"keyword\">int</span>, <span class=\"built_in\">string</span>&gt; tup1 = make_tuple(<span class=\"number\">1</span>, <span class=\"string\">\"huzhgien\"</span>);</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">decltype</span><span class=\"params\">(tup1)</span> my_tuple</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//tuple&lt;int, string&gt; tup1(1, \"huzhgien\");</span></div><div class=\"line\">\t<span class=\"comment\">// 等价  explicit构造函数不能使用=赋值方式初始化</span></div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; get&lt;<span class=\"number\">1</span>&gt;(tup1).c_str()&lt;&lt;<span class=\"built_in\">endl</span>;     <span class=\"comment\">//得到tuple的第二个字段值</span></div><div class=\"line\">\t<span class=\"comment\">//tuple_element&lt;1, my_tuple&gt;::type cnt = get&lt;1&gt;(tup1);</span></div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; tuple_size&lt;my_tuple&gt;::value &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//得到tuple的字段个数</span></div><div class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong><em>这个数据结构常常用在函数需要返回多个值且不需要新建一个struct或者class时使用</em></strong></p>\n<h2 id=\"位图bitset\"><a href=\"#位图bitset\" class=\"headerlink\" title=\"位图bitset\"></a>位图bitset</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// bitvec1 比初始值小：初始值中的高位被丢弃，只保留13位</span></div><div class=\"line\"><span class=\"built_in\">bitset</span>&lt;13&gt; bitvec1(<span class=\"number\">0xbeef</span>);  <span class=\"comment\">// 二进制位序列为1111011101111</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bitvec1 比初始值大：他的高位置为0</span></div><div class=\"line\"><span class=\"built_in\">bitset</span>&lt;20&gt; bitvec2(<span class=\"number\">0xbeef</span>);  <span class=\"comment\">// 二进制位序列为0001011111011101111</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在64位机器中,long long 0ULL是64个0比特，因此~0ULL是64个1</span></div><div class=\"line\"><span class=\"built_in\">bitset</span>&lt;128&gt; bitvec3(~<span class=\"number\">0U</span>LL);  <span class=\"comment\">// 0~63位为1；63~127位为0</span></div></pre></td></tr></table></figure>\n<p>还可以使用字符串来初始化bitset<br>字符串中下标最小的字符对应高位，反之亦然；如果string包含字符数比bitset少，那么biset的高位被置为0;</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">bitset</span>&lt;32&gt; bitvec4(<span class=\"string\">\"1100\"</span>); <span class=\"comment\">//2、3 两位为1，剩余两位为0；其他为都是0</span></div><div class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">str</span><span class=\"params\">(<span class=\"string\">\"1111111111111111000000\"</span>)</span></span>;</div><div class=\"line\"><span class=\"built_in\">bitset</span>&lt;32&gt; bitvec6(str,<span class=\"number\">5</span>,<span class=\"number\">4</span>);  <span class=\"comment\">// 使用字符串的其中几位来初始化bitset</span></div></pre></td></tr></table></figure>\n<p>关于bitset一些操作：</p>\n<p><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/4A68ADE99018414EB7B6F81FE9609E27/4364\" alt=\"image\"></p>\n<h2 id=\"随机数\"><a href=\"#随机数\" class=\"headerlink\" title=\"随机数\"></a>随机数</h2><blockquote>\n<p>在老版本的c和c++语言中都依赖于一个简单的C库函数rand来生成随机数，这个函数生成均匀分布的伪随机数（随机种子不改的话，每次运行结果都一样，因此每次都需要重置随机种子），每个随机数的范围在0~Max_Value系统相关最大值（最少为332767） </p>\n<p>然而很多情况下，非均匀的分布随机数也需要，还有浮点数等，这个函数并不适用。</p>\n<p>C++程序不应该使用库函数rand，而应该使用default_random_engine类和恰当分布类对象。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;random&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * args[])</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">\tdefault_random_engine e;</div><div class=\"line\">\t<span class=\"comment\">//default_random_engine e(int); // 指定随机发生种子</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; e()&lt;&lt;<span class=\"built_in\">endl</span>;  <span class=\"comment\">//直接生成  使用默认的分布对象</span></div><div class=\"line\">\tuniform_int_distribution&lt;<span class=\"keyword\">unsigned</span>&gt; u(<span class=\"number\">0</span>, <span class=\"number\">9</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;++i)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; u(e) &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//指定分布函数</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 一般使用时间戳来设置随机种子  秒级别的随机种子  在一秒内生成的随机数序列相同</span></div><div class=\"line\">\t<span class=\"comment\">//default_random_engine e(time(0)); </span></div><div class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">default_real_engine  ;<span class=\"comment\">//实数随机生成引擎</span></div><div class=\"line\">normal_distribution  ;<span class=\"comment\">//正太分布：需要指定均值和标准差</span></div><div class=\"line\">bernoulli_distrbution ;<span class=\"comment\">//伯努利分布，可以生成50%的bool值</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>老版本C++一般使用srand((uint32)time(0))来重置随机种子 ，然后使用rand来生成</p>\n</blockquote>\n<h2 id=\"IO再探\"><a href=\"#IO再探\" class=\"headerlink\" title=\"IO再探\"></a>IO再探</h2><ol>\n<li><strong>ends与endl的区别:</strong><blockquote>\n<p>ends函数 终止字符串 endl 函数 终止一行并刷新缓冲区</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p>&lt;&lt; ends 相当于 &lt;&lt; ‘\\0’<br>    &lt;&lt; endl 相当于 &lt;&lt; ‘\\n’ &lt;&lt; flush</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt; </span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>; </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></div><div class=\"line\"><span class=\"function\"></span>&#123; </div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a\"</span> ; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b\"</span> &lt;&lt;ends; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"c\"</span> &lt;&lt;<span class=\"built_in\">endl</span>; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"e\"</span> &lt;&lt; flush; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"f\"</span> &lt;&lt; flush; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"g\"</span> ; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"h\"</span> &lt;&lt;ends; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"i\"</span> &lt;&lt; flush; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"j\"</span> &lt;&lt;<span class=\"built_in\">endl</span>; </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结果 </span></div><div class=\"line\">ab c </div><div class=\"line\">efgh ij</div></pre></td></tr></table></figure>\n<ol>\n<li><p>控制bool输出格式（其他类型类似）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cout&lt;&lt;boolalpha&lt;&lt;true;//这样可以直接输出字符串true而不是1，修正采用noboolalpha</div><div class=\"line\"></div><div class=\"line\">cout&lt;&lt;hex;十六进制</div><div class=\"line\">cout&lt;&lt;oct;八进制</div><div class=\"line\">cout&lt;&lt;dec；//十进制</div><div class=\"line\">cout&lt;&lt;showbase；可以输出进制</div><div class=\"line\">cout&lt;&lt;noshowbase;//遇上一个命令相反，一般搭配使用</div></pre></td></tr></table></figure>\n</li>\n<li><p>文件IO流<br>文件输出输入流指针位置的控制</p>\n</li>\n</ol>\n<p><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/0069327153F6444F92E38D5262D47B7D/4467\" alt=\"image\"></p>\n"},{"title":"C++ 学习之旅","date":"2017-08-01T12:04:09.000Z","_content":"\n## 顺序容器\n    \n1. 支持随机访问容器：vector、deque、array、stringlist双向访问，forward_list单向顺序访，除了 array外 其他容器都支持增加和删除操作！\n\n\n## 关联容器\n\n1. 联容器的迭代器都是双向的\n2. map、set等都可以用列表初始化\n\n    ``` c++\n    set<string> exclude = {\"the\",\"but\",\"huzhigen\",\"and\",\"You\"}\n    map<string,string> authors = {\n        {\"123\",\"456\"},\n        {\"hzg\",\"world\"}\n    }\n    ```\n    \n3. pair的两个成员都是public的 ，可以使用p.first或者p.second来取得\n4. pair对象进行比较相等的条件为first和second分别相等\n5. set、mapde的成员key_type表示关键字的类型，set中value_type表示关键字类型，而map中表示的是pair<const kay_type,mapped_type>类型，mapped_type才是关键字关联的类型\n6. set的迭代器只能访问set中的元素，而不能修改集合的元素值。\n7. 使用一个不再容器中的关键字作为下标，会添加一个具有此关键字的元素到map中\n\n## 动态内存\n1. 对于内置类型来说：值初始化的内置类型对象有着良好定义的值，而默认初始化的对象值是未定义的。\n\n    ``` c++\n    int *p1 = new int;   // 默认初始化，指向的对象未定义\n    int *p2 = new int();   //值初始化为0\n    ```\n    \n    而对于其他定义类型则使用默认构造器初始化\n    \n    ``` c++\n    string *p1 = new string;   // 默认初始化，指向的对象是空string\n    string *p2 = new string();   //值初始化为空string\n    ```\n    \n2. 由于编译器也好用初始化器的类型来推断要分配的类型，只有初始化括号仅有一个参数的时候才可以使用auto。\n\n    ``` c++\n    auto p1 = new auto(obj);   // p指向一个与obj类型相同的对象，而且该对象使用obj进行初始化\n    auto p2 = new  auto{a,b,c};   //错误\n    ```\n    \n3. 传递给delete的指针必须指向动态分配的内存，或者是一个空指针。释放一块并非new分配的内存，或者将相同的指针值释放多次，其行为是未定义的。new出来的对象一定是等到delete后才会释放内存，因此调用者必须记得显式释放内存，并且将指针置为空。不然会导致内存泄漏问题。\n\n    ``` c++\n    delete p;\n    p = nullptr;\n    ```\n    \n4. 使用内置指针访问智能指针所负责的对象是很危险的，因为无法知道对象何时会被销毁。永远不要用get初始化另一个智能指针或者为另一个智能指针赋值。\n5. 智能指针应该注意的地方：\n    - 不使用相同的内置指针初始化多个智能指针\n    - 不delete  get（）返回的指针\n    - 不使用get（）初始化或者reset另一个智能指针\n    - 记住使用get（）返回的指针最后一个对应的智能指针销毁后，你的指针就变为无效\n    - 如果智能指针管理的资源不是new 分配的内存，应该传递给他一个删除器（类似析构）","source":"_posts/CPP学习之旅.md","raw":"---\ntitle: C++ 学习之旅\ndate: 2017-08-01 20:04:09\ntags:\n\tc++\n---\n\n## 顺序容器\n    \n1. 支持随机访问容器：vector、deque、array、stringlist双向访问，forward_list单向顺序访，除了 array外 其他容器都支持增加和删除操作！\n\n\n## 关联容器\n\n1. 联容器的迭代器都是双向的\n2. map、set等都可以用列表初始化\n\n    ``` c++\n    set<string> exclude = {\"the\",\"but\",\"huzhigen\",\"and\",\"You\"}\n    map<string,string> authors = {\n        {\"123\",\"456\"},\n        {\"hzg\",\"world\"}\n    }\n    ```\n    \n3. pair的两个成员都是public的 ，可以使用p.first或者p.second来取得\n4. pair对象进行比较相等的条件为first和second分别相等\n5. set、mapde的成员key_type表示关键字的类型，set中value_type表示关键字类型，而map中表示的是pair<const kay_type,mapped_type>类型，mapped_type才是关键字关联的类型\n6. set的迭代器只能访问set中的元素，而不能修改集合的元素值。\n7. 使用一个不再容器中的关键字作为下标，会添加一个具有此关键字的元素到map中\n\n## 动态内存\n1. 对于内置类型来说：值初始化的内置类型对象有着良好定义的值，而默认初始化的对象值是未定义的。\n\n    ``` c++\n    int *p1 = new int;   // 默认初始化，指向的对象未定义\n    int *p2 = new int();   //值初始化为0\n    ```\n    \n    而对于其他定义类型则使用默认构造器初始化\n    \n    ``` c++\n    string *p1 = new string;   // 默认初始化，指向的对象是空string\n    string *p2 = new string();   //值初始化为空string\n    ```\n    \n2. 由于编译器也好用初始化器的类型来推断要分配的类型，只有初始化括号仅有一个参数的时候才可以使用auto。\n\n    ``` c++\n    auto p1 = new auto(obj);   // p指向一个与obj类型相同的对象，而且该对象使用obj进行初始化\n    auto p2 = new  auto{a,b,c};   //错误\n    ```\n    \n3. 传递给delete的指针必须指向动态分配的内存，或者是一个空指针。释放一块并非new分配的内存，或者将相同的指针值释放多次，其行为是未定义的。new出来的对象一定是等到delete后才会释放内存，因此调用者必须记得显式释放内存，并且将指针置为空。不然会导致内存泄漏问题。\n\n    ``` c++\n    delete p;\n    p = nullptr;\n    ```\n    \n4. 使用内置指针访问智能指针所负责的对象是很危险的，因为无法知道对象何时会被销毁。永远不要用get初始化另一个智能指针或者为另一个智能指针赋值。\n5. 智能指针应该注意的地方：\n    - 不使用相同的内置指针初始化多个智能指针\n    - 不delete  get（）返回的指针\n    - 不使用get（）初始化或者reset另一个智能指针\n    - 记住使用get（）返回的指针最后一个对应的智能指针销毁后，你的指针就变为无效\n    - 如果智能指针管理的资源不是new 分配的内存，应该传递给他一个删除器（类似析构）","slug":"CPP学习之旅","published":1,"updated":"2017-08-02T01:53:04.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ihxmdf00056ci630yq4ye1","content":"<h2 id=\"顺序容器\"><a href=\"#顺序容器\" class=\"headerlink\" title=\"顺序容器\"></a>顺序容器</h2><ol>\n<li>支持随机访问容器：vector、deque、array、stringlist双向访问，forward_list单向顺序访，除了 array外 其他容器都支持增加和删除操作！</li>\n</ol>\n<h2 id=\"关联容器\"><a href=\"#关联容器\" class=\"headerlink\" title=\"关联容器\"></a>关联容器</h2><ol>\n<li>联容器的迭代器都是双向的</li>\n<li><p>map、set等都可以用列表初始化</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; exclude = &#123;<span class=\"string\">\"the\"</span>,<span class=\"string\">\"but\"</span>,<span class=\"string\">\"huzhigen\"</span>,<span class=\"string\">\"and\"</span>,<span class=\"string\">\"You\"</span>&#125;</div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>,<span class=\"built_in\">string</span>&gt; authors = &#123;</div><div class=\"line\">    &#123;<span class=\"string\">\"123\"</span>,<span class=\"string\">\"456\"</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"string\">\"hzg\"</span>,<span class=\"string\">\"world\"</span>&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>pair的两个成员都是public的 ，可以使用p.first或者p.second来取得</li>\n<li>pair对象进行比较相等的条件为first和second分别相等</li>\n<li>set、mapde的成员key_type表示关键字的类型，set中value_type表示关键字类型，而map中表示的是pair<const kay_type,mapped_type=\"\">类型，mapped_type才是关键字关联的类型</const></li>\n<li>set的迭代器只能访问set中的元素，而不能修改集合的元素值。</li>\n<li>使用一个不再容器中的关键字作为下标，会添加一个具有此关键字的元素到map中</li>\n</ol>\n<h2 id=\"动态内存\"><a href=\"#动态内存\" class=\"headerlink\" title=\"动态内存\"></a>动态内存</h2><ol>\n<li><p>对于内置类型来说：值初始化的内置类型对象有着良好定义的值，而默认初始化的对象值是未定义的。</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> *p1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>;   <span class=\"comment\">// 默认初始化，指向的对象未定义</span></div><div class=\"line\"><span class=\"keyword\">int</span> *p2 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>();   <span class=\"comment\">//值初始化为0</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code>而对于其他定义类型则使用默认构造器初始化\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">string</span> *p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>;   <span class=\"comment\">// 默认初始化，指向的对象是空string</span></div><div class=\"line\"><span class=\"built_in\">string</span> *p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>();   <span class=\"comment\">//值初始化为空string</span></div></pre></td></tr></table></figure>\n</code></pre><ol>\n<li><p>由于编译器也好用初始化器的类型来推断要分配的类型，只有初始化括号仅有一个参数的时候才可以使用auto。</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">auto</span> p1 = <span class=\"keyword\">new</span> <span class=\"keyword\">auto</span>(obj);   <span class=\"comment\">// p指向一个与obj类型相同的对象，而且该对象使用obj进行初始化</span></div><div class=\"line\"><span class=\"keyword\">auto</span> p2 = <span class=\"keyword\">new</span>  <span class=\"keyword\">auto</span>&#123;a,b,c&#125;;   <span class=\"comment\">//错误</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>传递给delete的指针必须指向动态分配的内存，或者是一个空指针。释放一块并非new分配的内存，或者将相同的指针值释放多次，其行为是未定义的。new出来的对象一定是等到delete后才会释放内存，因此调用者必须记得显式释放内存，并且将指针置为空。不然会导致内存泄漏问题。</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">delete</span> p;</div><div class=\"line\">p = <span class=\"literal\">nullptr</span>;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>使用内置指针访问智能指针所负责的对象是很危险的，因为无法知道对象何时会被销毁。永远不要用get初始化另一个智能指针或者为另一个智能指针赋值。</li>\n<li>智能指针应该注意的地方：<ul>\n<li>不使用相同的内置指针初始化多个智能指针</li>\n<li>不delete  get（）返回的指针</li>\n<li>不使用get（）初始化或者reset另一个智能指针</li>\n<li>记住使用get（）返回的指针最后一个对应的智能指针销毁后，你的指针就变为无效</li>\n<li>如果智能指针管理的资源不是new 分配的内存，应该传递给他一个删除器（类似析构）</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"顺序容器\"><a href=\"#顺序容器\" class=\"headerlink\" title=\"顺序容器\"></a>顺序容器</h2><ol>\n<li>支持随机访问容器：vector、deque、array、stringlist双向访问，forward_list单向顺序访，除了 array外 其他容器都支持增加和删除操作！</li>\n</ol>\n<h2 id=\"关联容器\"><a href=\"#关联容器\" class=\"headerlink\" title=\"关联容器\"></a>关联容器</h2><ol>\n<li>联容器的迭代器都是双向的</li>\n<li><p>map、set等都可以用列表初始化</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; exclude = &#123;<span class=\"string\">\"the\"</span>,<span class=\"string\">\"but\"</span>,<span class=\"string\">\"huzhigen\"</span>,<span class=\"string\">\"and\"</span>,<span class=\"string\">\"You\"</span>&#125;</div><div class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>,<span class=\"built_in\">string</span>&gt; authors = &#123;</div><div class=\"line\">    &#123;<span class=\"string\">\"123\"</span>,<span class=\"string\">\"456\"</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"string\">\"hzg\"</span>,<span class=\"string\">\"world\"</span>&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>pair的两个成员都是public的 ，可以使用p.first或者p.second来取得</li>\n<li>pair对象进行比较相等的条件为first和second分别相等</li>\n<li>set、mapde的成员key_type表示关键字的类型，set中value_type表示关键字类型，而map中表示的是pair<const kay_type,mapped_type=\"\">类型，mapped_type才是关键字关联的类型</const></li>\n<li>set的迭代器只能访问set中的元素，而不能修改集合的元素值。</li>\n<li>使用一个不再容器中的关键字作为下标，会添加一个具有此关键字的元素到map中</li>\n</ol>\n<h2 id=\"动态内存\"><a href=\"#动态内存\" class=\"headerlink\" title=\"动态内存\"></a>动态内存</h2><ol>\n<li><p>对于内置类型来说：值初始化的内置类型对象有着良好定义的值，而默认初始化的对象值是未定义的。</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> *p1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>;   <span class=\"comment\">// 默认初始化，指向的对象未定义</span></div><div class=\"line\"><span class=\"keyword\">int</span> *p2 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>();   <span class=\"comment\">//值初始化为0</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code>而对于其他定义类型则使用默认构造器初始化\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">string</span> *p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>;   <span class=\"comment\">// 默认初始化，指向的对象是空string</span></div><div class=\"line\"><span class=\"built_in\">string</span> *p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>();   <span class=\"comment\">//值初始化为空string</span></div></pre></td></tr></table></figure>\n</code></pre><ol>\n<li><p>由于编译器也好用初始化器的类型来推断要分配的类型，只有初始化括号仅有一个参数的时候才可以使用auto。</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">auto</span> p1 = <span class=\"keyword\">new</span> <span class=\"keyword\">auto</span>(obj);   <span class=\"comment\">// p指向一个与obj类型相同的对象，而且该对象使用obj进行初始化</span></div><div class=\"line\"><span class=\"keyword\">auto</span> p2 = <span class=\"keyword\">new</span>  <span class=\"keyword\">auto</span>&#123;a,b,c&#125;;   <span class=\"comment\">//错误</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>传递给delete的指针必须指向动态分配的内存，或者是一个空指针。释放一块并非new分配的内存，或者将相同的指针值释放多次，其行为是未定义的。new出来的对象一定是等到delete后才会释放内存，因此调用者必须记得显式释放内存，并且将指针置为空。不然会导致内存泄漏问题。</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">delete</span> p;</div><div class=\"line\">p = <span class=\"literal\">nullptr</span>;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>使用内置指针访问智能指针所负责的对象是很危险的，因为无法知道对象何时会被销毁。永远不要用get初始化另一个智能指针或者为另一个智能指针赋值。</li>\n<li>智能指针应该注意的地方：<ul>\n<li>不使用相同的内置指针初始化多个智能指针</li>\n<li>不delete  get（）返回的指针</li>\n<li>不使用get（）初始化或者reset另一个智能指针</li>\n<li>记住使用get（）返回的指针最后一个对应的智能指针销毁后，你的指针就变为无效</li>\n<li>如果智能指针管理的资源不是new 分配的内存，应该传递给他一个删除器（类似析构）</li>\n</ul>\n</li>\n</ol>\n"},{"title":"C++ 拷贝构造函数和赋值运算符","date":"2017-08-02T03:38:28.000Z","_content":"本文主要介绍了拷贝构造函数和赋值运算符的区别，以及在什么时候调用拷贝构造函数、什么情况下调用赋值运算符。最后，简单的分析了下深拷贝和浅拷贝的问题。\n\n## 拷贝构造函数和赋值运算符\n在默认情况下（用户没有定义，但是也没有显式的删除），编译器会自动的隐式生成一个拷贝构造函数和赋值运算符。但用户可以使用delete来指定不生成拷贝构造函数和赋值运算符，这样的对象就不能通过值传递，也不能进行赋值运算。\n\n```\nclass Person\n{\npublic:\n\n    Person(const Person& p) = delete;\n\n    Person& operator=(const Person& p) = delete;\n\nprivate:\n    int age;\n    string name;\n};\n```\n\n上面的定义的类Person显式的删除了拷贝构造函数和赋值运算符，在需要调用拷贝构造函数或者赋值运算符的地方，会提示_无法调用该函数，它是已删除的函数_。\n\n还有一点需要注意的是，**拷贝构造函数必须以引用的方式传递参数**。这是因为，*在值传递的方式传递给一个函数的时候，会调用拷贝构造函数生成函数的实参。如果拷贝构造函数的参数仍然是以值的方式，就会无限循环的调用下去，直到函数的栈溢出。*\n\n## 何时调用\n\n拷贝构造函数和赋值运算符的行为比较相似，都是将一个对象的值复制给另一个对象；但是其结果却有些不同，拷贝构造函数使用传入对象的值生成一个新的对象的实例，而赋值运算符是将对象的值复制给一个已经存在的实例。这种区别从两者的名字也可以很轻易的分辨出来，拷贝构造函数也是一种构造函数，那么它的功能就是创建一个新的对象实例；赋值运算符是执行某种运算，将一个对象的值复制给另一个对象（已经存在的）。**调用的是拷贝构造函数还是赋值运算符，主要是看是否有新的对象实例产生。如果产生了新的对象实例，那调用的就是拷贝构造函数；如果没有，那就是对已有的对象赋值，调用的是赋值运算符。**\n\n### 调用拷贝构造函数主要有以下场景：\n\n对象作为函数的参数，以值传递的方式传给函数。　\n对象作为函数的返回值，以值的方式从函数返回\n使用一个对象给另一个对象初始化\n代码如下：\n```\nclass Person\n{\npublic:\n    Person(){}\n    Person(const Person& p)\n    {\n        cout << \"Copy Constructor\" << endl;\n    }\n\n    Person& operator=(const Person& p)\n    {\n        cout << \"Assign\" << endl;\n        return *this;\n    }\n\nprivate:\n    int age;\n    string name;\n};\n\nvoid f(Person p)\n{\n    return;\n}\n\nPerson f1()\n{\n    Person p;\n    return p;\n}\n\nint main()\n{\n    Person p;\n    Person p1 = p;    // 1\n    Person p2;\n    p2 = p;           // 2\n    f(p2);            // 3\n\n    p2 = f1();        // 4\n\n    Person p3 = f1(); // 5\n\n    getchar();\n    return 0;\n}\n```\n\n上面代码中定义了一个类Person，显式的定义了拷贝构造函数和赋值运算符。然后定义了两个函数:f，以值的方式参传入Person对象；f1，以值的方式返回Person对象。在main中模拟了5中场景，测试调用的是拷贝构造函数还是赋值运算符。执行结果如下：\n\n![](http://images2015.cnblogs.com/blog/439761/201612/439761-20161207163440429-300030531.png)\n\n\n### 分析如下： \n\n1. 这是虽然使用了\"=\"，但是实际上使用对象p来创建一个新的对象p1。也就是产生了新的对象，所以调用的是拷贝构造函数。\n2. 首先声明一个对象p2，然后使用赋值运算符\"=\"，将p的值复制给p2，显然是调用赋值运算符，为一个已经存在的对象赋值 。\n3. 以值传递的方式将对象p2传入函数f内，调用拷贝构造函数构建一个函数f可用的实参。\n4. 这条语句拷贝构造函数和赋值运算符都调用了。函数f1以值的方式返回一个Person对象，在返回时会调用拷贝构造函数创建一个临时对象tmp作为返回值；返回后调用赋值运算符将临时对象tmp赋值给p2.\n5. 按照4的解释，应该是首先调用拷贝构造函数创建临时对象；然后再调用拷贝构造函数使用刚才创建的临时对象创建新的对象p3，也就是会调用两次拷贝构造函数。不过，编译器也没有那么傻，应该是直接调用拷贝构造函数使用返回值创建了对象p3。\n\n## 深拷贝、浅拷贝\n\n说到拷贝构造函数，就不得不提深拷贝和浅拷贝。通常，默认生成的拷贝构造函数和赋值运算符，只是简单的进行值的复制。例如：上面的Person类，字段只有int和string两种类型，这在拷贝或者赋值时进行值复制创建的出来的对象和源对象也是没有任何关联，对源对象的任何操作都不会影响到拷贝出来的对象。反之，假如Person有一个对象为int *，这时在拷贝时还只是进行值复制，那么创建出来的Person对象的int *的值就和源对象的int *指向的是同一个位置。任何一个对象对该值的修改都会影响到另一个对象，这种情况就是浅拷贝。\n\n深拷贝和浅拷贝主要是针对类中的指针和动态分配的空间来说的，因为对于指针只是简单的值复制并不能分割开两个对象的关联，任何一个对象对该指针的操作都会影响到另一个对象。这时候就需要提供自定义的深拷贝的拷贝构造函数，消除这种影响。通常的原则是：\n\n- 含有指针类型的成员或者有动态分配内存的成员都应该提供自定义的拷贝构造函数\n- 在提供拷贝构造函数的同时，还应该考虑实现自定义的赋值运算符\n\n对于拷贝构造函数的实现要确保以下几点：\n\n- 对于值类型的成员进行值复制\n- 对于指针和动态分配的空间，在拷贝中应重新分配分配空间\n- 对于基类，要调用基类合适的拷贝方法，完成基类的拷贝\n## 总结\n- 拷贝构造函数和赋值运算符的行为比较相似，却产生不同的结果；拷贝构造函数使用已有的对象创建一个新的对象，赋值运算符是将一个对象的值复制给另一个已存在的对象。区分是调用拷贝构造函数还是赋值运算符，主要是否有新的对象产生。\n- 关于深拷贝和浅拷贝。当类有指针成员或有动态分配空间，都应实现自定义的拷贝构造函数。提供了拷贝构造函数，最后也实现赋值运算符。","source":"_posts/C-拷贝构造函数和赋值运算符.md","raw":"---\ntitle: C++ 拷贝构造函数和赋值运算符\ndate: 2017-08-02 11:38:28\ntags:\n\tC++\n---\n本文主要介绍了拷贝构造函数和赋值运算符的区别，以及在什么时候调用拷贝构造函数、什么情况下调用赋值运算符。最后，简单的分析了下深拷贝和浅拷贝的问题。\n\n## 拷贝构造函数和赋值运算符\n在默认情况下（用户没有定义，但是也没有显式的删除），编译器会自动的隐式生成一个拷贝构造函数和赋值运算符。但用户可以使用delete来指定不生成拷贝构造函数和赋值运算符，这样的对象就不能通过值传递，也不能进行赋值运算。\n\n```\nclass Person\n{\npublic:\n\n    Person(const Person& p) = delete;\n\n    Person& operator=(const Person& p) = delete;\n\nprivate:\n    int age;\n    string name;\n};\n```\n\n上面的定义的类Person显式的删除了拷贝构造函数和赋值运算符，在需要调用拷贝构造函数或者赋值运算符的地方，会提示_无法调用该函数，它是已删除的函数_。\n\n还有一点需要注意的是，**拷贝构造函数必须以引用的方式传递参数**。这是因为，*在值传递的方式传递给一个函数的时候，会调用拷贝构造函数生成函数的实参。如果拷贝构造函数的参数仍然是以值的方式，就会无限循环的调用下去，直到函数的栈溢出。*\n\n## 何时调用\n\n拷贝构造函数和赋值运算符的行为比较相似，都是将一个对象的值复制给另一个对象；但是其结果却有些不同，拷贝构造函数使用传入对象的值生成一个新的对象的实例，而赋值运算符是将对象的值复制给一个已经存在的实例。这种区别从两者的名字也可以很轻易的分辨出来，拷贝构造函数也是一种构造函数，那么它的功能就是创建一个新的对象实例；赋值运算符是执行某种运算，将一个对象的值复制给另一个对象（已经存在的）。**调用的是拷贝构造函数还是赋值运算符，主要是看是否有新的对象实例产生。如果产生了新的对象实例，那调用的就是拷贝构造函数；如果没有，那就是对已有的对象赋值，调用的是赋值运算符。**\n\n### 调用拷贝构造函数主要有以下场景：\n\n对象作为函数的参数，以值传递的方式传给函数。　\n对象作为函数的返回值，以值的方式从函数返回\n使用一个对象给另一个对象初始化\n代码如下：\n```\nclass Person\n{\npublic:\n    Person(){}\n    Person(const Person& p)\n    {\n        cout << \"Copy Constructor\" << endl;\n    }\n\n    Person& operator=(const Person& p)\n    {\n        cout << \"Assign\" << endl;\n        return *this;\n    }\n\nprivate:\n    int age;\n    string name;\n};\n\nvoid f(Person p)\n{\n    return;\n}\n\nPerson f1()\n{\n    Person p;\n    return p;\n}\n\nint main()\n{\n    Person p;\n    Person p1 = p;    // 1\n    Person p2;\n    p2 = p;           // 2\n    f(p2);            // 3\n\n    p2 = f1();        // 4\n\n    Person p3 = f1(); // 5\n\n    getchar();\n    return 0;\n}\n```\n\n上面代码中定义了一个类Person，显式的定义了拷贝构造函数和赋值运算符。然后定义了两个函数:f，以值的方式参传入Person对象；f1，以值的方式返回Person对象。在main中模拟了5中场景，测试调用的是拷贝构造函数还是赋值运算符。执行结果如下：\n\n![](http://images2015.cnblogs.com/blog/439761/201612/439761-20161207163440429-300030531.png)\n\n\n### 分析如下： \n\n1. 这是虽然使用了\"=\"，但是实际上使用对象p来创建一个新的对象p1。也就是产生了新的对象，所以调用的是拷贝构造函数。\n2. 首先声明一个对象p2，然后使用赋值运算符\"=\"，将p的值复制给p2，显然是调用赋值运算符，为一个已经存在的对象赋值 。\n3. 以值传递的方式将对象p2传入函数f内，调用拷贝构造函数构建一个函数f可用的实参。\n4. 这条语句拷贝构造函数和赋值运算符都调用了。函数f1以值的方式返回一个Person对象，在返回时会调用拷贝构造函数创建一个临时对象tmp作为返回值；返回后调用赋值运算符将临时对象tmp赋值给p2.\n5. 按照4的解释，应该是首先调用拷贝构造函数创建临时对象；然后再调用拷贝构造函数使用刚才创建的临时对象创建新的对象p3，也就是会调用两次拷贝构造函数。不过，编译器也没有那么傻，应该是直接调用拷贝构造函数使用返回值创建了对象p3。\n\n## 深拷贝、浅拷贝\n\n说到拷贝构造函数，就不得不提深拷贝和浅拷贝。通常，默认生成的拷贝构造函数和赋值运算符，只是简单的进行值的复制。例如：上面的Person类，字段只有int和string两种类型，这在拷贝或者赋值时进行值复制创建的出来的对象和源对象也是没有任何关联，对源对象的任何操作都不会影响到拷贝出来的对象。反之，假如Person有一个对象为int *，这时在拷贝时还只是进行值复制，那么创建出来的Person对象的int *的值就和源对象的int *指向的是同一个位置。任何一个对象对该值的修改都会影响到另一个对象，这种情况就是浅拷贝。\n\n深拷贝和浅拷贝主要是针对类中的指针和动态分配的空间来说的，因为对于指针只是简单的值复制并不能分割开两个对象的关联，任何一个对象对该指针的操作都会影响到另一个对象。这时候就需要提供自定义的深拷贝的拷贝构造函数，消除这种影响。通常的原则是：\n\n- 含有指针类型的成员或者有动态分配内存的成员都应该提供自定义的拷贝构造函数\n- 在提供拷贝构造函数的同时，还应该考虑实现自定义的赋值运算符\n\n对于拷贝构造函数的实现要确保以下几点：\n\n- 对于值类型的成员进行值复制\n- 对于指针和动态分配的空间，在拷贝中应重新分配分配空间\n- 对于基类，要调用基类合适的拷贝方法，完成基类的拷贝\n## 总结\n- 拷贝构造函数和赋值运算符的行为比较相似，却产生不同的结果；拷贝构造函数使用已有的对象创建一个新的对象，赋值运算符是将一个对象的值复制给另一个已存在的对象。区分是调用拷贝构造函数还是赋值运算符，主要是否有新的对象产生。\n- 关于深拷贝和浅拷贝。当类有指针成员或有动态分配空间，都应实现自定义的拷贝构造函数。提供了拷贝构造函数，最后也实现赋值运算符。","slug":"C-拷贝构造函数和赋值运算符","published":1,"updated":"2017-08-02T03:39:31.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ihxmdi00066ci6pxlozou7","content":"<p>本文主要介绍了拷贝构造函数和赋值运算符的区别，以及在什么时候调用拷贝构造函数、什么情况下调用赋值运算符。最后，简单的分析了下深拷贝和浅拷贝的问题。</p>\n<h2 id=\"拷贝构造函数和赋值运算符\"><a href=\"#拷贝构造函数和赋值运算符\" class=\"headerlink\" title=\"拷贝构造函数和赋值运算符\"></a>拷贝构造函数和赋值运算符</h2><p>在默认情况下（用户没有定义，但是也没有显式的删除），编译器会自动的隐式生成一个拷贝构造函数和赋值运算符。但用户可以使用delete来指定不生成拷贝构造函数和赋值运算符，这样的对象就不能通过值传递，也不能进行赋值运算。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Person</div><div class=\"line\">&#123;</div><div class=\"line\">public:</div><div class=\"line\"></div><div class=\"line\">    Person(const Person&amp; p) = delete;</div><div class=\"line\"></div><div class=\"line\">    Person&amp; operator=(const Person&amp; p) = delete;</div><div class=\"line\"></div><div class=\"line\">private:</div><div class=\"line\">    int age;</div><div class=\"line\">    string name;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>上面的定义的类Person显式的删除了拷贝构造函数和赋值运算符，在需要调用拷贝构造函数或者赋值运算符的地方，会提示<em>无法调用该函数，它是已删除的函数</em>。</p>\n<p>还有一点需要注意的是，<strong>拷贝构造函数必须以引用的方式传递参数</strong>。这是因为，<em>在值传递的方式传递给一个函数的时候，会调用拷贝构造函数生成函数的实参。如果拷贝构造函数的参数仍然是以值的方式，就会无限循环的调用下去，直到函数的栈溢出。</em></p>\n<h2 id=\"何时调用\"><a href=\"#何时调用\" class=\"headerlink\" title=\"何时调用\"></a>何时调用</h2><p>拷贝构造函数和赋值运算符的行为比较相似，都是将一个对象的值复制给另一个对象；但是其结果却有些不同，拷贝构造函数使用传入对象的值生成一个新的对象的实例，而赋值运算符是将对象的值复制给一个已经存在的实例。这种区别从两者的名字也可以很轻易的分辨出来，拷贝构造函数也是一种构造函数，那么它的功能就是创建一个新的对象实例；赋值运算符是执行某种运算，将一个对象的值复制给另一个对象（已经存在的）。<strong>调用的是拷贝构造函数还是赋值运算符，主要是看是否有新的对象实例产生。如果产生了新的对象实例，那调用的就是拷贝构造函数；如果没有，那就是对已有的对象赋值，调用的是赋值运算符。</strong></p>\n<h3 id=\"调用拷贝构造函数主要有以下场景：\"><a href=\"#调用拷贝构造函数主要有以下场景：\" class=\"headerlink\" title=\"调用拷贝构造函数主要有以下场景：\"></a>调用拷贝构造函数主要有以下场景：</h3><p>对象作为函数的参数，以值传递的方式传给函数。　<br>对象作为函数的返回值，以值的方式从函数返回<br>使用一个对象给另一个对象初始化<br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Person</div><div class=\"line\">&#123;</div><div class=\"line\">public:</div><div class=\"line\">    Person()&#123;&#125;</div><div class=\"line\">    Person(const Person&amp; p)</div><div class=\"line\">    &#123;</div><div class=\"line\">        cout &lt;&lt; &quot;Copy Constructor&quot; &lt;&lt; endl;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Person&amp; operator=(const Person&amp; p)</div><div class=\"line\">    &#123;</div><div class=\"line\">        cout &lt;&lt; &quot;Assign&quot; &lt;&lt; endl;</div><div class=\"line\">        return *this;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">private:</div><div class=\"line\">    int age;</div><div class=\"line\">    string name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">void f(Person p)</div><div class=\"line\">&#123;</div><div class=\"line\">    return;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person f1()</div><div class=\"line\">&#123;</div><div class=\"line\">    Person p;</div><div class=\"line\">    return p;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">    Person p;</div><div class=\"line\">    Person p1 = p;    // 1</div><div class=\"line\">    Person p2;</div><div class=\"line\">    p2 = p;           // 2</div><div class=\"line\">    f(p2);            // 3</div><div class=\"line\"></div><div class=\"line\">    p2 = f1();        // 4</div><div class=\"line\"></div><div class=\"line\">    Person p3 = f1(); // 5</div><div class=\"line\"></div><div class=\"line\">    getchar();</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码中定义了一个类Person，显式的定义了拷贝构造函数和赋值运算符。然后定义了两个函数:f，以值的方式参传入Person对象；f1，以值的方式返回Person对象。在main中模拟了5中场景，测试调用的是拷贝构造函数还是赋值运算符。执行结果如下：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/439761/201612/439761-20161207163440429-300030531.png\" alt=\"\"></p>\n<h3 id=\"分析如下：\"><a href=\"#分析如下：\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h3><ol>\n<li>这是虽然使用了”=”，但是实际上使用对象p来创建一个新的对象p1。也就是产生了新的对象，所以调用的是拷贝构造函数。</li>\n<li>首先声明一个对象p2，然后使用赋值运算符”=”，将p的值复制给p2，显然是调用赋值运算符，为一个已经存在的对象赋值 。</li>\n<li>以值传递的方式将对象p2传入函数f内，调用拷贝构造函数构建一个函数f可用的实参。</li>\n<li>这条语句拷贝构造函数和赋值运算符都调用了。函数f1以值的方式返回一个Person对象，在返回时会调用拷贝构造函数创建一个临时对象tmp作为返回值；返回后调用赋值运算符将临时对象tmp赋值给p2.</li>\n<li>按照4的解释，应该是首先调用拷贝构造函数创建临时对象；然后再调用拷贝构造函数使用刚才创建的临时对象创建新的对象p3，也就是会调用两次拷贝构造函数。不过，编译器也没有那么傻，应该是直接调用拷贝构造函数使用返回值创建了对象p3。</li>\n</ol>\n<h2 id=\"深拷贝、浅拷贝\"><a href=\"#深拷贝、浅拷贝\" class=\"headerlink\" title=\"深拷贝、浅拷贝\"></a>深拷贝、浅拷贝</h2><p>说到拷贝构造函数，就不得不提深拷贝和浅拷贝。通常，默认生成的拷贝构造函数和赋值运算符，只是简单的进行值的复制。例如：上面的Person类，字段只有int和string两种类型，这在拷贝或者赋值时进行值复制创建的出来的对象和源对象也是没有任何关联，对源对象的任何操作都不会影响到拷贝出来的对象。反之，假如Person有一个对象为int <em>，这时在拷贝时还只是进行值复制，那么创建出来的Person对象的int </em>的值就和源对象的int *指向的是同一个位置。任何一个对象对该值的修改都会影响到另一个对象，这种情况就是浅拷贝。</p>\n<p>深拷贝和浅拷贝主要是针对类中的指针和动态分配的空间来说的，因为对于指针只是简单的值复制并不能分割开两个对象的关联，任何一个对象对该指针的操作都会影响到另一个对象。这时候就需要提供自定义的深拷贝的拷贝构造函数，消除这种影响。通常的原则是：</p>\n<ul>\n<li>含有指针类型的成员或者有动态分配内存的成员都应该提供自定义的拷贝构造函数</li>\n<li>在提供拷贝构造函数的同时，还应该考虑实现自定义的赋值运算符</li>\n</ul>\n<p>对于拷贝构造函数的实现要确保以下几点：</p>\n<ul>\n<li>对于值类型的成员进行值复制</li>\n<li>对于指针和动态分配的空间，在拷贝中应重新分配分配空间</li>\n<li>对于基类，要调用基类合适的拷贝方法，完成基类的拷贝<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2></li>\n<li>拷贝构造函数和赋值运算符的行为比较相似，却产生不同的结果；拷贝构造函数使用已有的对象创建一个新的对象，赋值运算符是将一个对象的值复制给另一个已存在的对象。区分是调用拷贝构造函数还是赋值运算符，主要是否有新的对象产生。</li>\n<li>关于深拷贝和浅拷贝。当类有指针成员或有动态分配空间，都应实现自定义的拷贝构造函数。提供了拷贝构造函数，最后也实现赋值运算符。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>本文主要介绍了拷贝构造函数和赋值运算符的区别，以及在什么时候调用拷贝构造函数、什么情况下调用赋值运算符。最后，简单的分析了下深拷贝和浅拷贝的问题。</p>\n<h2 id=\"拷贝构造函数和赋值运算符\"><a href=\"#拷贝构造函数和赋值运算符\" class=\"headerlink\" title=\"拷贝构造函数和赋值运算符\"></a>拷贝构造函数和赋值运算符</h2><p>在默认情况下（用户没有定义，但是也没有显式的删除），编译器会自动的隐式生成一个拷贝构造函数和赋值运算符。但用户可以使用delete来指定不生成拷贝构造函数和赋值运算符，这样的对象就不能通过值传递，也不能进行赋值运算。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Person</div><div class=\"line\">&#123;</div><div class=\"line\">public:</div><div class=\"line\"></div><div class=\"line\">    Person(const Person&amp; p) = delete;</div><div class=\"line\"></div><div class=\"line\">    Person&amp; operator=(const Person&amp; p) = delete;</div><div class=\"line\"></div><div class=\"line\">private:</div><div class=\"line\">    int age;</div><div class=\"line\">    string name;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>上面的定义的类Person显式的删除了拷贝构造函数和赋值运算符，在需要调用拷贝构造函数或者赋值运算符的地方，会提示<em>无法调用该函数，它是已删除的函数</em>。</p>\n<p>还有一点需要注意的是，<strong>拷贝构造函数必须以引用的方式传递参数</strong>。这是因为，<em>在值传递的方式传递给一个函数的时候，会调用拷贝构造函数生成函数的实参。如果拷贝构造函数的参数仍然是以值的方式，就会无限循环的调用下去，直到函数的栈溢出。</em></p>\n<h2 id=\"何时调用\"><a href=\"#何时调用\" class=\"headerlink\" title=\"何时调用\"></a>何时调用</h2><p>拷贝构造函数和赋值运算符的行为比较相似，都是将一个对象的值复制给另一个对象；但是其结果却有些不同，拷贝构造函数使用传入对象的值生成一个新的对象的实例，而赋值运算符是将对象的值复制给一个已经存在的实例。这种区别从两者的名字也可以很轻易的分辨出来，拷贝构造函数也是一种构造函数，那么它的功能就是创建一个新的对象实例；赋值运算符是执行某种运算，将一个对象的值复制给另一个对象（已经存在的）。<strong>调用的是拷贝构造函数还是赋值运算符，主要是看是否有新的对象实例产生。如果产生了新的对象实例，那调用的就是拷贝构造函数；如果没有，那就是对已有的对象赋值，调用的是赋值运算符。</strong></p>\n<h3 id=\"调用拷贝构造函数主要有以下场景：\"><a href=\"#调用拷贝构造函数主要有以下场景：\" class=\"headerlink\" title=\"调用拷贝构造函数主要有以下场景：\"></a>调用拷贝构造函数主要有以下场景：</h3><p>对象作为函数的参数，以值传递的方式传给函数。　<br>对象作为函数的返回值，以值的方式从函数返回<br>使用一个对象给另一个对象初始化<br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Person</div><div class=\"line\">&#123;</div><div class=\"line\">public:</div><div class=\"line\">    Person()&#123;&#125;</div><div class=\"line\">    Person(const Person&amp; p)</div><div class=\"line\">    &#123;</div><div class=\"line\">        cout &lt;&lt; &quot;Copy Constructor&quot; &lt;&lt; endl;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Person&amp; operator=(const Person&amp; p)</div><div class=\"line\">    &#123;</div><div class=\"line\">        cout &lt;&lt; &quot;Assign&quot; &lt;&lt; endl;</div><div class=\"line\">        return *this;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">private:</div><div class=\"line\">    int age;</div><div class=\"line\">    string name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">void f(Person p)</div><div class=\"line\">&#123;</div><div class=\"line\">    return;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person f1()</div><div class=\"line\">&#123;</div><div class=\"line\">    Person p;</div><div class=\"line\">    return p;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">    Person p;</div><div class=\"line\">    Person p1 = p;    // 1</div><div class=\"line\">    Person p2;</div><div class=\"line\">    p2 = p;           // 2</div><div class=\"line\">    f(p2);            // 3</div><div class=\"line\"></div><div class=\"line\">    p2 = f1();        // 4</div><div class=\"line\"></div><div class=\"line\">    Person p3 = f1(); // 5</div><div class=\"line\"></div><div class=\"line\">    getchar();</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码中定义了一个类Person，显式的定义了拷贝构造函数和赋值运算符。然后定义了两个函数:f，以值的方式参传入Person对象；f1，以值的方式返回Person对象。在main中模拟了5中场景，测试调用的是拷贝构造函数还是赋值运算符。执行结果如下：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/439761/201612/439761-20161207163440429-300030531.png\" alt=\"\"></p>\n<h3 id=\"分析如下：\"><a href=\"#分析如下：\" class=\"headerlink\" title=\"分析如下：\"></a>分析如下：</h3><ol>\n<li>这是虽然使用了”=”，但是实际上使用对象p来创建一个新的对象p1。也就是产生了新的对象，所以调用的是拷贝构造函数。</li>\n<li>首先声明一个对象p2，然后使用赋值运算符”=”，将p的值复制给p2，显然是调用赋值运算符，为一个已经存在的对象赋值 。</li>\n<li>以值传递的方式将对象p2传入函数f内，调用拷贝构造函数构建一个函数f可用的实参。</li>\n<li>这条语句拷贝构造函数和赋值运算符都调用了。函数f1以值的方式返回一个Person对象，在返回时会调用拷贝构造函数创建一个临时对象tmp作为返回值；返回后调用赋值运算符将临时对象tmp赋值给p2.</li>\n<li>按照4的解释，应该是首先调用拷贝构造函数创建临时对象；然后再调用拷贝构造函数使用刚才创建的临时对象创建新的对象p3，也就是会调用两次拷贝构造函数。不过，编译器也没有那么傻，应该是直接调用拷贝构造函数使用返回值创建了对象p3。</li>\n</ol>\n<h2 id=\"深拷贝、浅拷贝\"><a href=\"#深拷贝、浅拷贝\" class=\"headerlink\" title=\"深拷贝、浅拷贝\"></a>深拷贝、浅拷贝</h2><p>说到拷贝构造函数，就不得不提深拷贝和浅拷贝。通常，默认生成的拷贝构造函数和赋值运算符，只是简单的进行值的复制。例如：上面的Person类，字段只有int和string两种类型，这在拷贝或者赋值时进行值复制创建的出来的对象和源对象也是没有任何关联，对源对象的任何操作都不会影响到拷贝出来的对象。反之，假如Person有一个对象为int <em>，这时在拷贝时还只是进行值复制，那么创建出来的Person对象的int </em>的值就和源对象的int *指向的是同一个位置。任何一个对象对该值的修改都会影响到另一个对象，这种情况就是浅拷贝。</p>\n<p>深拷贝和浅拷贝主要是针对类中的指针和动态分配的空间来说的，因为对于指针只是简单的值复制并不能分割开两个对象的关联，任何一个对象对该指针的操作都会影响到另一个对象。这时候就需要提供自定义的深拷贝的拷贝构造函数，消除这种影响。通常的原则是：</p>\n<ul>\n<li>含有指针类型的成员或者有动态分配内存的成员都应该提供自定义的拷贝构造函数</li>\n<li>在提供拷贝构造函数的同时，还应该考虑实现自定义的赋值运算符</li>\n</ul>\n<p>对于拷贝构造函数的实现要确保以下几点：</p>\n<ul>\n<li>对于值类型的成员进行值复制</li>\n<li>对于指针和动态分配的空间，在拷贝中应重新分配分配空间</li>\n<li>对于基类，要调用基类合适的拷贝方法，完成基类的拷贝<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2></li>\n<li>拷贝构造函数和赋值运算符的行为比较相似，却产生不同的结果；拷贝构造函数使用已有的对象创建一个新的对象，赋值运算符是将一个对象的值复制给另一个已存在的对象。区分是调用拷贝构造函数还是赋值运算符，主要是否有新的对象产生。</li>\n<li>关于深拷贝和浅拷贝。当类有指针成员或有动态分配空间，都应实现自定义的拷贝构造函数。提供了拷贝构造函数，最后也实现赋值运算符。</li>\n</ul>\n"},{"title":"C++类型转换","date":"2017-08-03T02:47:24.000Z","_content":"\n\n## 类型转换\n\n- **一个类型转换函数必须是类的成员函数，他不能声明返回类型，形参列表也必须为空，类类型转换函数通常应该是const**\n\n```c++\n#include <iostream>\nusing namespace std;\nclass SmallInt\n{\npublic:\n\tSmallInt(int i = 0) :val(i) \n\t{\n\t\tif (i < 0 || i>255) {\n\t\t\tthrow std::out_of_range(\"Bad SmallInt value\");\n\t\t}\n\t}\n\toperator int() const { return val; }\nprivate:\n\tstd::size_t val;\n};\nint main(int argv, char * argc[]) {\n\tSmallInt si;\n\tsi = 4;  //首先将4隐式转换成SmallInt对象，然后调用SmallInt ：：operator=\n\tsi + 3;  //首先将si隐式转换成int，然后执行整数加法\n\treturn 0;\n}\n```\n\n- 如果在类型转换函数前用explicit关键字来修饰，那么类型转换变为显式转换。\n\n```c++\nsi+3; //这句错误\nstatic_cast<int>(si)+3; //正确：显式的请求类型转换\n```\n\n- 如果表达式被用作条件，则编译器会见显式的类型转换自动应用于他，即显式转换见被隐式转换的执行：\n    1. if、while及do语句部分\n    2. for语句头的条件表达式\n    3. 逻辑非运算符（！）、逻辑或运算符（||）、逻辑与运算符（&&）的运算发对象\n    4. 条件运算符（？：）的条件表达式\n\n- 不要令两个类执行相同的类型转换：如果A类有一个接受B类对象的构造函数，则不要在B中再定义转换目标是A类的类型转换运算符\n\n- 如果对同一类既提供了转换目标是算数类型的类型转换，也提供了重载的运算符，则将会遇到重载运算符与内置运算符的二义性问题\n- 在定义类型转换函数时，切记注意调用转换时不要存在**二义性**","source":"_posts/C-类型转换.md","raw":"---\ntitle: C++类型转换\ndate: 2017-08-03 10:47:24\ntags:\n\tc++\n---\n\n\n## 类型转换\n\n- **一个类型转换函数必须是类的成员函数，他不能声明返回类型，形参列表也必须为空，类类型转换函数通常应该是const**\n\n```c++\n#include <iostream>\nusing namespace std;\nclass SmallInt\n{\npublic:\n\tSmallInt(int i = 0) :val(i) \n\t{\n\t\tif (i < 0 || i>255) {\n\t\t\tthrow std::out_of_range(\"Bad SmallInt value\");\n\t\t}\n\t}\n\toperator int() const { return val; }\nprivate:\n\tstd::size_t val;\n};\nint main(int argv, char * argc[]) {\n\tSmallInt si;\n\tsi = 4;  //首先将4隐式转换成SmallInt对象，然后调用SmallInt ：：operator=\n\tsi + 3;  //首先将si隐式转换成int，然后执行整数加法\n\treturn 0;\n}\n```\n\n- 如果在类型转换函数前用explicit关键字来修饰，那么类型转换变为显式转换。\n\n```c++\nsi+3; //这句错误\nstatic_cast<int>(si)+3; //正确：显式的请求类型转换\n```\n\n- 如果表达式被用作条件，则编译器会见显式的类型转换自动应用于他，即显式转换见被隐式转换的执行：\n    1. if、while及do语句部分\n    2. for语句头的条件表达式\n    3. 逻辑非运算符（！）、逻辑或运算符（||）、逻辑与运算符（&&）的运算发对象\n    4. 条件运算符（？：）的条件表达式\n\n- 不要令两个类执行相同的类型转换：如果A类有一个接受B类对象的构造函数，则不要在B中再定义转换目标是A类的类型转换运算符\n\n- 如果对同一类既提供了转换目标是算数类型的类型转换，也提供了重载的运算符，则将会遇到重载运算符与内置运算符的二义性问题\n- 在定义类型转换函数时，切记注意调用转换时不要存在**二义性**","slug":"C-类型转换","published":1,"updated":"2017-08-03T02:48:11.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ihxmdl00076ci6vyqt39co","content":"<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><ul>\n<li><strong>一个类型转换函数必须是类的成员函数，他不能声明返回类型，形参列表也必须为空，类类型转换函数通常应该是const</strong></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallInt</span></span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">\tSmallInt(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>) :val(i) </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i&gt;<span class=\"number\">255</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"built_in\">std</span>::out_of_range(<span class=\"string\">\"Bad SmallInt value\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">operator</span> <span class=\"title\">int</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> val; &#125;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> val;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argv, <span class=\"keyword\">char</span> * argc[])</span> </span>&#123;</div><div class=\"line\">\tSmallInt si;</div><div class=\"line\">\tsi = <span class=\"number\">4</span>;  <span class=\"comment\">//首先将4隐式转换成SmallInt对象，然后调用SmallInt ：：operator=</span></div><div class=\"line\">\tsi + <span class=\"number\">3</span>;  <span class=\"comment\">//首先将si隐式转换成int，然后执行整数加法</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>如果在类型转换函数前用explicit关键字来修饰，那么类型转换变为显式转换。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">si+<span class=\"number\">3</span>; <span class=\"comment\">//这句错误</span></div><div class=\"line\"><span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(si)+<span class=\"number\">3</span>; <span class=\"comment\">//正确：显式的请求类型转换</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>如果表达式被用作条件，则编译器会见显式的类型转换自动应用于他，即显式转换见被隐式转换的执行：</p>\n<ol>\n<li>if、while及do语句部分</li>\n<li>for语句头的条件表达式</li>\n<li>逻辑非运算符（！）、逻辑或运算符（||）、逻辑与运算符（&amp;&amp;）的运算发对象</li>\n<li>条件运算符（？：）的条件表达式</li>\n</ol>\n</li>\n<li><p>不要令两个类执行相同的类型转换：如果A类有一个接受B类对象的构造函数，则不要在B中再定义转换目标是A类的类型转换运算符</p>\n</li>\n<li><p>如果对同一类既提供了转换目标是算数类型的类型转换，也提供了重载的运算符，则将会遇到重载运算符与内置运算符的二义性问题</p>\n</li>\n<li>在定义类型转换函数时，切记注意调用转换时不要存在<strong>二义性</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><ul>\n<li><strong>一个类型转换函数必须是类的成员函数，他不能声明返回类型，形参列表也必须为空，类类型转换函数通常应该是const</strong></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallInt</span></span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">\tSmallInt(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>) :val(i) </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i&gt;<span class=\"number\">255</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"built_in\">std</span>::out_of_range(<span class=\"string\">\"Bad SmallInt value\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">operator</span> <span class=\"title\">int</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> val; &#125;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"keyword\">size_t</span> val;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argv, <span class=\"keyword\">char</span> * argc[])</span> </span>&#123;</div><div class=\"line\">\tSmallInt si;</div><div class=\"line\">\tsi = <span class=\"number\">4</span>;  <span class=\"comment\">//首先将4隐式转换成SmallInt对象，然后调用SmallInt ：：operator=</span></div><div class=\"line\">\tsi + <span class=\"number\">3</span>;  <span class=\"comment\">//首先将si隐式转换成int，然后执行整数加法</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>如果在类型转换函数前用explicit关键字来修饰，那么类型转换变为显式转换。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">si+<span class=\"number\">3</span>; <span class=\"comment\">//这句错误</span></div><div class=\"line\"><span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(si)+<span class=\"number\">3</span>; <span class=\"comment\">//正确：显式的请求类型转换</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>如果表达式被用作条件，则编译器会见显式的类型转换自动应用于他，即显式转换见被隐式转换的执行：</p>\n<ol>\n<li>if、while及do语句部分</li>\n<li>for语句头的条件表达式</li>\n<li>逻辑非运算符（！）、逻辑或运算符（||）、逻辑与运算符（&amp;&amp;）的运算发对象</li>\n<li>条件运算符（？：）的条件表达式</li>\n</ol>\n</li>\n<li><p>不要令两个类执行相同的类型转换：如果A类有一个接受B类对象的构造函数，则不要在B中再定义转换目标是A类的类型转换运算符</p>\n</li>\n<li><p>如果对同一类既提供了转换目标是算数类型的类型转换，也提供了重载的运算符，则将会遇到重载运算符与内置运算符的二义性问题</p>\n</li>\n<li>在定义类型转换函数时，切记注意调用转换时不要存在<strong>二义性</strong></li>\n</ul>\n"},{"title":"LinkedList源码分析","date":"2017-08-11T12:49:37.000Z","_content":"\n```java\npackage java.util;\n\nimport java.util.function.Consumer;\n\n/**\n * 非同步，双向链表(具有队列、栈的特性)，可以加入null，fail-fast\n *  同步： List list = Collections.synchronizedList(new LinkedList(...));\n * 关于fail-fast 更多信息，请看http://blog.csdn.net/huzhigenlaohu/article/details/51701636\n */\n\npublic class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable\n{\n    //一下三个字段不会被序列化\n    transient int size = 0;\n    transient Node<E> first;\n    transient Node<E> last;\n    public LinkedList() {\n    }\n    public LinkedList(Collection<? extends E> c) {\n        this();\n        addAll(c);\n    }\n    // 链表头插入节点\n    private void linkFirst(E e) {\n        final Node<E> f = first;\n        final Node<E> newNode = new Node<>(null, e, f);\n        first = newNode;\n        if (f == null)\n            last = newNode;\n        else\n            f.prev = newNode;\n        size++;\n        modCount++;\n    }\n\n    //链表尾插入节点\n    void linkLast(E e) {\n        final Node<E> l = last;\n        final Node<E> newNode = new Node<>(l, e, null);\n        last = newNode;\n        if (l == null)\n            first = newNode;\n        else\n            l.next = newNode;\n        size++;\n        modCount++;\n    }\n\n    //指定非空节点前后插入元素\n    void linkBefore(E e, Node<E> succ) {\n        // assert succ != null;\n        final Node<E> pred = succ.prev;\n        final Node<E> newNode = new Node<>(pred, e, succ);\n        succ.prev = newNode;\n        if (pred == null)\n            first = newNode;\n        else\n            pred.next = newNode;\n        size++;\n        modCount++;\n    }\n\n    //头节点出队，并返回\n    private E unlinkFirst(Node<E> f) {\n        // assert f == first && f != null;\n        final E element = f.item;\n        final Node<E> next = f.next;\n        f.item = null;\n        f.next = null; // help GC\n        first = next;\n        if (next == null)\n            last = null;\n        else\n            next.prev = null;\n        size--;\n        modCount++;\n        return element;\n    }\n\n    //尾节点出队，并返回\n    private E unlinkLast(Node<E> l) {\n        // assert l == last && l != null;\n        final E element = l.item;\n        final Node<E> prev = l.prev;\n        l.item = null;\n        l.prev = null; // help GC\n        last = prev;\n        if (prev == null)\n            first = null;\n        else\n            prev.next = null;\n        size--;\n        modCount++;\n        return element;\n    }\n\n    // 删除指定节点\n    E unlink(Node<E> x) {\n        // assert x != null;\n        final E element = x.item;\n        final Node<E> next = x.next;\n        final Node<E> prev = x.prev;\n\n        if (prev == null) {\n            first = next;\n        } else {\n            prev.next = next;\n            x.prev = null;\n        }\n\n        if (next == null) {\n            last = prev;\n        } else {\n            next.prev = prev;\n            x.next = null;\n        }\n\n        x.item = null;\n        size--;\n        modCount++;\n        return element;\n    }\n    public E getFirst() {\n        final Node<E> f = first;\n        if (f == null)\n            throw new NoSuchElementException();\n        return f.item;\n    }\n    public E getLast() {\n        final Node<E> l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return l.item;\n    }\n    public E removeFirst() {\n        final Node<E> f = first;\n        if (f == null)\n            throw new NoSuchElementException();\n        return unlinkFirst(f);\n    }\n    public E removeLast() {\n        final Node<E> l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return unlinkLast(l);\n    }\n    public void addFirst(E e) {\n        linkFirst(e);\n    }\n    public void addLast(E e) {\n        linkLast(e);\n    }\n    public boolean contains(Object o) {\n        return indexOf(o) != -1;\n    }\n    public int size() {\n        return size;\n    }\n    public boolean add(E e) {\n        linkLast(e);\n        return true;\n    }\n    public boolean remove(Object o) {\n        if (o == null) {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (x.item == null) {\n                    unlink(x);\n                    return true;\n                }\n            }\n        } else {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (o.equals(x.item)) {\n                    unlink(x);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    public boolean addAll(Collection<? extends E> c) {\n        return addAll(size, c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        checkPositionIndex(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        if (numNew == 0)\n            return false;\n\n        Node<E> pred, succ;\n        if (index == size) {\n            succ = null;\n            pred = last;\n        } else {\n            succ = node(index);\n            pred = succ.prev;\n        }\n\n        for (Object o : a) {\n            @SuppressWarnings(\"unchecked\") E e = (E) o;\n            Node<E> newNode = new Node<>(pred, e, null);\n            if (pred == null)\n                first = newNode;\n            else\n                pred.next = newNode;\n            pred = newNode;\n        }\n\n        if (succ == null) {\n            last = pred;\n        } else {\n            pred.next = succ;\n            succ.prev = pred;\n        }\n\n        size += numNew;\n        modCount++;\n        return true;\n    }\n\n    public void clear() {\n        // Clearing all of the links between nodes is \"unnecessary\", but:\n        // - helps a generational GC if the discarded nodes inhabit\n        //   more than one generation\n        // - is sure to free memory even if there is a reachable Iterator\n        for (Node<E> x = first; x != null; ) {\n            Node<E> next = x.next;\n            x.item = null;\n            x.next = null;\n            x.prev = null;\n            x = next;\n        }\n        first = last = null;\n        size = 0;\n        modCount++;\n    }\n    public E get(int index) {\n        checkElementIndex(index);\n        return node(index).item;\n    }\n    public E set(int index, E element) {\n        checkElementIndex(index);\n        Node<E> x = node(index);\n        E oldVal = x.item;\n        x.item = element;\n        return oldVal;\n    }\n    public void add(int index, E element) {\n        checkPositionIndex(index);\n\n        if (index == size)\n            linkLast(element);\n        else\n            linkBefore(element, node(index));\n    }\n    public E remove(int index) {\n        checkElementIndex(index);\n        return unlink(node(index));\n    }\n\n    private boolean isElementIndex(int index) {\n        return index >= 0 && index < size;\n    }\n    private boolean isPositionIndex(int index) {\n        return index >= 0 && index <= size;\n    }\n    private String outOfBoundsMsg(int index) {\n        return \"Index: \"+index+\", Size: \"+size;\n    }\n\n    private void checkElementIndex(int index) {\n        if (!isElementIndex(index))\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    private void checkPositionIndex(int index) {\n        if (!isPositionIndex(index))\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    Node<E> node(int index) {\n        // assert isElementIndex(index);\n\n        if (index < (size >> 1)) {//小于元素个数的一半，则从前往后找\n            Node<E> x = first;\n            for (int i = 0; i < index; i++)\n                x = x.next;\n            return x;\n        } else {   //否则从后往前找\n            Node<E> x = last;\n            for (int i = size - 1; i > index; i--)\n                x = x.prev;\n            return x;\n        }\n    }\n\n    public int indexOf(Object o) {\n        int index = 0;\n        if (o == null) {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (x.item == null)\n                    return index;\n                index++;\n            }\n        } else {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (o.equals(x.item))\n                    return index;\n                index++;\n            }\n        }\n        return -1;\n    }\n    public int lastIndexOf(Object o) {\n        int index = size;\n        if (o == null) {\n            for (Node<E> x = last; x != null; x = x.prev) {\n                index--;\n                if (x.item == null)\n                    return index;\n            }\n        } else {\n            for (Node<E> x = last; x != null; x = x.prev) {\n                index--;\n                if (o.equals(x.item))\n                    return index;\n            }\n        }\n        return -1;\n    }\n\n    // Queue operations.\n    public E peek() {\n        final Node<E> f = first;\n        return (f == null) ? null : f.item;\n    }\n\n    public E element() {\n        return getFirst();\n    }\n\n    public E poll() {\n        final Node<E> f = first;\n        return (f == null) ? null : unlinkFirst(f);\n    }\n\n    public E remove() {\n        return removeFirst();\n    }\n\n    public boolean offer(E e) {\n        return add(e);\n    }\n\n    public boolean offerFirst(E e) {\n        addFirst(e);\n        return true;\n    }\n    public boolean offerLast(E e) {\n        addLast(e);\n        return true;\n    }\n    public E peekFirst() {\n        final Node<E> f = first;\n        return (f == null) ? null : f.item;\n     }\n    public E peekLast() {\n        final Node<E> l = last;\n        return (l == null) ? null : l.item;\n    }\n    public E pollFirst() {\n        final Node<E> f = first;\n        return (f == null) ? null : unlinkFirst(f);\n    }\n    public E pollLast() {\n        final Node<E> l = last;\n        return (l == null) ? null : unlinkLast(l);\n    }\n    public void push(E e) {\n        addFirst(e);\n    }\n    public E pop() {\n        return removeFirst();\n    }\n    public boolean removeFirstOccurrence(Object o) {\n        return remove(o);\n    }\n    public boolean removeLastOccurrence(Object o) {\n        if (o == null) {\n            for (Node<E> x = last; x != null; x = x.prev) {\n                if (x.item == null) {\n                    unlink(x);\n                    return true;\n                }\n            }\n        } else {\n            for (Node<E> x = last; x != null; x = x.prev) {\n                if (o.equals(x.item)) {\n                    unlink(x);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public ListIterator<E> listIterator(int index) {\n        checkPositionIndex(index);\n        return new ListItr(index);\n    }\n\n    private class ListItr implements ListIterator<E> {\n        private Node<E> lastReturned;\n        private Node<E> next;\n        private int nextIndex;\n        private int expectedModCount = modCount;\n\n        ListItr(int index) {\n            // assert isPositionIndex(index);\n            next = (index == size) ? null : node(index);\n            nextIndex = index;\n        }\n\n        public boolean hasNext() {\n            return nextIndex < size;\n        }\n\n        public E next() {\n            checkForComodification();\n            if (!hasNext())\n                throw new NoSuchElementException();\n\n            lastReturned = next;\n            next = next.next;\n            nextIndex++;\n            return lastReturned.item;\n        }\n\n        public boolean hasPrevious() {\n            return nextIndex > 0;\n        }\n\n        public E previous() {\n            checkForComodification();\n            if (!hasPrevious())\n                throw new NoSuchElementException();\n\n            lastReturned = next = (next == null) ? last : next.prev;\n            nextIndex--;\n            return lastReturned.item;\n        }\n\n        public int nextIndex() {\n            return nextIndex;\n        }\n\n        public int previousIndex() {\n            return nextIndex - 1;\n        }\n\n        public void remove() {\n            checkForComodification();\n            if (lastReturned == null)\n                throw new IllegalStateException();\n\n            Node<E> lastNext = lastReturned.next;\n            unlink(lastReturned);\n            if (next == lastReturned)\n                next = lastNext;\n            else\n                nextIndex--;\n            lastReturned = null;\n            expectedModCount++;\n        }\n\n        public void set(E e) {\n            if (lastReturned == null)\n                throw new IllegalStateException();\n            checkForComodification();\n            lastReturned.item = e;\n        }\n\n        public void add(E e) {\n            checkForComodification();\n            lastReturned = null;\n            if (next == null)\n                linkLast(e);\n            else\n                linkBefore(e, next);\n            nextIndex++;\n            expectedModCount++;\n        }\n\n        public void forEachRemaining(Consumer<? super E> action) {\n            Objects.requireNonNull(action);\n            while (modCount == expectedModCount && nextIndex < size) {\n                action.accept(next.item);\n                lastReturned = next;\n                next = next.next;\n                nextIndex++;\n            }\n            checkForComodification();\n        }\n\n        final void checkForComodification() {\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n        }\n    }\n\n    private static class Node<E> {\n        E item;\n        Node<E> next;\n        Node<E> prev;\n\n        Node(Node<E> prev, E element, Node<E> next) {\n            this.item = element;\n            this.next = next;\n            this.prev = prev;\n        }\n    }\n    public Iterator<E> descendingIterator() {\n        return new DescendingIterator();\n    }\n\n    /**\n     * Adapter to provide descending iterators via ListItr.previous\n     */\n    private class DescendingIterator implements Iterator<E> {\n        private final ListItr itr = new ListItr(size());\n        public boolean hasNext() {\n            return itr.hasPrevious();\n        }\n        public E next() {\n            return itr.previous();\n        }\n        public void remove() {\n            itr.remove();\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private LinkedList<E> superClone() {\n        try {\n            return (LinkedList<E>) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new InternalError(e);\n        }\n    }\n\n    //浅复制，看后文详解\n    public Object clone() {\n        LinkedList<E> clone = superClone();\n\n        // Put clone into \"virgin\" state\n        clone.first = clone.last = null;\n        clone.size = 0;\n        clone.modCount = 0;\n\n        // Initialize clone with our elements\n        for (Node<E> x = first; x != null; x = x.next)\n            clone.add(x.item);\n\n        return clone;\n    }\n\n    //重新分配内存，生成的数组不会依赖原来的列表，比如修改数组不会影响源列表\n    public Object[] toArray() {\n        Object[] result = new Object[size];\n        int i = 0;\n        for (Node<E> x = first; x != null; x = x.next)\n            result[i++] = x.item;\n        return result;\n    }\n\n    //作为 List与 Array的桥梁API\n    @SuppressWarnings(\"unchecked\")\n    public <T> T[] toArray(T[] a) {\n        if (a.length < size) //a的长度不能够容纳list，从新分配空间\n            a = (T[])java.lang.reflect.Array.newInstance(\n                                a.getClass().getComponentType(), size);\n        int i = 0;\n        Object[] result = a;\n        for (Node<E> x = first; x != null; x = x.next)\n            result[i++] = x.item;\n\n        if (a.length > size)\n            a[size] = null;\n\n        return a;\n    }\n\n    private static final long serialVersionUID = 876323262645176354L;\n\n   //序列化\n    private void writeObject(java.io.ObjectOutputStream s)\n        throws java.io.IOException {\n        // Write out any hidden serialization magic\n        s.defaultWriteObject();\n\n        // Write out size\n        s.writeInt(size);\n\n        // Write out all elements in the proper order.\n        for (Node<E> x = first; x != null; x = x.next)\n            s.writeObject(x.item);\n    }\n\n    //反序列化\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(java.io.ObjectInputStream s)\n        throws java.io.IOException, ClassNotFoundException {\n        // Read in any hidden serialization magic\n        s.defaultReadObject();\n\n        // Read in size\n        int size = s.readInt();\n\n        // Read in all elements in the proper order.\n        for (int i = 0; i < size; i++)\n            linkLast((E)s.readObject());\n    }\n\n    // 分组迭代器，允许列表被分组进行处理并行处理，属于jdk1.8新特性\n    @Override\n    public Spliterator<E> spliterator() {\n        return new LLSpliterator<E>(this, -1, 0);\n    }\n\n    /** A customized variant of Spliterators.IteratorSpliterator */\n    static final class LLSpliterator<E> implements Spliterator<E> {\n        static final int BATCH_UNIT = 1 << 10;  // batch array size increment\n        static final int MAX_BATCH = 1 << 25;  // max batch array size;\n        final LinkedList<E> list; // null OK unless traversed\n        Node<E> current;      // current node; null until initialized\n        int est;              // size estimate; -1 until first needed\n        int expectedModCount; // initialized when est set\n        int batch;            // batch size for splits\n\n        LLSpliterator(LinkedList<E> list, int est, int expectedModCount) {\n            this.list = list;\n            this.est = est;\n            this.expectedModCount = expectedModCount;\n        }\n\n        final int getEst() {\n            int s; // force initialization\n            final LinkedList<E> lst;\n            if ((s = est) < 0) {\n                if ((lst = list) == null)\n                    s = est = 0;\n                else {\n                    expectedModCount = lst.modCount;\n                    current = lst.first;\n                    s = est = lst.size;\n                }\n            }\n            return s;\n        }\n\n        public long estimateSize() { return (long) getEst(); }\n\n        public Spliterator<E> trySplit() {\n            Node<E> p;\n            int s = getEst();\n            if (s > 1 && (p = current) != null) {\n                int n = batch + BATCH_UNIT;\n                if (n > s)\n                    n = s;\n                if (n > MAX_BATCH)\n                    n = MAX_BATCH;\n                Object[] a = new Object[n];\n                int j = 0;\n                do { a[j++] = p.item; } while ((p = p.next) != null && j < n);\n                current = p;\n                batch = j;\n                est = s - j;\n                return Spliterators.spliterator(a, 0, j, Spliterator.ORDERED);\n            }\n            return null;\n        }\n\n        public void forEachRemaining(Consumer<? super E> action) {\n            Node<E> p; int n;\n            if (action == null) throw new NullPointerException();\n            if ((n = getEst()) > 0 && (p = current) != null) {\n                current = null;\n                est = 0;\n                do {\n                    E e = p.item;\n                    p = p.next;\n                    action.accept(e);\n                } while (p != null && --n > 0);\n            }\n            if (list.modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n        }\n\n        public boolean tryAdvance(Consumer<? super E> action) {\n            Node<E> p;\n            if (action == null) throw new NullPointerException();\n            if (getEst() > 0 && (p = current) != null) {\n                --est;\n                E e = p.item;\n                current = p.next;\n                action.accept(e);\n                if (list.modCount != expectedModCount)\n                    throw new ConcurrentModificationException();\n                return true;\n            }\n            return false;\n        }\n\n        public int characteristics() {\n            return Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;\n        }\n    }\n\n}\n\n```\n\n## 个人觉得比较重要的点\n\n（其他也很重要，只是觉得没啥可分析的，很简单）\n\n---\n- **克隆**\n```java\n//浅复制\nprivate LinkedList<E> superClone() {\n    try {\n        return (LinkedList<E>) super.clone();\n    } catch (CloneNotSupportedException e) {\n        throw new InternalError(e);\n    }\n}\n\n//深复制\npublic Object clone() {\n    //首先利用浅复制将基本变量元素复制过来\n    //然后将引用单独一个一个的复制\n     LinkedList<E> clone = superClone();\n    clone.first = clone.last = null;\n    clone.size = 0;\n    clone.modCount = 0;\n\n    // Initialize clone with our elements\n    for (Node<E> x = first; x != null; x = x.next)\n        clone.add(x.item);\n\n    return clone;\n}\n```\n由于在我另外一篇博客中已经详细分析了java copy相关原理，这儿只说结论：\n\n1. 浅复制与深复制概念\n    - **浅复制（浅克隆）**\n被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅复制仅仅复制所考虑的对象，而不复制它所引用的对象。\n    - **深复制（深克隆）**\n被复制对象的所有变量都含有与原来的对象相同的值，除去那些引用其他对象的变量。那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。换言之，深复制把要复制的对象所引用的对象都复制了一遍。\n \n2. Java的clone()方法\n    - clone方法将对象复制了一份并返回给调用者。一般而言，clone（）方法满足：\n        - ①对任何的对象x，都有x.clone() !=x//克隆对象与原对象不是同一个对象\n        - ②对任何的对象x，都有x.clone().getClass()= =x.getClass()//克隆对象与原对象的类型一样\n        - ③如果对象x的equals()方法定义恰当，那么x.clone().equals(x)应该成立。\n \n    - Java中对象的克隆\n        - ①为了获取对象的一份拷贝，我们可以利用Object类的clone()方法。\n        - ②在派生类中覆盖基类的clone()方法，并声明为public。\n        - ③在派生类的clone()方法中，调用super.clone()。\n        - ④在派生类中实现Cloneable接口。\n \n关于浅复制和深复制请看[JAVA中浅复制与深复制](http://blog.csdn.net/huzhigenlaohu/article/details/51783359)\n\n---","source":"_posts/LinkedList源码分析.md","raw":"---\ntitle: LinkedList源码分析\ndate: 2017-08-11 20:49:37\ntags:\n\tjava\n---\n\n```java\npackage java.util;\n\nimport java.util.function.Consumer;\n\n/**\n * 非同步，双向链表(具有队列、栈的特性)，可以加入null，fail-fast\n *  同步： List list = Collections.synchronizedList(new LinkedList(...));\n * 关于fail-fast 更多信息，请看http://blog.csdn.net/huzhigenlaohu/article/details/51701636\n */\n\npublic class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable\n{\n    //一下三个字段不会被序列化\n    transient int size = 0;\n    transient Node<E> first;\n    transient Node<E> last;\n    public LinkedList() {\n    }\n    public LinkedList(Collection<? extends E> c) {\n        this();\n        addAll(c);\n    }\n    // 链表头插入节点\n    private void linkFirst(E e) {\n        final Node<E> f = first;\n        final Node<E> newNode = new Node<>(null, e, f);\n        first = newNode;\n        if (f == null)\n            last = newNode;\n        else\n            f.prev = newNode;\n        size++;\n        modCount++;\n    }\n\n    //链表尾插入节点\n    void linkLast(E e) {\n        final Node<E> l = last;\n        final Node<E> newNode = new Node<>(l, e, null);\n        last = newNode;\n        if (l == null)\n            first = newNode;\n        else\n            l.next = newNode;\n        size++;\n        modCount++;\n    }\n\n    //指定非空节点前后插入元素\n    void linkBefore(E e, Node<E> succ) {\n        // assert succ != null;\n        final Node<E> pred = succ.prev;\n        final Node<E> newNode = new Node<>(pred, e, succ);\n        succ.prev = newNode;\n        if (pred == null)\n            first = newNode;\n        else\n            pred.next = newNode;\n        size++;\n        modCount++;\n    }\n\n    //头节点出队，并返回\n    private E unlinkFirst(Node<E> f) {\n        // assert f == first && f != null;\n        final E element = f.item;\n        final Node<E> next = f.next;\n        f.item = null;\n        f.next = null; // help GC\n        first = next;\n        if (next == null)\n            last = null;\n        else\n            next.prev = null;\n        size--;\n        modCount++;\n        return element;\n    }\n\n    //尾节点出队，并返回\n    private E unlinkLast(Node<E> l) {\n        // assert l == last && l != null;\n        final E element = l.item;\n        final Node<E> prev = l.prev;\n        l.item = null;\n        l.prev = null; // help GC\n        last = prev;\n        if (prev == null)\n            first = null;\n        else\n            prev.next = null;\n        size--;\n        modCount++;\n        return element;\n    }\n\n    // 删除指定节点\n    E unlink(Node<E> x) {\n        // assert x != null;\n        final E element = x.item;\n        final Node<E> next = x.next;\n        final Node<E> prev = x.prev;\n\n        if (prev == null) {\n            first = next;\n        } else {\n            prev.next = next;\n            x.prev = null;\n        }\n\n        if (next == null) {\n            last = prev;\n        } else {\n            next.prev = prev;\n            x.next = null;\n        }\n\n        x.item = null;\n        size--;\n        modCount++;\n        return element;\n    }\n    public E getFirst() {\n        final Node<E> f = first;\n        if (f == null)\n            throw new NoSuchElementException();\n        return f.item;\n    }\n    public E getLast() {\n        final Node<E> l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return l.item;\n    }\n    public E removeFirst() {\n        final Node<E> f = first;\n        if (f == null)\n            throw new NoSuchElementException();\n        return unlinkFirst(f);\n    }\n    public E removeLast() {\n        final Node<E> l = last;\n        if (l == null)\n            throw new NoSuchElementException();\n        return unlinkLast(l);\n    }\n    public void addFirst(E e) {\n        linkFirst(e);\n    }\n    public void addLast(E e) {\n        linkLast(e);\n    }\n    public boolean contains(Object o) {\n        return indexOf(o) != -1;\n    }\n    public int size() {\n        return size;\n    }\n    public boolean add(E e) {\n        linkLast(e);\n        return true;\n    }\n    public boolean remove(Object o) {\n        if (o == null) {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (x.item == null) {\n                    unlink(x);\n                    return true;\n                }\n            }\n        } else {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (o.equals(x.item)) {\n                    unlink(x);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    public boolean addAll(Collection<? extends E> c) {\n        return addAll(size, c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        checkPositionIndex(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        if (numNew == 0)\n            return false;\n\n        Node<E> pred, succ;\n        if (index == size) {\n            succ = null;\n            pred = last;\n        } else {\n            succ = node(index);\n            pred = succ.prev;\n        }\n\n        for (Object o : a) {\n            @SuppressWarnings(\"unchecked\") E e = (E) o;\n            Node<E> newNode = new Node<>(pred, e, null);\n            if (pred == null)\n                first = newNode;\n            else\n                pred.next = newNode;\n            pred = newNode;\n        }\n\n        if (succ == null) {\n            last = pred;\n        } else {\n            pred.next = succ;\n            succ.prev = pred;\n        }\n\n        size += numNew;\n        modCount++;\n        return true;\n    }\n\n    public void clear() {\n        // Clearing all of the links between nodes is \"unnecessary\", but:\n        // - helps a generational GC if the discarded nodes inhabit\n        //   more than one generation\n        // - is sure to free memory even if there is a reachable Iterator\n        for (Node<E> x = first; x != null; ) {\n            Node<E> next = x.next;\n            x.item = null;\n            x.next = null;\n            x.prev = null;\n            x = next;\n        }\n        first = last = null;\n        size = 0;\n        modCount++;\n    }\n    public E get(int index) {\n        checkElementIndex(index);\n        return node(index).item;\n    }\n    public E set(int index, E element) {\n        checkElementIndex(index);\n        Node<E> x = node(index);\n        E oldVal = x.item;\n        x.item = element;\n        return oldVal;\n    }\n    public void add(int index, E element) {\n        checkPositionIndex(index);\n\n        if (index == size)\n            linkLast(element);\n        else\n            linkBefore(element, node(index));\n    }\n    public E remove(int index) {\n        checkElementIndex(index);\n        return unlink(node(index));\n    }\n\n    private boolean isElementIndex(int index) {\n        return index >= 0 && index < size;\n    }\n    private boolean isPositionIndex(int index) {\n        return index >= 0 && index <= size;\n    }\n    private String outOfBoundsMsg(int index) {\n        return \"Index: \"+index+\", Size: \"+size;\n    }\n\n    private void checkElementIndex(int index) {\n        if (!isElementIndex(index))\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    private void checkPositionIndex(int index) {\n        if (!isPositionIndex(index))\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    Node<E> node(int index) {\n        // assert isElementIndex(index);\n\n        if (index < (size >> 1)) {//小于元素个数的一半，则从前往后找\n            Node<E> x = first;\n            for (int i = 0; i < index; i++)\n                x = x.next;\n            return x;\n        } else {   //否则从后往前找\n            Node<E> x = last;\n            for (int i = size - 1; i > index; i--)\n                x = x.prev;\n            return x;\n        }\n    }\n\n    public int indexOf(Object o) {\n        int index = 0;\n        if (o == null) {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (x.item == null)\n                    return index;\n                index++;\n            }\n        } else {\n            for (Node<E> x = first; x != null; x = x.next) {\n                if (o.equals(x.item))\n                    return index;\n                index++;\n            }\n        }\n        return -1;\n    }\n    public int lastIndexOf(Object o) {\n        int index = size;\n        if (o == null) {\n            for (Node<E> x = last; x != null; x = x.prev) {\n                index--;\n                if (x.item == null)\n                    return index;\n            }\n        } else {\n            for (Node<E> x = last; x != null; x = x.prev) {\n                index--;\n                if (o.equals(x.item))\n                    return index;\n            }\n        }\n        return -1;\n    }\n\n    // Queue operations.\n    public E peek() {\n        final Node<E> f = first;\n        return (f == null) ? null : f.item;\n    }\n\n    public E element() {\n        return getFirst();\n    }\n\n    public E poll() {\n        final Node<E> f = first;\n        return (f == null) ? null : unlinkFirst(f);\n    }\n\n    public E remove() {\n        return removeFirst();\n    }\n\n    public boolean offer(E e) {\n        return add(e);\n    }\n\n    public boolean offerFirst(E e) {\n        addFirst(e);\n        return true;\n    }\n    public boolean offerLast(E e) {\n        addLast(e);\n        return true;\n    }\n    public E peekFirst() {\n        final Node<E> f = first;\n        return (f == null) ? null : f.item;\n     }\n    public E peekLast() {\n        final Node<E> l = last;\n        return (l == null) ? null : l.item;\n    }\n    public E pollFirst() {\n        final Node<E> f = first;\n        return (f == null) ? null : unlinkFirst(f);\n    }\n    public E pollLast() {\n        final Node<E> l = last;\n        return (l == null) ? null : unlinkLast(l);\n    }\n    public void push(E e) {\n        addFirst(e);\n    }\n    public E pop() {\n        return removeFirst();\n    }\n    public boolean removeFirstOccurrence(Object o) {\n        return remove(o);\n    }\n    public boolean removeLastOccurrence(Object o) {\n        if (o == null) {\n            for (Node<E> x = last; x != null; x = x.prev) {\n                if (x.item == null) {\n                    unlink(x);\n                    return true;\n                }\n            }\n        } else {\n            for (Node<E> x = last; x != null; x = x.prev) {\n                if (o.equals(x.item)) {\n                    unlink(x);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public ListIterator<E> listIterator(int index) {\n        checkPositionIndex(index);\n        return new ListItr(index);\n    }\n\n    private class ListItr implements ListIterator<E> {\n        private Node<E> lastReturned;\n        private Node<E> next;\n        private int nextIndex;\n        private int expectedModCount = modCount;\n\n        ListItr(int index) {\n            // assert isPositionIndex(index);\n            next = (index == size) ? null : node(index);\n            nextIndex = index;\n        }\n\n        public boolean hasNext() {\n            return nextIndex < size;\n        }\n\n        public E next() {\n            checkForComodification();\n            if (!hasNext())\n                throw new NoSuchElementException();\n\n            lastReturned = next;\n            next = next.next;\n            nextIndex++;\n            return lastReturned.item;\n        }\n\n        public boolean hasPrevious() {\n            return nextIndex > 0;\n        }\n\n        public E previous() {\n            checkForComodification();\n            if (!hasPrevious())\n                throw new NoSuchElementException();\n\n            lastReturned = next = (next == null) ? last : next.prev;\n            nextIndex--;\n            return lastReturned.item;\n        }\n\n        public int nextIndex() {\n            return nextIndex;\n        }\n\n        public int previousIndex() {\n            return nextIndex - 1;\n        }\n\n        public void remove() {\n            checkForComodification();\n            if (lastReturned == null)\n                throw new IllegalStateException();\n\n            Node<E> lastNext = lastReturned.next;\n            unlink(lastReturned);\n            if (next == lastReturned)\n                next = lastNext;\n            else\n                nextIndex--;\n            lastReturned = null;\n            expectedModCount++;\n        }\n\n        public void set(E e) {\n            if (lastReturned == null)\n                throw new IllegalStateException();\n            checkForComodification();\n            lastReturned.item = e;\n        }\n\n        public void add(E e) {\n            checkForComodification();\n            lastReturned = null;\n            if (next == null)\n                linkLast(e);\n            else\n                linkBefore(e, next);\n            nextIndex++;\n            expectedModCount++;\n        }\n\n        public void forEachRemaining(Consumer<? super E> action) {\n            Objects.requireNonNull(action);\n            while (modCount == expectedModCount && nextIndex < size) {\n                action.accept(next.item);\n                lastReturned = next;\n                next = next.next;\n                nextIndex++;\n            }\n            checkForComodification();\n        }\n\n        final void checkForComodification() {\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n        }\n    }\n\n    private static class Node<E> {\n        E item;\n        Node<E> next;\n        Node<E> prev;\n\n        Node(Node<E> prev, E element, Node<E> next) {\n            this.item = element;\n            this.next = next;\n            this.prev = prev;\n        }\n    }\n    public Iterator<E> descendingIterator() {\n        return new DescendingIterator();\n    }\n\n    /**\n     * Adapter to provide descending iterators via ListItr.previous\n     */\n    private class DescendingIterator implements Iterator<E> {\n        private final ListItr itr = new ListItr(size());\n        public boolean hasNext() {\n            return itr.hasPrevious();\n        }\n        public E next() {\n            return itr.previous();\n        }\n        public void remove() {\n            itr.remove();\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private LinkedList<E> superClone() {\n        try {\n            return (LinkedList<E>) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new InternalError(e);\n        }\n    }\n\n    //浅复制，看后文详解\n    public Object clone() {\n        LinkedList<E> clone = superClone();\n\n        // Put clone into \"virgin\" state\n        clone.first = clone.last = null;\n        clone.size = 0;\n        clone.modCount = 0;\n\n        // Initialize clone with our elements\n        for (Node<E> x = first; x != null; x = x.next)\n            clone.add(x.item);\n\n        return clone;\n    }\n\n    //重新分配内存，生成的数组不会依赖原来的列表，比如修改数组不会影响源列表\n    public Object[] toArray() {\n        Object[] result = new Object[size];\n        int i = 0;\n        for (Node<E> x = first; x != null; x = x.next)\n            result[i++] = x.item;\n        return result;\n    }\n\n    //作为 List与 Array的桥梁API\n    @SuppressWarnings(\"unchecked\")\n    public <T> T[] toArray(T[] a) {\n        if (a.length < size) //a的长度不能够容纳list，从新分配空间\n            a = (T[])java.lang.reflect.Array.newInstance(\n                                a.getClass().getComponentType(), size);\n        int i = 0;\n        Object[] result = a;\n        for (Node<E> x = first; x != null; x = x.next)\n            result[i++] = x.item;\n\n        if (a.length > size)\n            a[size] = null;\n\n        return a;\n    }\n\n    private static final long serialVersionUID = 876323262645176354L;\n\n   //序列化\n    private void writeObject(java.io.ObjectOutputStream s)\n        throws java.io.IOException {\n        // Write out any hidden serialization magic\n        s.defaultWriteObject();\n\n        // Write out size\n        s.writeInt(size);\n\n        // Write out all elements in the proper order.\n        for (Node<E> x = first; x != null; x = x.next)\n            s.writeObject(x.item);\n    }\n\n    //反序列化\n    @SuppressWarnings(\"unchecked\")\n    private void readObject(java.io.ObjectInputStream s)\n        throws java.io.IOException, ClassNotFoundException {\n        // Read in any hidden serialization magic\n        s.defaultReadObject();\n\n        // Read in size\n        int size = s.readInt();\n\n        // Read in all elements in the proper order.\n        for (int i = 0; i < size; i++)\n            linkLast((E)s.readObject());\n    }\n\n    // 分组迭代器，允许列表被分组进行处理并行处理，属于jdk1.8新特性\n    @Override\n    public Spliterator<E> spliterator() {\n        return new LLSpliterator<E>(this, -1, 0);\n    }\n\n    /** A customized variant of Spliterators.IteratorSpliterator */\n    static final class LLSpliterator<E> implements Spliterator<E> {\n        static final int BATCH_UNIT = 1 << 10;  // batch array size increment\n        static final int MAX_BATCH = 1 << 25;  // max batch array size;\n        final LinkedList<E> list; // null OK unless traversed\n        Node<E> current;      // current node; null until initialized\n        int est;              // size estimate; -1 until first needed\n        int expectedModCount; // initialized when est set\n        int batch;            // batch size for splits\n\n        LLSpliterator(LinkedList<E> list, int est, int expectedModCount) {\n            this.list = list;\n            this.est = est;\n            this.expectedModCount = expectedModCount;\n        }\n\n        final int getEst() {\n            int s; // force initialization\n            final LinkedList<E> lst;\n            if ((s = est) < 0) {\n                if ((lst = list) == null)\n                    s = est = 0;\n                else {\n                    expectedModCount = lst.modCount;\n                    current = lst.first;\n                    s = est = lst.size;\n                }\n            }\n            return s;\n        }\n\n        public long estimateSize() { return (long) getEst(); }\n\n        public Spliterator<E> trySplit() {\n            Node<E> p;\n            int s = getEst();\n            if (s > 1 && (p = current) != null) {\n                int n = batch + BATCH_UNIT;\n                if (n > s)\n                    n = s;\n                if (n > MAX_BATCH)\n                    n = MAX_BATCH;\n                Object[] a = new Object[n];\n                int j = 0;\n                do { a[j++] = p.item; } while ((p = p.next) != null && j < n);\n                current = p;\n                batch = j;\n                est = s - j;\n                return Spliterators.spliterator(a, 0, j, Spliterator.ORDERED);\n            }\n            return null;\n        }\n\n        public void forEachRemaining(Consumer<? super E> action) {\n            Node<E> p; int n;\n            if (action == null) throw new NullPointerException();\n            if ((n = getEst()) > 0 && (p = current) != null) {\n                current = null;\n                est = 0;\n                do {\n                    E e = p.item;\n                    p = p.next;\n                    action.accept(e);\n                } while (p != null && --n > 0);\n            }\n            if (list.modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n        }\n\n        public boolean tryAdvance(Consumer<? super E> action) {\n            Node<E> p;\n            if (action == null) throw new NullPointerException();\n            if (getEst() > 0 && (p = current) != null) {\n                --est;\n                E e = p.item;\n                current = p.next;\n                action.accept(e);\n                if (list.modCount != expectedModCount)\n                    throw new ConcurrentModificationException();\n                return true;\n            }\n            return false;\n        }\n\n        public int characteristics() {\n            return Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;\n        }\n    }\n\n}\n\n```\n\n## 个人觉得比较重要的点\n\n（其他也很重要，只是觉得没啥可分析的，很简单）\n\n---\n- **克隆**\n```java\n//浅复制\nprivate LinkedList<E> superClone() {\n    try {\n        return (LinkedList<E>) super.clone();\n    } catch (CloneNotSupportedException e) {\n        throw new InternalError(e);\n    }\n}\n\n//深复制\npublic Object clone() {\n    //首先利用浅复制将基本变量元素复制过来\n    //然后将引用单独一个一个的复制\n     LinkedList<E> clone = superClone();\n    clone.first = clone.last = null;\n    clone.size = 0;\n    clone.modCount = 0;\n\n    // Initialize clone with our elements\n    for (Node<E> x = first; x != null; x = x.next)\n        clone.add(x.item);\n\n    return clone;\n}\n```\n由于在我另外一篇博客中已经详细分析了java copy相关原理，这儿只说结论：\n\n1. 浅复制与深复制概念\n    - **浅复制（浅克隆）**\n被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅复制仅仅复制所考虑的对象，而不复制它所引用的对象。\n    - **深复制（深克隆）**\n被复制对象的所有变量都含有与原来的对象相同的值，除去那些引用其他对象的变量。那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。换言之，深复制把要复制的对象所引用的对象都复制了一遍。\n \n2. Java的clone()方法\n    - clone方法将对象复制了一份并返回给调用者。一般而言，clone（）方法满足：\n        - ①对任何的对象x，都有x.clone() !=x//克隆对象与原对象不是同一个对象\n        - ②对任何的对象x，都有x.clone().getClass()= =x.getClass()//克隆对象与原对象的类型一样\n        - ③如果对象x的equals()方法定义恰当，那么x.clone().equals(x)应该成立。\n \n    - Java中对象的克隆\n        - ①为了获取对象的一份拷贝，我们可以利用Object类的clone()方法。\n        - ②在派生类中覆盖基类的clone()方法，并声明为public。\n        - ③在派生类的clone()方法中，调用super.clone()。\n        - ④在派生类中实现Cloneable接口。\n \n关于浅复制和深复制请看[JAVA中浅复制与深复制](http://blog.csdn.net/huzhigenlaohu/article/details/51783359)\n\n---","slug":"LinkedList源码分析","published":1,"updated":"2017-08-11T12:50:19.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ihxmdo000a6ci6eme4xrnb","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div><div class=\"line\">480</div><div class=\"line\">481</div><div class=\"line\">482</div><div class=\"line\">483</div><div class=\"line\">484</div><div class=\"line\">485</div><div class=\"line\">486</div><div class=\"line\">487</div><div class=\"line\">488</div><div class=\"line\">489</div><div class=\"line\">490</div><div class=\"line\">491</div><div class=\"line\">492</div><div class=\"line\">493</div><div class=\"line\">494</div><div class=\"line\">495</div><div class=\"line\">496</div><div class=\"line\">497</div><div class=\"line\">498</div><div class=\"line\">499</div><div class=\"line\">500</div><div class=\"line\">501</div><div class=\"line\">502</div><div class=\"line\">503</div><div class=\"line\">504</div><div class=\"line\">505</div><div class=\"line\">506</div><div class=\"line\">507</div><div class=\"line\">508</div><div class=\"line\">509</div><div class=\"line\">510</div><div class=\"line\">511</div><div class=\"line\">512</div><div class=\"line\">513</div><div class=\"line\">514</div><div class=\"line\">515</div><div class=\"line\">516</div><div class=\"line\">517</div><div class=\"line\">518</div><div class=\"line\">519</div><div class=\"line\">520</div><div class=\"line\">521</div><div class=\"line\">522</div><div class=\"line\">523</div><div class=\"line\">524</div><div class=\"line\">525</div><div class=\"line\">526</div><div class=\"line\">527</div><div class=\"line\">528</div><div class=\"line\">529</div><div class=\"line\">530</div><div class=\"line\">531</div><div class=\"line\">532</div><div class=\"line\">533</div><div class=\"line\">534</div><div class=\"line\">535</div><div class=\"line\">536</div><div class=\"line\">537</div><div class=\"line\">538</div><div class=\"line\">539</div><div class=\"line\">540</div><div class=\"line\">541</div><div class=\"line\">542</div><div class=\"line\">543</div><div class=\"line\">544</div><div class=\"line\">545</div><div class=\"line\">546</div><div class=\"line\">547</div><div class=\"line\">548</div><div class=\"line\">549</div><div class=\"line\">550</div><div class=\"line\">551</div><div class=\"line\">552</div><div class=\"line\">553</div><div class=\"line\">554</div><div class=\"line\">555</div><div class=\"line\">556</div><div class=\"line\">557</div><div class=\"line\">558</div><div class=\"line\">559</div><div class=\"line\">560</div><div class=\"line\">561</div><div class=\"line\">562</div><div class=\"line\">563</div><div class=\"line\">564</div><div class=\"line\">565</div><div class=\"line\">566</div><div class=\"line\">567</div><div class=\"line\">568</div><div class=\"line\">569</div><div class=\"line\">570</div><div class=\"line\">571</div><div class=\"line\">572</div><div class=\"line\">573</div><div class=\"line\">574</div><div class=\"line\">575</div><div class=\"line\">576</div><div class=\"line\">577</div><div class=\"line\">578</div><div class=\"line\">579</div><div class=\"line\">580</div><div class=\"line\">581</div><div class=\"line\">582</div><div class=\"line\">583</div><div class=\"line\">584</div><div class=\"line\">585</div><div class=\"line\">586</div><div class=\"line\">587</div><div class=\"line\">588</div><div class=\"line\">589</div><div class=\"line\">590</div><div class=\"line\">591</div><div class=\"line\">592</div><div class=\"line\">593</div><div class=\"line\">594</div><div class=\"line\">595</div><div class=\"line\">596</div><div class=\"line\">597</div><div class=\"line\">598</div><div class=\"line\">599</div><div class=\"line\">600</div><div class=\"line\">601</div><div class=\"line\">602</div><div class=\"line\">603</div><div class=\"line\">604</div><div class=\"line\">605</div><div class=\"line\">606</div><div class=\"line\">607</div><div class=\"line\">608</div><div class=\"line\">609</div><div class=\"line\">610</div><div class=\"line\">611</div><div class=\"line\">612</div><div class=\"line\">613</div><div class=\"line\">614</div><div class=\"line\">615</div><div class=\"line\">616</div><div class=\"line\">617</div><div class=\"line\">618</div><div class=\"line\">619</div><div class=\"line\">620</div><div class=\"line\">621</div><div class=\"line\">622</div><div class=\"line\">623</div><div class=\"line\">624</div><div class=\"line\">625</div><div class=\"line\">626</div><div class=\"line\">627</div><div class=\"line\">628</div><div class=\"line\">629</div><div class=\"line\">630</div><div class=\"line\">631</div><div class=\"line\">632</div><div class=\"line\">633</div><div class=\"line\">634</div><div class=\"line\">635</div><div class=\"line\">636</div><div class=\"line\">637</div><div class=\"line\">638</div><div class=\"line\">639</div><div class=\"line\">640</div><div class=\"line\">641</div><div class=\"line\">642</div><div class=\"line\">643</div><div class=\"line\">644</div><div class=\"line\">645</div><div class=\"line\">646</div><div class=\"line\">647</div><div class=\"line\">648</div><div class=\"line\">649</div><div class=\"line\">650</div><div class=\"line\">651</div><div class=\"line\">652</div><div class=\"line\">653</div><div class=\"line\">654</div><div class=\"line\">655</div><div class=\"line\">656</div><div class=\"line\">657</div><div class=\"line\">658</div><div class=\"line\">659</div><div class=\"line\">660</div><div class=\"line\">661</div><div class=\"line\">662</div><div class=\"line\">663</div><div class=\"line\">664</div><div class=\"line\">665</div><div class=\"line\">666</div><div class=\"line\">667</div><div class=\"line\">668</div><div class=\"line\">669</div><div class=\"line\">670</div><div class=\"line\">671</div><div class=\"line\">672</div><div class=\"line\">673</div><div class=\"line\">674</div><div class=\"line\">675</div><div class=\"line\">676</div><div class=\"line\">677</div><div class=\"line\">678</div><div class=\"line\">679</div><div class=\"line\">680</div><div class=\"line\">681</div><div class=\"line\">682</div><div class=\"line\">683</div><div class=\"line\">684</div><div class=\"line\">685</div><div class=\"line\">686</div><div class=\"line\">687</div><div class=\"line\">688</div><div class=\"line\">689</div><div class=\"line\">690</div><div class=\"line\">691</div><div class=\"line\">692</div><div class=\"line\">693</div><div class=\"line\">694</div><div class=\"line\">695</div><div class=\"line\">696</div><div class=\"line\">697</div><div class=\"line\">698</div><div class=\"line\">699</div><div class=\"line\">700</div><div class=\"line\">701</div><div class=\"line\">702</div><div class=\"line\">703</div><div class=\"line\">704</div><div class=\"line\">705</div><div class=\"line\">706</div><div class=\"line\">707</div><div class=\"line\">708</div><div class=\"line\">709</div><div class=\"line\">710</div><div class=\"line\">711</div><div class=\"line\">712</div><div class=\"line\">713</div><div class=\"line\">714</div><div class=\"line\">715</div><div class=\"line\">716</div><div class=\"line\">717</div><div class=\"line\">718</div><div class=\"line\">719</div><div class=\"line\">720</div><div class=\"line\">721</div><div class=\"line\">722</div><div class=\"line\">723</div><div class=\"line\">724</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> java.util;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 非同步，双向链表(具有队列、栈的特性)，可以加入null，fail-fast</span></div><div class=\"line\"><span class=\"comment\"> *  同步： List list = Collections.synchronizedList(new LinkedList(...));</span></div><div class=\"line\"><span class=\"comment\"> * 关于fail-fast 更多信息，请看http://blog.csdn.net/huzhigenlaohu/article/details/51701636</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span>&lt;<span class=\"title\">E</span>&gt;</span></div><div class=\"line\"><span class=\"class\">    <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSequentialList</span>&lt;<span class=\"title\">E</span>&gt;</span></div><div class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Deque</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//一下三个字段不会被序列化</span></div><div class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">transient</span> Node&lt;E&gt; first;</div><div class=\"line\">    <span class=\"keyword\">transient</span> Node&lt;E&gt; last;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedList</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>();</div><div class=\"line\">        addAll(c);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 链表头插入节点</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">linkFirst</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>, e, f);</div><div class=\"line\">        first = newNode;</div><div class=\"line\">        <span class=\"keyword\">if</span> (f == <span class=\"keyword\">null</span>)</div><div class=\"line\">            last = newNode;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            f.prev = newNode;</div><div class=\"line\">        size++;</div><div class=\"line\">        modCount++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//链表尾插入节点</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(l, e, <span class=\"keyword\">null</span>);</div><div class=\"line\">        last = newNode;</div><div class=\"line\">        <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</div><div class=\"line\">            first = newNode;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            l.next = newNode;</div><div class=\"line\">        size++;</div><div class=\"line\">        modCount++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//指定非空节点前后插入元素</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkBefore</span><span class=\"params\">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// assert succ != null;</span></div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; pred = succ.prev;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(pred, e, succ);</div><div class=\"line\">        succ.prev = newNode;</div><div class=\"line\">        <span class=\"keyword\">if</span> (pred == <span class=\"keyword\">null</span>)</div><div class=\"line\">            first = newNode;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            pred.next = newNode;</div><div class=\"line\">        size++;</div><div class=\"line\">        modCount++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//头节点出队，并返回</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">unlinkFirst</span><span class=\"params\">(Node&lt;E&gt; f)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// assert f == first &amp;&amp; f != null;</span></div><div class=\"line\">        <span class=\"keyword\">final</span> E element = f.item;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; next = f.next;</div><div class=\"line\">        f.item = <span class=\"keyword\">null</span>;</div><div class=\"line\">        f.next = <span class=\"keyword\">null</span>; <span class=\"comment\">// help GC</span></div><div class=\"line\">        first = next;</div><div class=\"line\">        <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>)</div><div class=\"line\">            last = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            next.prev = <span class=\"keyword\">null</span>;</div><div class=\"line\">        size--;</div><div class=\"line\">        modCount++;</div><div class=\"line\">        <span class=\"keyword\">return</span> element;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//尾节点出队，并返回</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">unlinkLast</span><span class=\"params\">(Node&lt;E&gt; l)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// assert l == last &amp;&amp; l != null;</span></div><div class=\"line\">        <span class=\"keyword\">final</span> E element = l.item;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; prev = l.prev;</div><div class=\"line\">        l.item = <span class=\"keyword\">null</span>;</div><div class=\"line\">        l.prev = <span class=\"keyword\">null</span>; <span class=\"comment\">// help GC</span></div><div class=\"line\">        last = prev;</div><div class=\"line\">        <span class=\"keyword\">if</span> (prev == <span class=\"keyword\">null</span>)</div><div class=\"line\">            first = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            prev.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">        size--;</div><div class=\"line\">        modCount++;</div><div class=\"line\">        <span class=\"keyword\">return</span> element;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 删除指定节点</span></div><div class=\"line\">    <span class=\"function\">E <span class=\"title\">unlink</span><span class=\"params\">(Node&lt;E&gt; x)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// assert x != null;</span></div><div class=\"line\">        <span class=\"keyword\">final</span> E element = x.item;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; next = x.next;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; prev = x.prev;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (prev == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            first = next;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            prev.next = next;</div><div class=\"line\">            x.prev = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            last = prev;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            next.prev = prev;</div><div class=\"line\">            x.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        x.item = <span class=\"keyword\">null</span>;</div><div class=\"line\">        size--;</div><div class=\"line\">        modCount++;</div><div class=\"line\">        <span class=\"keyword\">return</span> element;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getFirst</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</div><div class=\"line\">        <span class=\"keyword\">if</span> (f == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">        <span class=\"keyword\">return</span> f.item;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getLast</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">        <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">        <span class=\"keyword\">return</span> l.item;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">removeFirst</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</div><div class=\"line\">        <span class=\"keyword\">if</span> (f == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">        <span class=\"keyword\">return</span> unlinkFirst(f);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">removeLast</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">        <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">        <span class=\"keyword\">return</span> unlinkLast(l);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFirst</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        linkFirst(e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addLast</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        linkLast(e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> indexOf(o) != -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> size;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        linkLast(e);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (x.item == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    unlink(x);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (o.equals(x.item)) &#123;</div><div class=\"line\">                    unlink(x);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> addAll(size, c);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class=\"line\">        checkPositionIndex(index);</div><div class=\"line\"></div><div class=\"line\">        Object[] a = c.toArray();</div><div class=\"line\">        <span class=\"keyword\">int</span> numNew = a.length;</div><div class=\"line\">        <span class=\"keyword\">if</span> (numNew == <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        Node&lt;E&gt; pred, succ;</div><div class=\"line\">        <span class=\"keyword\">if</span> (index == size) &#123;</div><div class=\"line\">            succ = <span class=\"keyword\">null</span>;</div><div class=\"line\">            pred = last;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            succ = node(index);</div><div class=\"line\">            pred = succ.prev;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (Object o : a) &#123;</div><div class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>) E e = (E) o;</div><div class=\"line\">            Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(pred, e, <span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (pred == <span class=\"keyword\">null</span>)</div><div class=\"line\">                first = newNode;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                pred.next = newNode;</div><div class=\"line\">            pred = newNode;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (succ == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            last = pred;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            pred.next = succ;</div><div class=\"line\">            succ.prev = pred;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        size += numNew;</div><div class=\"line\">        modCount++;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Clearing all of the links between nodes is \"unnecessary\", but:</span></div><div class=\"line\">        <span class=\"comment\">// - helps a generational GC if the discarded nodes inhabit</span></div><div class=\"line\">        <span class=\"comment\">//   more than one generation</span></div><div class=\"line\">        <span class=\"comment\">// - is sure to free memory even if there is a reachable Iterator</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; ) &#123;</div><div class=\"line\">            Node&lt;E&gt; next = x.next;</div><div class=\"line\">            x.item = <span class=\"keyword\">null</span>;</div><div class=\"line\">            x.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">            x.prev = <span class=\"keyword\">null</span>;</div><div class=\"line\">            x = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        first = last = <span class=\"keyword\">null</span>;</div><div class=\"line\">        size = <span class=\"number\">0</span>;</div><div class=\"line\">        modCount++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        checkElementIndex(index);</div><div class=\"line\">        <span class=\"keyword\">return</span> node(index).item;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</div><div class=\"line\">        checkElementIndex(index);</div><div class=\"line\">        Node&lt;E&gt; x = node(index);</div><div class=\"line\">        E oldVal = x.item;</div><div class=\"line\">        x.item = element;</div><div class=\"line\">        <span class=\"keyword\">return</span> oldVal;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</div><div class=\"line\">        checkPositionIndex(index);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (index == size)</div><div class=\"line\">            linkLast(element);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            linkBefore(element, node(index));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        checkElementIndex(index);</div><div class=\"line\">        <span class=\"keyword\">return</span> unlink(node(index));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isElementIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; size;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt;= size;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">outOfBoundsMsg</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Index: \"</span>+index+<span class=\"string\">\", Size: \"</span>+size;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkElementIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!isElementIndex(index))</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!isPositionIndex(index))</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Node&lt;E&gt; <span class=\"title\">node</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// assert isElementIndex(index);</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (index &lt; (size &gt;&gt; <span class=\"number\">1</span>)) &#123;<span class=\"comment\">//小于元素个数的一半，则从前往后找</span></div><div class=\"line\">            Node&lt;E&gt; x = first;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++)</div><div class=\"line\">                x = x.next;</div><div class=\"line\">            <span class=\"keyword\">return</span> x;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;   <span class=\"comment\">//否则从后往前找</span></div><div class=\"line\">            Node&lt;E&gt; x = last;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt; index; i--)</div><div class=\"line\">                x = x.prev;</div><div class=\"line\">            <span class=\"keyword\">return</span> x;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (x.item == <span class=\"keyword\">null</span>)</div><div class=\"line\">                    <span class=\"keyword\">return</span> index;</div><div class=\"line\">                index++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (o.equals(x.item))</div><div class=\"line\">                    <span class=\"keyword\">return</span> index;</div><div class=\"line\">                index++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> index = size;</div><div class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = last; x != <span class=\"keyword\">null</span>; x = x.prev) &#123;</div><div class=\"line\">                index--;</div><div class=\"line\">                <span class=\"keyword\">if</span> (x.item == <span class=\"keyword\">null</span>)</div><div class=\"line\">                    <span class=\"keyword\">return</span> index;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = last; x != <span class=\"keyword\">null</span>; x = x.prev) &#123;</div><div class=\"line\">                index--;</div><div class=\"line\">                <span class=\"keyword\">if</span> (o.equals(x.item))</div><div class=\"line\">                    <span class=\"keyword\">return</span> index;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Queue operations.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</div><div class=\"line\">        <span class=\"keyword\">return</span> (f == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : f.item;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">element</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getFirst();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">poll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</div><div class=\"line\">        <span class=\"keyword\">return</span> (f == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : unlinkFirst(f);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> removeFirst();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">offer</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> add(e);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">offerFirst</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        addFirst(e);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">offerLast</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        addLast(e);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">peekFirst</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</div><div class=\"line\">        <span class=\"keyword\">return</span> (f == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : f.item;</div><div class=\"line\">     &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">peekLast</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">        <span class=\"keyword\">return</span> (l == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : l.item;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">pollFirst</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</div><div class=\"line\">        <span class=\"keyword\">return</span> (f == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : unlinkFirst(f);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">pollLast</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">        <span class=\"keyword\">return</span> (l == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : unlinkLast(l);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        addFirst(e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> removeFirst();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeFirstOccurrence</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> remove(o);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeLastOccurrence</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = last; x != <span class=\"keyword\">null</span>; x = x.prev) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (x.item == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    unlink(x);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = last; x != <span class=\"keyword\">null</span>; x = x.prev) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (o.equals(x.item)) &#123;</div><div class=\"line\">                    unlink(x);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListIterator&lt;E&gt; <span class=\"title\">listIterator</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        checkPositionIndex(index);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ListItr(index);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListItr</span> <span class=\"keyword\">implements</span> <span class=\"title\">ListIterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> Node&lt;E&gt; lastReturned;</div><div class=\"line\">        <span class=\"keyword\">private</span> Node&lt;E&gt; next;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> nextIndex;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> expectedModCount = modCount;</div><div class=\"line\"></div><div class=\"line\">        ListItr(<span class=\"keyword\">int</span> index) &#123;</div><div class=\"line\">            <span class=\"comment\">// assert isPositionIndex(index);</span></div><div class=\"line\">            next = (index == size) ? <span class=\"keyword\">null</span> : node(index);</div><div class=\"line\">            nextIndex = index;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nextIndex &lt; size;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            checkForComodification();</div><div class=\"line\">            <span class=\"keyword\">if</span> (!hasNext())</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\"></div><div class=\"line\">            lastReturned = next;</div><div class=\"line\">            next = next.next;</div><div class=\"line\">            nextIndex++;</div><div class=\"line\">            <span class=\"keyword\">return</span> lastReturned.item;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPrevious</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nextIndex &gt; <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">previous</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            checkForComodification();</div><div class=\"line\">            <span class=\"keyword\">if</span> (!hasPrevious())</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\"></div><div class=\"line\">            lastReturned = next = (next == <span class=\"keyword\">null</span>) ? last : next.prev;</div><div class=\"line\">            nextIndex--;</div><div class=\"line\">            <span class=\"keyword\">return</span> lastReturned.item;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">nextIndex</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nextIndex;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">previousIndex</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nextIndex - <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            checkForComodification();</div><div class=\"line\">            <span class=\"keyword\">if</span> (lastReturned == <span class=\"keyword\">null</span>)</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</div><div class=\"line\"></div><div class=\"line\">            Node&lt;E&gt; lastNext = lastReturned.next;</div><div class=\"line\">            unlink(lastReturned);</div><div class=\"line\">            <span class=\"keyword\">if</span> (next == lastReturned)</div><div class=\"line\">                next = lastNext;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                nextIndex--;</div><div class=\"line\">            lastReturned = <span class=\"keyword\">null</span>;</div><div class=\"line\">            expectedModCount++;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (lastReturned == <span class=\"keyword\">null</span>)</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</div><div class=\"line\">            checkForComodification();</div><div class=\"line\">            lastReturned.item = e;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">            checkForComodification();</div><div class=\"line\">            lastReturned = <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>)</div><div class=\"line\">                linkLast(e);</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                linkBefore(e, next);</div><div class=\"line\">            nextIndex++;</div><div class=\"line\">            expectedModCount++;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">forEachRemaining</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> E&gt; action)</span> </span>&#123;</div><div class=\"line\">            Objects.requireNonNull(action);</div><div class=\"line\">            <span class=\"keyword\">while</span> (modCount == expectedModCount &amp;&amp; nextIndex &lt; size) &#123;</div><div class=\"line\">                action.accept(next.item);</div><div class=\"line\">                lastReturned = next;</div><div class=\"line\">                next = next.next;</div><div class=\"line\">                nextIndex++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            checkForComodification();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (modCount != expectedModCount)</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">        E item;</div><div class=\"line\">        Node&lt;E&gt; next;</div><div class=\"line\">        Node&lt;E&gt; prev;</div><div class=\"line\"></div><div class=\"line\">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.item = element;</div><div class=\"line\">            <span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">            <span class=\"keyword\">this</span>.prev = prev;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">descendingIterator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DescendingIterator();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Adapter to provide descending iterators via ListItr.previous</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DescendingIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ListItr itr = <span class=\"keyword\">new</span> ListItr(size());</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> itr.hasPrevious();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> itr.previous();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            itr.remove();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> LinkedList&lt;E&gt; <span class=\"title\">superClone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (LinkedList&lt;E&gt;) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//浅复制，看后文详解</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        LinkedList&lt;E&gt; clone = superClone();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Put clone into \"virgin\" state</span></div><div class=\"line\">        clone.first = clone.last = <span class=\"keyword\">null</span>;</div><div class=\"line\">        clone.size = <span class=\"number\">0</span>;</div><div class=\"line\">        clone.modCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Initialize clone with our elements</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next)</div><div class=\"line\">            clone.add(x.item);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> clone;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//重新分配内存，生成的数组不会依赖原来的列表，比如修改数组不会影响源列表</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Object[] toArray() &#123;</div><div class=\"line\">        Object[] result = <span class=\"keyword\">new</span> Object[size];</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next)</div><div class=\"line\">            result[i++] = x.item;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//作为 List与 Array的桥梁API</span></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a.length &lt; size) <span class=\"comment\">//a的长度不能够容纳list，从新分配空间</span></div><div class=\"line\">            a = (T[])java.lang.reflect.Array.newInstance(</div><div class=\"line\">                                a.getClass().getComponentType(), size);</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">        Object[] result = a;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next)</div><div class=\"line\">            result[i++] = x.item;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (a.length &gt; size)</div><div class=\"line\">            a[size] = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> a;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">876323262645176354L</span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//序列化</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">writeObject</span><span class=\"params\">(java.io.ObjectOutputStream s)</span></span></div><div class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> java.io.IOException </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Write out any hidden serialization magic</span></div><div class=\"line\">        s.defaultWriteObject();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Write out size</span></div><div class=\"line\">        s.writeInt(size);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Write out all elements in the proper order.</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next)</div><div class=\"line\">            s.writeObject(x.item);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//反序列化</span></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readObject</span><span class=\"params\">(java.io.ObjectInputStream s)</span></span></div><div class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Read in any hidden serialization magic</span></div><div class=\"line\">        s.defaultReadObject();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Read in size</span></div><div class=\"line\">        <span class=\"keyword\">int</span> size = s.readInt();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Read in all elements in the proper order.</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</div><div class=\"line\">            linkLast((E)s.readObject());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 分组迭代器，允许列表被分组进行处理并行处理，属于jdk1.8新特性</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Spliterator&lt;E&gt; <span class=\"title\">spliterator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LLSpliterator&lt;E&gt;(<span class=\"keyword\">this</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** A customized variant of Spliterators.IteratorSpliterator */</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LLSpliterator</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Spliterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BATCH_UNIT = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>;  <span class=\"comment\">// batch array size increment</span></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_BATCH = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">25</span>;  <span class=\"comment\">// max batch array size;</span></div><div class=\"line\">        <span class=\"keyword\">final</span> LinkedList&lt;E&gt; list; <span class=\"comment\">// null OK unless traversed</span></div><div class=\"line\">        Node&lt;E&gt; current;      <span class=\"comment\">// current node; null until initialized</span></div><div class=\"line\">        <span class=\"keyword\">int</span> est;              <span class=\"comment\">// size estimate; -1 until first needed</span></div><div class=\"line\">        <span class=\"keyword\">int</span> expectedModCount; <span class=\"comment\">// initialized when est set</span></div><div class=\"line\">        <span class=\"keyword\">int</span> batch;            <span class=\"comment\">// batch size for splits</span></div><div class=\"line\"></div><div class=\"line\">        LLSpliterator(LinkedList&lt;E&gt; list, <span class=\"keyword\">int</span> est, <span class=\"keyword\">int</span> expectedModCount) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.list = list;</div><div class=\"line\">            <span class=\"keyword\">this</span>.est = est;</div><div class=\"line\">            <span class=\"keyword\">this</span>.expectedModCount = expectedModCount;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getEst</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> s; <span class=\"comment\">// force initialization</span></div><div class=\"line\">            <span class=\"keyword\">final</span> LinkedList&lt;E&gt; lst;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((s = est) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ((lst = list) == <span class=\"keyword\">null</span>)</div><div class=\"line\">                    s = est = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    expectedModCount = lst.modCount;</div><div class=\"line\">                    current = lst.first;</div><div class=\"line\">                    s = est = lst.size;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> s;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">estimateSize</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> (<span class=\"keyword\">long</span>) getEst(); &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Spliterator&lt;E&gt; <span class=\"title\">trySplit</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            Node&lt;E&gt; p;</div><div class=\"line\">            <span class=\"keyword\">int</span> s = getEst();</div><div class=\"line\">            <span class=\"keyword\">if</span> (s &gt; <span class=\"number\">1</span> &amp;&amp; (p = current) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> n = batch + BATCH_UNIT;</div><div class=\"line\">                <span class=\"keyword\">if</span> (n &gt; s)</div><div class=\"line\">                    n = s;</div><div class=\"line\">                <span class=\"keyword\">if</span> (n &gt; MAX_BATCH)</div><div class=\"line\">                    n = MAX_BATCH;</div><div class=\"line\">                Object[] a = <span class=\"keyword\">new</span> Object[n];</div><div class=\"line\">                <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">do</span> &#123; a[j++] = p.item; &#125; <span class=\"keyword\">while</span> ((p = p.next) != <span class=\"keyword\">null</span> &amp;&amp; j &lt; n);</div><div class=\"line\">                current = p;</div><div class=\"line\">                batch = j;</div><div class=\"line\">                est = s - j;</div><div class=\"line\">                <span class=\"keyword\">return</span> Spliterators.spliterator(a, <span class=\"number\">0</span>, j, Spliterator.ORDERED);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">forEachRemaining</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> E&gt; action)</span> </span>&#123;</div><div class=\"line\">            Node&lt;E&gt; p; <span class=\"keyword\">int</span> n;</div><div class=\"line\">            <span class=\"keyword\">if</span> (action == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">            <span class=\"keyword\">if</span> ((n = getEst()) &gt; <span class=\"number\">0</span> &amp;&amp; (p = current) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                current = <span class=\"keyword\">null</span>;</div><div class=\"line\">                est = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">                    E e = p.item;</div><div class=\"line\">                    p = p.next;</div><div class=\"line\">                    action.accept(e);</div><div class=\"line\">                &#125; <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; --n &gt; <span class=\"number\">0</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (list.modCount != expectedModCount)</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAdvance</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> E&gt; action)</span> </span>&#123;</div><div class=\"line\">            Node&lt;E&gt; p;</div><div class=\"line\">            <span class=\"keyword\">if</span> (action == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">            <span class=\"keyword\">if</span> (getEst() &gt; <span class=\"number\">0</span> &amp;&amp; (p = current) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                --est;</div><div class=\"line\">                E e = p.item;</div><div class=\"line\">                current = p.next;</div><div class=\"line\">                action.accept(e);</div><div class=\"line\">                <span class=\"keyword\">if</span> (list.modCount != expectedModCount)</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">characteristics</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"个人觉得比较重要的点\"><a href=\"#个人觉得比较重要的点\" class=\"headerlink\" title=\"个人觉得比较重要的点\"></a>个人觉得比较重要的点</h2><p>（其他也很重要，只是觉得没啥可分析的，很简单）</p>\n<hr>\n<ul>\n<li><strong>克隆</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//浅复制</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> LinkedList&lt;E&gt; <span class=\"title\">superClone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (LinkedList&lt;E&gt;) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//深复制</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//首先利用浅复制将基本变量元素复制过来</span></div><div class=\"line\">    <span class=\"comment\">//然后将引用单独一个一个的复制</span></div><div class=\"line\">     LinkedList&lt;E&gt; clone = superClone();</div><div class=\"line\">    clone.first = clone.last = <span class=\"keyword\">null</span>;</div><div class=\"line\">    clone.size = <span class=\"number\">0</span>;</div><div class=\"line\">    clone.modCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Initialize clone with our elements</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next)</div><div class=\"line\">        clone.add(x.item);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> clone;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>由于在我另外一篇博客中已经详细分析了java copy相关原理，这儿只说结论：</p>\n<ol>\n<li><p>浅复制与深复制概念</p>\n<ul>\n<li><strong>浅复制（浅克隆）</strong><br>被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅复制仅仅复制所考虑的对象，而不复制它所引用的对象。</li>\n<li><strong>深复制（深克隆）</strong><br>被复制对象的所有变量都含有与原来的对象相同的值，除去那些引用其他对象的变量。那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。换言之，深复制把要复制的对象所引用的对象都复制了一遍。</li>\n</ul>\n</li>\n<li><p>Java的clone()方法</p>\n<ul>\n<li><p>clone方法将对象复制了一份并返回给调用者。一般而言，clone（）方法满足：</p>\n<ul>\n<li>①对任何的对象x，都有x.clone() !=x//克隆对象与原对象不是同一个对象</li>\n<li>②对任何的对象x，都有x.clone().getClass()= =x.getClass()//克隆对象与原对象的类型一样</li>\n<li>③如果对象x的equals()方法定义恰当，那么x.clone().equals(x)应该成立。</li>\n</ul>\n</li>\n<li><p>Java中对象的克隆</p>\n<ul>\n<li>①为了获取对象的一份拷贝，我们可以利用Object类的clone()方法。</li>\n<li>②在派生类中覆盖基类的clone()方法，并声明为public。</li>\n<li>③在派生类的clone()方法中，调用super.clone()。</li>\n<li>④在派生类中实现Cloneable接口。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>关于浅复制和深复制请看<a href=\"http://blog.csdn.net/huzhigenlaohu/article/details/51783359\" target=\"_blank\" rel=\"external\">JAVA中浅复制与深复制</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div><div class=\"line\">480</div><div class=\"line\">481</div><div class=\"line\">482</div><div class=\"line\">483</div><div class=\"line\">484</div><div class=\"line\">485</div><div class=\"line\">486</div><div class=\"line\">487</div><div class=\"line\">488</div><div class=\"line\">489</div><div class=\"line\">490</div><div class=\"line\">491</div><div class=\"line\">492</div><div class=\"line\">493</div><div class=\"line\">494</div><div class=\"line\">495</div><div class=\"line\">496</div><div class=\"line\">497</div><div class=\"line\">498</div><div class=\"line\">499</div><div class=\"line\">500</div><div class=\"line\">501</div><div class=\"line\">502</div><div class=\"line\">503</div><div class=\"line\">504</div><div class=\"line\">505</div><div class=\"line\">506</div><div class=\"line\">507</div><div class=\"line\">508</div><div class=\"line\">509</div><div class=\"line\">510</div><div class=\"line\">511</div><div class=\"line\">512</div><div class=\"line\">513</div><div class=\"line\">514</div><div class=\"line\">515</div><div class=\"line\">516</div><div class=\"line\">517</div><div class=\"line\">518</div><div class=\"line\">519</div><div class=\"line\">520</div><div class=\"line\">521</div><div class=\"line\">522</div><div class=\"line\">523</div><div class=\"line\">524</div><div class=\"line\">525</div><div class=\"line\">526</div><div class=\"line\">527</div><div class=\"line\">528</div><div class=\"line\">529</div><div class=\"line\">530</div><div class=\"line\">531</div><div class=\"line\">532</div><div class=\"line\">533</div><div class=\"line\">534</div><div class=\"line\">535</div><div class=\"line\">536</div><div class=\"line\">537</div><div class=\"line\">538</div><div class=\"line\">539</div><div class=\"line\">540</div><div class=\"line\">541</div><div class=\"line\">542</div><div class=\"line\">543</div><div class=\"line\">544</div><div class=\"line\">545</div><div class=\"line\">546</div><div class=\"line\">547</div><div class=\"line\">548</div><div class=\"line\">549</div><div class=\"line\">550</div><div class=\"line\">551</div><div class=\"line\">552</div><div class=\"line\">553</div><div class=\"line\">554</div><div class=\"line\">555</div><div class=\"line\">556</div><div class=\"line\">557</div><div class=\"line\">558</div><div class=\"line\">559</div><div class=\"line\">560</div><div class=\"line\">561</div><div class=\"line\">562</div><div class=\"line\">563</div><div class=\"line\">564</div><div class=\"line\">565</div><div class=\"line\">566</div><div class=\"line\">567</div><div class=\"line\">568</div><div class=\"line\">569</div><div class=\"line\">570</div><div class=\"line\">571</div><div class=\"line\">572</div><div class=\"line\">573</div><div class=\"line\">574</div><div class=\"line\">575</div><div class=\"line\">576</div><div class=\"line\">577</div><div class=\"line\">578</div><div class=\"line\">579</div><div class=\"line\">580</div><div class=\"line\">581</div><div class=\"line\">582</div><div class=\"line\">583</div><div class=\"line\">584</div><div class=\"line\">585</div><div class=\"line\">586</div><div class=\"line\">587</div><div class=\"line\">588</div><div class=\"line\">589</div><div class=\"line\">590</div><div class=\"line\">591</div><div class=\"line\">592</div><div class=\"line\">593</div><div class=\"line\">594</div><div class=\"line\">595</div><div class=\"line\">596</div><div class=\"line\">597</div><div class=\"line\">598</div><div class=\"line\">599</div><div class=\"line\">600</div><div class=\"line\">601</div><div class=\"line\">602</div><div class=\"line\">603</div><div class=\"line\">604</div><div class=\"line\">605</div><div class=\"line\">606</div><div class=\"line\">607</div><div class=\"line\">608</div><div class=\"line\">609</div><div class=\"line\">610</div><div class=\"line\">611</div><div class=\"line\">612</div><div class=\"line\">613</div><div class=\"line\">614</div><div class=\"line\">615</div><div class=\"line\">616</div><div class=\"line\">617</div><div class=\"line\">618</div><div class=\"line\">619</div><div class=\"line\">620</div><div class=\"line\">621</div><div class=\"line\">622</div><div class=\"line\">623</div><div class=\"line\">624</div><div class=\"line\">625</div><div class=\"line\">626</div><div class=\"line\">627</div><div class=\"line\">628</div><div class=\"line\">629</div><div class=\"line\">630</div><div class=\"line\">631</div><div class=\"line\">632</div><div class=\"line\">633</div><div class=\"line\">634</div><div class=\"line\">635</div><div class=\"line\">636</div><div class=\"line\">637</div><div class=\"line\">638</div><div class=\"line\">639</div><div class=\"line\">640</div><div class=\"line\">641</div><div class=\"line\">642</div><div class=\"line\">643</div><div class=\"line\">644</div><div class=\"line\">645</div><div class=\"line\">646</div><div class=\"line\">647</div><div class=\"line\">648</div><div class=\"line\">649</div><div class=\"line\">650</div><div class=\"line\">651</div><div class=\"line\">652</div><div class=\"line\">653</div><div class=\"line\">654</div><div class=\"line\">655</div><div class=\"line\">656</div><div class=\"line\">657</div><div class=\"line\">658</div><div class=\"line\">659</div><div class=\"line\">660</div><div class=\"line\">661</div><div class=\"line\">662</div><div class=\"line\">663</div><div class=\"line\">664</div><div class=\"line\">665</div><div class=\"line\">666</div><div class=\"line\">667</div><div class=\"line\">668</div><div class=\"line\">669</div><div class=\"line\">670</div><div class=\"line\">671</div><div class=\"line\">672</div><div class=\"line\">673</div><div class=\"line\">674</div><div class=\"line\">675</div><div class=\"line\">676</div><div class=\"line\">677</div><div class=\"line\">678</div><div class=\"line\">679</div><div class=\"line\">680</div><div class=\"line\">681</div><div class=\"line\">682</div><div class=\"line\">683</div><div class=\"line\">684</div><div class=\"line\">685</div><div class=\"line\">686</div><div class=\"line\">687</div><div class=\"line\">688</div><div class=\"line\">689</div><div class=\"line\">690</div><div class=\"line\">691</div><div class=\"line\">692</div><div class=\"line\">693</div><div class=\"line\">694</div><div class=\"line\">695</div><div class=\"line\">696</div><div class=\"line\">697</div><div class=\"line\">698</div><div class=\"line\">699</div><div class=\"line\">700</div><div class=\"line\">701</div><div class=\"line\">702</div><div class=\"line\">703</div><div class=\"line\">704</div><div class=\"line\">705</div><div class=\"line\">706</div><div class=\"line\">707</div><div class=\"line\">708</div><div class=\"line\">709</div><div class=\"line\">710</div><div class=\"line\">711</div><div class=\"line\">712</div><div class=\"line\">713</div><div class=\"line\">714</div><div class=\"line\">715</div><div class=\"line\">716</div><div class=\"line\">717</div><div class=\"line\">718</div><div class=\"line\">719</div><div class=\"line\">720</div><div class=\"line\">721</div><div class=\"line\">722</div><div class=\"line\">723</div><div class=\"line\">724</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> java.util;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 非同步，双向链表(具有队列、栈的特性)，可以加入null，fail-fast</span></div><div class=\"line\"><span class=\"comment\"> *  同步： List list = Collections.synchronizedList(new LinkedList(...));</span></div><div class=\"line\"><span class=\"comment\"> * 关于fail-fast 更多信息，请看http://blog.csdn.net/huzhigenlaohu/article/details/51701636</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span>&lt;<span class=\"title\">E</span>&gt;</span></div><div class=\"line\"><span class=\"class\">    <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSequentialList</span>&lt;<span class=\"title\">E</span>&gt;</span></div><div class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Deque</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//一下三个字段不会被序列化</span></div><div class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">transient</span> Node&lt;E&gt; first;</div><div class=\"line\">    <span class=\"keyword\">transient</span> Node&lt;E&gt; last;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedList</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>();</div><div class=\"line\">        addAll(c);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 链表头插入节点</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">linkFirst</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>, e, f);</div><div class=\"line\">        first = newNode;</div><div class=\"line\">        <span class=\"keyword\">if</span> (f == <span class=\"keyword\">null</span>)</div><div class=\"line\">            last = newNode;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            f.prev = newNode;</div><div class=\"line\">        size++;</div><div class=\"line\">        modCount++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//链表尾插入节点</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(l, e, <span class=\"keyword\">null</span>);</div><div class=\"line\">        last = newNode;</div><div class=\"line\">        <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</div><div class=\"line\">            first = newNode;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            l.next = newNode;</div><div class=\"line\">        size++;</div><div class=\"line\">        modCount++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//指定非空节点前后插入元素</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkBefore</span><span class=\"params\">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// assert succ != null;</span></div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; pred = succ.prev;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(pred, e, succ);</div><div class=\"line\">        succ.prev = newNode;</div><div class=\"line\">        <span class=\"keyword\">if</span> (pred == <span class=\"keyword\">null</span>)</div><div class=\"line\">            first = newNode;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            pred.next = newNode;</div><div class=\"line\">        size++;</div><div class=\"line\">        modCount++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//头节点出队，并返回</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">unlinkFirst</span><span class=\"params\">(Node&lt;E&gt; f)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// assert f == first &amp;&amp; f != null;</span></div><div class=\"line\">        <span class=\"keyword\">final</span> E element = f.item;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; next = f.next;</div><div class=\"line\">        f.item = <span class=\"keyword\">null</span>;</div><div class=\"line\">        f.next = <span class=\"keyword\">null</span>; <span class=\"comment\">// help GC</span></div><div class=\"line\">        first = next;</div><div class=\"line\">        <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>)</div><div class=\"line\">            last = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            next.prev = <span class=\"keyword\">null</span>;</div><div class=\"line\">        size--;</div><div class=\"line\">        modCount++;</div><div class=\"line\">        <span class=\"keyword\">return</span> element;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//尾节点出队，并返回</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">unlinkLast</span><span class=\"params\">(Node&lt;E&gt; l)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// assert l == last &amp;&amp; l != null;</span></div><div class=\"line\">        <span class=\"keyword\">final</span> E element = l.item;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; prev = l.prev;</div><div class=\"line\">        l.item = <span class=\"keyword\">null</span>;</div><div class=\"line\">        l.prev = <span class=\"keyword\">null</span>; <span class=\"comment\">// help GC</span></div><div class=\"line\">        last = prev;</div><div class=\"line\">        <span class=\"keyword\">if</span> (prev == <span class=\"keyword\">null</span>)</div><div class=\"line\">            first = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            prev.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">        size--;</div><div class=\"line\">        modCount++;</div><div class=\"line\">        <span class=\"keyword\">return</span> element;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 删除指定节点</span></div><div class=\"line\">    <span class=\"function\">E <span class=\"title\">unlink</span><span class=\"params\">(Node&lt;E&gt; x)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// assert x != null;</span></div><div class=\"line\">        <span class=\"keyword\">final</span> E element = x.item;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; next = x.next;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; prev = x.prev;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (prev == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            first = next;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            prev.next = next;</div><div class=\"line\">            x.prev = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            last = prev;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            next.prev = prev;</div><div class=\"line\">            x.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        x.item = <span class=\"keyword\">null</span>;</div><div class=\"line\">        size--;</div><div class=\"line\">        modCount++;</div><div class=\"line\">        <span class=\"keyword\">return</span> element;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getFirst</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</div><div class=\"line\">        <span class=\"keyword\">if</span> (f == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">        <span class=\"keyword\">return</span> f.item;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getLast</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">        <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">        <span class=\"keyword\">return</span> l.item;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">removeFirst</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</div><div class=\"line\">        <span class=\"keyword\">if</span> (f == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">        <span class=\"keyword\">return</span> unlinkFirst(f);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">removeLast</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">        <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\">        <span class=\"keyword\">return</span> unlinkLast(l);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFirst</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        linkFirst(e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addLast</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        linkLast(e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> indexOf(o) != -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> size;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        linkLast(e);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (x.item == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    unlink(x);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (o.equals(x.item)) &#123;</div><div class=\"line\">                    unlink(x);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> addAll(size, c);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class=\"line\">        checkPositionIndex(index);</div><div class=\"line\"></div><div class=\"line\">        Object[] a = c.toArray();</div><div class=\"line\">        <span class=\"keyword\">int</span> numNew = a.length;</div><div class=\"line\">        <span class=\"keyword\">if</span> (numNew == <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        Node&lt;E&gt; pred, succ;</div><div class=\"line\">        <span class=\"keyword\">if</span> (index == size) &#123;</div><div class=\"line\">            succ = <span class=\"keyword\">null</span>;</div><div class=\"line\">            pred = last;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            succ = node(index);</div><div class=\"line\">            pred = succ.prev;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (Object o : a) &#123;</div><div class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>) E e = (E) o;</div><div class=\"line\">            Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(pred, e, <span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (pred == <span class=\"keyword\">null</span>)</div><div class=\"line\">                first = newNode;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                pred.next = newNode;</div><div class=\"line\">            pred = newNode;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (succ == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            last = pred;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            pred.next = succ;</div><div class=\"line\">            succ.prev = pred;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        size += numNew;</div><div class=\"line\">        modCount++;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Clearing all of the links between nodes is \"unnecessary\", but:</span></div><div class=\"line\">        <span class=\"comment\">// - helps a generational GC if the discarded nodes inhabit</span></div><div class=\"line\">        <span class=\"comment\">//   more than one generation</span></div><div class=\"line\">        <span class=\"comment\">// - is sure to free memory even if there is a reachable Iterator</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; ) &#123;</div><div class=\"line\">            Node&lt;E&gt; next = x.next;</div><div class=\"line\">            x.item = <span class=\"keyword\">null</span>;</div><div class=\"line\">            x.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">            x.prev = <span class=\"keyword\">null</span>;</div><div class=\"line\">            x = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        first = last = <span class=\"keyword\">null</span>;</div><div class=\"line\">        size = <span class=\"number\">0</span>;</div><div class=\"line\">        modCount++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        checkElementIndex(index);</div><div class=\"line\">        <span class=\"keyword\">return</span> node(index).item;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</div><div class=\"line\">        checkElementIndex(index);</div><div class=\"line\">        Node&lt;E&gt; x = node(index);</div><div class=\"line\">        E oldVal = x.item;</div><div class=\"line\">        x.item = element;</div><div class=\"line\">        <span class=\"keyword\">return</span> oldVal;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</div><div class=\"line\">        checkPositionIndex(index);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (index == size)</div><div class=\"line\">            linkLast(element);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            linkBefore(element, node(index));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        checkElementIndex(index);</div><div class=\"line\">        <span class=\"keyword\">return</span> unlink(node(index));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isElementIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; size;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt;= size;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">outOfBoundsMsg</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Index: \"</span>+index+<span class=\"string\">\", Size: \"</span>+size;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkElementIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!isElementIndex(index))</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!isPositionIndex(index))</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Node&lt;E&gt; <span class=\"title\">node</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// assert isElementIndex(index);</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (index &lt; (size &gt;&gt; <span class=\"number\">1</span>)) &#123;<span class=\"comment\">//小于元素个数的一半，则从前往后找</span></div><div class=\"line\">            Node&lt;E&gt; x = first;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++)</div><div class=\"line\">                x = x.next;</div><div class=\"line\">            <span class=\"keyword\">return</span> x;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;   <span class=\"comment\">//否则从后往前找</span></div><div class=\"line\">            Node&lt;E&gt; x = last;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt; index; i--)</div><div class=\"line\">                x = x.prev;</div><div class=\"line\">            <span class=\"keyword\">return</span> x;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (x.item == <span class=\"keyword\">null</span>)</div><div class=\"line\">                    <span class=\"keyword\">return</span> index;</div><div class=\"line\">                index++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (o.equals(x.item))</div><div class=\"line\">                    <span class=\"keyword\">return</span> index;</div><div class=\"line\">                index++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> index = size;</div><div class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = last; x != <span class=\"keyword\">null</span>; x = x.prev) &#123;</div><div class=\"line\">                index--;</div><div class=\"line\">                <span class=\"keyword\">if</span> (x.item == <span class=\"keyword\">null</span>)</div><div class=\"line\">                    <span class=\"keyword\">return</span> index;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = last; x != <span class=\"keyword\">null</span>; x = x.prev) &#123;</div><div class=\"line\">                index--;</div><div class=\"line\">                <span class=\"keyword\">if</span> (o.equals(x.item))</div><div class=\"line\">                    <span class=\"keyword\">return</span> index;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Queue operations.</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</div><div class=\"line\">        <span class=\"keyword\">return</span> (f == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : f.item;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">element</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getFirst();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">poll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</div><div class=\"line\">        <span class=\"keyword\">return</span> (f == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : unlinkFirst(f);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> removeFirst();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">offer</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> add(e);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">offerFirst</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        addFirst(e);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">offerLast</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        addLast(e);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">peekFirst</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</div><div class=\"line\">        <span class=\"keyword\">return</span> (f == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : f.item;</div><div class=\"line\">     &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">peekLast</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">        <span class=\"keyword\">return</span> (l == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : l.item;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">pollFirst</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</div><div class=\"line\">        <span class=\"keyword\">return</span> (f == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : unlinkFirst(f);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">pollLast</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</div><div class=\"line\">        <span class=\"keyword\">return</span> (l == <span class=\"keyword\">null</span>) ? <span class=\"keyword\">null</span> : unlinkLast(l);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">        addFirst(e);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> removeFirst();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeFirstOccurrence</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> remove(o);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeLastOccurrence</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = last; x != <span class=\"keyword\">null</span>; x = x.prev) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (x.item == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    unlink(x);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Node&lt;E&gt; x = last; x != <span class=\"keyword\">null</span>; x = x.prev) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (o.equals(x.item)) &#123;</div><div class=\"line\">                    unlink(x);</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListIterator&lt;E&gt; <span class=\"title\">listIterator</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</div><div class=\"line\">        checkPositionIndex(index);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ListItr(index);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListItr</span> <span class=\"keyword\">implements</span> <span class=\"title\">ListIterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> Node&lt;E&gt; lastReturned;</div><div class=\"line\">        <span class=\"keyword\">private</span> Node&lt;E&gt; next;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> nextIndex;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> expectedModCount = modCount;</div><div class=\"line\"></div><div class=\"line\">        ListItr(<span class=\"keyword\">int</span> index) &#123;</div><div class=\"line\">            <span class=\"comment\">// assert isPositionIndex(index);</span></div><div class=\"line\">            next = (index == size) ? <span class=\"keyword\">null</span> : node(index);</div><div class=\"line\">            nextIndex = index;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nextIndex &lt; size;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            checkForComodification();</div><div class=\"line\">            <span class=\"keyword\">if</span> (!hasNext())</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\"></div><div class=\"line\">            lastReturned = next;</div><div class=\"line\">            next = next.next;</div><div class=\"line\">            nextIndex++;</div><div class=\"line\">            <span class=\"keyword\">return</span> lastReturned.item;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPrevious</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nextIndex &gt; <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">previous</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            checkForComodification();</div><div class=\"line\">            <span class=\"keyword\">if</span> (!hasPrevious())</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</div><div class=\"line\"></div><div class=\"line\">            lastReturned = next = (next == <span class=\"keyword\">null</span>) ? last : next.prev;</div><div class=\"line\">            nextIndex--;</div><div class=\"line\">            <span class=\"keyword\">return</span> lastReturned.item;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">nextIndex</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nextIndex;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">previousIndex</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nextIndex - <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            checkForComodification();</div><div class=\"line\">            <span class=\"keyword\">if</span> (lastReturned == <span class=\"keyword\">null</span>)</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</div><div class=\"line\"></div><div class=\"line\">            Node&lt;E&gt; lastNext = lastReturned.next;</div><div class=\"line\">            unlink(lastReturned);</div><div class=\"line\">            <span class=\"keyword\">if</span> (next == lastReturned)</div><div class=\"line\">                next = lastNext;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                nextIndex--;</div><div class=\"line\">            lastReturned = <span class=\"keyword\">null</span>;</div><div class=\"line\">            expectedModCount++;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (lastReturned == <span class=\"keyword\">null</span>)</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</div><div class=\"line\">            checkForComodification();</div><div class=\"line\">            lastReturned.item = e;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</div><div class=\"line\">            checkForComodification();</div><div class=\"line\">            lastReturned = <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>)</div><div class=\"line\">                linkLast(e);</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                linkBefore(e, next);</div><div class=\"line\">            nextIndex++;</div><div class=\"line\">            expectedModCount++;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">forEachRemaining</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> E&gt; action)</span> </span>&#123;</div><div class=\"line\">            Objects.requireNonNull(action);</div><div class=\"line\">            <span class=\"keyword\">while</span> (modCount == expectedModCount &amp;&amp; nextIndex &lt; size) &#123;</div><div class=\"line\">                action.accept(next.item);</div><div class=\"line\">                lastReturned = next;</div><div class=\"line\">                next = next.next;</div><div class=\"line\">                nextIndex++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            checkForComodification();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (modCount != expectedModCount)</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">        E item;</div><div class=\"line\">        Node&lt;E&gt; next;</div><div class=\"line\">        Node&lt;E&gt; prev;</div><div class=\"line\"></div><div class=\"line\">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.item = element;</div><div class=\"line\">            <span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">            <span class=\"keyword\">this</span>.prev = prev;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">descendingIterator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DescendingIterator();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Adapter to provide descending iterators via ListItr.previous</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DescendingIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ListItr itr = <span class=\"keyword\">new</span> ListItr(size());</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> itr.hasPrevious();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> itr.previous();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            itr.remove();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> LinkedList&lt;E&gt; <span class=\"title\">superClone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (LinkedList&lt;E&gt;) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//浅复制，看后文详解</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        LinkedList&lt;E&gt; clone = superClone();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Put clone into \"virgin\" state</span></div><div class=\"line\">        clone.first = clone.last = <span class=\"keyword\">null</span>;</div><div class=\"line\">        clone.size = <span class=\"number\">0</span>;</div><div class=\"line\">        clone.modCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Initialize clone with our elements</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next)</div><div class=\"line\">            clone.add(x.item);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> clone;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//重新分配内存，生成的数组不会依赖原来的列表，比如修改数组不会影响源列表</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Object[] toArray() &#123;</div><div class=\"line\">        Object[] result = <span class=\"keyword\">new</span> Object[size];</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next)</div><div class=\"line\">            result[i++] = x.item;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//作为 List与 Array的桥梁API</span></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a.length &lt; size) <span class=\"comment\">//a的长度不能够容纳list，从新分配空间</span></div><div class=\"line\">            a = (T[])java.lang.reflect.Array.newInstance(</div><div class=\"line\">                                a.getClass().getComponentType(), size);</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">        Object[] result = a;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next)</div><div class=\"line\">            result[i++] = x.item;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (a.length &gt; size)</div><div class=\"line\">            a[size] = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> a;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">876323262645176354L</span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//序列化</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">writeObject</span><span class=\"params\">(java.io.ObjectOutputStream s)</span></span></div><div class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> java.io.IOException </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Write out any hidden serialization magic</span></div><div class=\"line\">        s.defaultWriteObject();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Write out size</span></div><div class=\"line\">        s.writeInt(size);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Write out all elements in the proper order.</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next)</div><div class=\"line\">            s.writeObject(x.item);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//反序列化</span></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readObject</span><span class=\"params\">(java.io.ObjectInputStream s)</span></span></div><div class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Read in any hidden serialization magic</span></div><div class=\"line\">        s.defaultReadObject();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Read in size</span></div><div class=\"line\">        <span class=\"keyword\">int</span> size = s.readInt();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Read in all elements in the proper order.</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</div><div class=\"line\">            linkLast((E)s.readObject());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 分组迭代器，允许列表被分组进行处理并行处理，属于jdk1.8新特性</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Spliterator&lt;E&gt; <span class=\"title\">spliterator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LLSpliterator&lt;E&gt;(<span class=\"keyword\">this</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** A customized variant of Spliterators.IteratorSpliterator */</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LLSpliterator</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Spliterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BATCH_UNIT = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>;  <span class=\"comment\">// batch array size increment</span></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_BATCH = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">25</span>;  <span class=\"comment\">// max batch array size;</span></div><div class=\"line\">        <span class=\"keyword\">final</span> LinkedList&lt;E&gt; list; <span class=\"comment\">// null OK unless traversed</span></div><div class=\"line\">        Node&lt;E&gt; current;      <span class=\"comment\">// current node; null until initialized</span></div><div class=\"line\">        <span class=\"keyword\">int</span> est;              <span class=\"comment\">// size estimate; -1 until first needed</span></div><div class=\"line\">        <span class=\"keyword\">int</span> expectedModCount; <span class=\"comment\">// initialized when est set</span></div><div class=\"line\">        <span class=\"keyword\">int</span> batch;            <span class=\"comment\">// batch size for splits</span></div><div class=\"line\"></div><div class=\"line\">        LLSpliterator(LinkedList&lt;E&gt; list, <span class=\"keyword\">int</span> est, <span class=\"keyword\">int</span> expectedModCount) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.list = list;</div><div class=\"line\">            <span class=\"keyword\">this</span>.est = est;</div><div class=\"line\">            <span class=\"keyword\">this</span>.expectedModCount = expectedModCount;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getEst</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> s; <span class=\"comment\">// force initialization</span></div><div class=\"line\">            <span class=\"keyword\">final</span> LinkedList&lt;E&gt; lst;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((s = est) &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ((lst = list) == <span class=\"keyword\">null</span>)</div><div class=\"line\">                    s = est = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    expectedModCount = lst.modCount;</div><div class=\"line\">                    current = lst.first;</div><div class=\"line\">                    s = est = lst.size;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> s;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">estimateSize</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> (<span class=\"keyword\">long</span>) getEst(); &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Spliterator&lt;E&gt; <span class=\"title\">trySplit</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            Node&lt;E&gt; p;</div><div class=\"line\">            <span class=\"keyword\">int</span> s = getEst();</div><div class=\"line\">            <span class=\"keyword\">if</span> (s &gt; <span class=\"number\">1</span> &amp;&amp; (p = current) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> n = batch + BATCH_UNIT;</div><div class=\"line\">                <span class=\"keyword\">if</span> (n &gt; s)</div><div class=\"line\">                    n = s;</div><div class=\"line\">                <span class=\"keyword\">if</span> (n &gt; MAX_BATCH)</div><div class=\"line\">                    n = MAX_BATCH;</div><div class=\"line\">                Object[] a = <span class=\"keyword\">new</span> Object[n];</div><div class=\"line\">                <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">do</span> &#123; a[j++] = p.item; &#125; <span class=\"keyword\">while</span> ((p = p.next) != <span class=\"keyword\">null</span> &amp;&amp; j &lt; n);</div><div class=\"line\">                current = p;</div><div class=\"line\">                batch = j;</div><div class=\"line\">                est = s - j;</div><div class=\"line\">                <span class=\"keyword\">return</span> Spliterators.spliterator(a, <span class=\"number\">0</span>, j, Spliterator.ORDERED);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">forEachRemaining</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> E&gt; action)</span> </span>&#123;</div><div class=\"line\">            Node&lt;E&gt; p; <span class=\"keyword\">int</span> n;</div><div class=\"line\">            <span class=\"keyword\">if</span> (action == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">            <span class=\"keyword\">if</span> ((n = getEst()) &gt; <span class=\"number\">0</span> &amp;&amp; (p = current) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                current = <span class=\"keyword\">null</span>;</div><div class=\"line\">                est = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">                    E e = p.item;</div><div class=\"line\">                    p = p.next;</div><div class=\"line\">                    action.accept(e);</div><div class=\"line\">                &#125; <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; --n &gt; <span class=\"number\">0</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (list.modCount != expectedModCount)</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAdvance</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> E&gt; action)</span> </span>&#123;</div><div class=\"line\">            Node&lt;E&gt; p;</div><div class=\"line\">            <span class=\"keyword\">if</span> (action == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">            <span class=\"keyword\">if</span> (getEst() &gt; <span class=\"number\">0</span> &amp;&amp; (p = current) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                --est;</div><div class=\"line\">                E e = p.item;</div><div class=\"line\">                current = p.next;</div><div class=\"line\">                action.accept(e);</div><div class=\"line\">                <span class=\"keyword\">if</span> (list.modCount != expectedModCount)</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">characteristics</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"个人觉得比较重要的点\"><a href=\"#个人觉得比较重要的点\" class=\"headerlink\" title=\"个人觉得比较重要的点\"></a>个人觉得比较重要的点</h2><p>（其他也很重要，只是觉得没啥可分析的，很简单）</p>\n<hr>\n<ul>\n<li><strong>克隆</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//浅复制</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> LinkedList&lt;E&gt; <span class=\"title\">superClone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (LinkedList&lt;E&gt;) <span class=\"keyword\">super</span>.clone();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//深复制</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//首先利用浅复制将基本变量元素复制过来</span></div><div class=\"line\">    <span class=\"comment\">//然后将引用单独一个一个的复制</span></div><div class=\"line\">     LinkedList&lt;E&gt; clone = superClone();</div><div class=\"line\">    clone.first = clone.last = <span class=\"keyword\">null</span>;</div><div class=\"line\">    clone.size = <span class=\"number\">0</span>;</div><div class=\"line\">    clone.modCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Initialize clone with our elements</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next)</div><div class=\"line\">        clone.add(x.item);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> clone;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>由于在我另外一篇博客中已经详细分析了java copy相关原理，这儿只说结论：</p>\n<ol>\n<li><p>浅复制与深复制概念</p>\n<ul>\n<li><strong>浅复制（浅克隆）</strong><br>被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅复制仅仅复制所考虑的对象，而不复制它所引用的对象。</li>\n<li><strong>深复制（深克隆）</strong><br>被复制对象的所有变量都含有与原来的对象相同的值，除去那些引用其他对象的变量。那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。换言之，深复制把要复制的对象所引用的对象都复制了一遍。</li>\n</ul>\n</li>\n<li><p>Java的clone()方法</p>\n<ul>\n<li><p>clone方法将对象复制了一份并返回给调用者。一般而言，clone（）方法满足：</p>\n<ul>\n<li>①对任何的对象x，都有x.clone() !=x//克隆对象与原对象不是同一个对象</li>\n<li>②对任何的对象x，都有x.clone().getClass()= =x.getClass()//克隆对象与原对象的类型一样</li>\n<li>③如果对象x的equals()方法定义恰当，那么x.clone().equals(x)应该成立。</li>\n</ul>\n</li>\n<li><p>Java中对象的克隆</p>\n<ul>\n<li>①为了获取对象的一份拷贝，我们可以利用Object类的clone()方法。</li>\n<li>②在派生类中覆盖基类的clone()方法，并声明为public。</li>\n<li>③在派生类的clone()方法中，调用super.clone()。</li>\n<li>④在派生类中实现Cloneable接口。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>关于浅复制和深复制请看<a href=\"http://blog.csdn.net/huzhigenlaohu/article/details/51783359\" target=\"_blank\" rel=\"external\">JAVA中浅复制与深复制</a></p>\n<hr>\n"},{"title":"Lua基础知识","date":"2017-09-12T02:46:05.000Z","_content":"\n## Lua基础知识\n\n### 不一样\n\n1. 变量没有类型，值有类型\n2. 变量默认都是global，除非声明local，若变量名相同，将覆盖之\n3. 变量交换值方便`a,b = b,a`\n4. 当变量没有被初始化（仅仅是声明），被定义为nil\n5. **索引从1开始，这点跟其他的语言区别很大，格外注意**\n6. **0和空字符串被认为是true,条件检查也是如此**\n7. 不等于号`~=`\n8. 使用两个点`..` 连接两个字符串\n9. `#`:一个一元运算符返回一个字符串或一个表的长度,   #\"Hello\" 会返回 5.\n\n\n### 迭代器\n\n> 迭代器是一种结构，使能够遍历所谓的集合或容器中的元素。在Lua中，这些集合通常是指那些用于创建各种数据结构，如数组表。\n\n#### 一般迭代器\n\n一个通用的迭代器提供的键值对集合中的每个元素：\n```lua\narray = {\"Lua\", \"Tutorial\"}\n\nfor key,value in ipairs(array)   -- 使用默认ipairs迭代函数\ndo\n   print(key, value)\nend\n```\n输出结果如下：\n```lua\n1  Lua\n2  Tutorial\n```\nLua中，有时候使用函数来表示迭代器。基于这些迭代器的功能状态保持，有两种主要类型：\n- 无状态的迭代器\n- 迭代器状态\n\n**无状态的迭代器**\n\n这类型的迭代器功能不保留任何状态。\n```lua\n-- 实现打印n个数的平方\nfunction square(iteratorMaxCount,currentNumber)\n   if currentNumber<iteratorMaxCount\n   then\n      currentNumber = currentNumber+1\n   return currentNumber, currentNumber*currentNumber\n   end\nend\n\nfor i,n in square,3,0\ndo\n   print(i,n)\nend\n```\n输出结果如下：\n```lua\n1   1\n2   4\n3   9\n```\n\n我们可以稍作修改，以模仿迭代器的工作方式ipairs函数：\n```lua\nfunction square(iteratorMaxCount,currentNumber)\n   if currentNumber<iteratorMaxCount\n   then\n      currentNumber = currentNumber+1\n   return currentNumber, currentNumber*currentNumber\n   end\nend\n\nfunction squares(iteratorMaxCount)\n   return square,iteratorMaxCount,0\nend  \n\nfor i,n in squares(3)\ndo \n    print(i,n)\nend\n```\n\n**有状态迭代器**\n\n使用闭包的概念可以实现:\n```lua\narray = {\"Lua\", \"Tutorial\"}\n\nfunction elementIterator (collection)\n   local index = 0\n   local count = #collection\n   -- The closure function is returned\n   return function ()\n      index = index + 1\n      if index <= count\n      then\n         -- return the current element of the iterator\n         return collection[index]\n      end\n   end\nend\n\nfor element in elementIterator(array)\ndo\n   print(element)\nend\n```\n\n当我们运行上面的程序，会得到下面的输出。\n\n```lua\nLua\nTutorial\n```\n\n\n","source":"_posts/Lua基础知识.md","raw":"---\ntitle: Lua基础知识\ndate: 2017-09-12 10:46:05\ntags:\n    lua\n---\n\n## Lua基础知识\n\n### 不一样\n\n1. 变量没有类型，值有类型\n2. 变量默认都是global，除非声明local，若变量名相同，将覆盖之\n3. 变量交换值方便`a,b = b,a`\n4. 当变量没有被初始化（仅仅是声明），被定义为nil\n5. **索引从1开始，这点跟其他的语言区别很大，格外注意**\n6. **0和空字符串被认为是true,条件检查也是如此**\n7. 不等于号`~=`\n8. 使用两个点`..` 连接两个字符串\n9. `#`:一个一元运算符返回一个字符串或一个表的长度,   #\"Hello\" 会返回 5.\n\n\n### 迭代器\n\n> 迭代器是一种结构，使能够遍历所谓的集合或容器中的元素。在Lua中，这些集合通常是指那些用于创建各种数据结构，如数组表。\n\n#### 一般迭代器\n\n一个通用的迭代器提供的键值对集合中的每个元素：\n```lua\narray = {\"Lua\", \"Tutorial\"}\n\nfor key,value in ipairs(array)   -- 使用默认ipairs迭代函数\ndo\n   print(key, value)\nend\n```\n输出结果如下：\n```lua\n1  Lua\n2  Tutorial\n```\nLua中，有时候使用函数来表示迭代器。基于这些迭代器的功能状态保持，有两种主要类型：\n- 无状态的迭代器\n- 迭代器状态\n\n**无状态的迭代器**\n\n这类型的迭代器功能不保留任何状态。\n```lua\n-- 实现打印n个数的平方\nfunction square(iteratorMaxCount,currentNumber)\n   if currentNumber<iteratorMaxCount\n   then\n      currentNumber = currentNumber+1\n   return currentNumber, currentNumber*currentNumber\n   end\nend\n\nfor i,n in square,3,0\ndo\n   print(i,n)\nend\n```\n输出结果如下：\n```lua\n1   1\n2   4\n3   9\n```\n\n我们可以稍作修改，以模仿迭代器的工作方式ipairs函数：\n```lua\nfunction square(iteratorMaxCount,currentNumber)\n   if currentNumber<iteratorMaxCount\n   then\n      currentNumber = currentNumber+1\n   return currentNumber, currentNumber*currentNumber\n   end\nend\n\nfunction squares(iteratorMaxCount)\n   return square,iteratorMaxCount,0\nend  \n\nfor i,n in squares(3)\ndo \n    print(i,n)\nend\n```\n\n**有状态迭代器**\n\n使用闭包的概念可以实现:\n```lua\narray = {\"Lua\", \"Tutorial\"}\n\nfunction elementIterator (collection)\n   local index = 0\n   local count = #collection\n   -- The closure function is returned\n   return function ()\n      index = index + 1\n      if index <= count\n      then\n         -- return the current element of the iterator\n         return collection[index]\n      end\n   end\nend\n\nfor element in elementIterator(array)\ndo\n   print(element)\nend\n```\n\n当我们运行上面的程序，会得到下面的输出。\n\n```lua\nLua\nTutorial\n```\n\n\n","slug":"Lua基础知识","published":1,"updated":"2017-09-12T02:47:14.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ihxmdq000c6ci6uk170s7q","content":"<h2 id=\"Lua基础知识\"><a href=\"#Lua基础知识\" class=\"headerlink\" title=\"Lua基础知识\"></a>Lua基础知识</h2><h3 id=\"不一样\"><a href=\"#不一样\" class=\"headerlink\" title=\"不一样\"></a>不一样</h3><ol>\n<li>变量没有类型，值有类型</li>\n<li>变量默认都是global，除非声明local，若变量名相同，将覆盖之</li>\n<li>变量交换值方便<code>a,b = b,a</code></li>\n<li>当变量没有被初始化（仅仅是声明），被定义为nil</li>\n<li><strong>索引从1开始，这点跟其他的语言区别很大，格外注意</strong></li>\n<li><strong>0和空字符串被认为是true,条件检查也是如此</strong></li>\n<li>不等于号<code>~=</code></li>\n<li>使用两个点<code>..</code> 连接两个字符串</li>\n<li><code>#</code>:一个一元运算符返回一个字符串或一个表的长度,   #”Hello” 会返回 5.</li>\n</ol>\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><blockquote>\n<p>迭代器是一种结构，使能够遍历所谓的集合或容器中的元素。在Lua中，这些集合通常是指那些用于创建各种数据结构，如数组表。</p>\n</blockquote>\n<h4 id=\"一般迭代器\"><a href=\"#一般迭代器\" class=\"headerlink\" title=\"一般迭代器\"></a>一般迭代器</h4><p>一个通用的迭代器提供的键值对集合中的每个元素：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">array = &#123;<span class=\"string\">\"Lua\"</span>, <span class=\"string\">\"Tutorial\"</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(array)   <span class=\"comment\">-- 使用默认ipairs迭代函数</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">   <span class=\"built_in\">print</span>(key, value)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>输出结果如下：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>  Lua</div><div class=\"line\"><span class=\"number\">2</span>  Tutorial</div></pre></td></tr></table></figure></p>\n<p>Lua中，有时候使用函数来表示迭代器。基于这些迭代器的功能状态保持，有两种主要类型：</p>\n<ul>\n<li>无状态的迭代器</li>\n<li>迭代器状态</li>\n</ul>\n<p><strong>无状态的迭代器</strong></p>\n<p>这类型的迭代器功能不保留任何状态。<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- 实现打印n个数的平方</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span><span class=\"params\">(iteratorMaxCount,currentNumber)</span></span></div><div class=\"line\">   <span class=\"keyword\">if</span> currentNumber&lt;iteratorMaxCount</div><div class=\"line\">   <span class=\"keyword\">then</span></div><div class=\"line\">      currentNumber = currentNumber+<span class=\"number\">1</span></div><div class=\"line\">   <span class=\"keyword\">return</span> currentNumber, currentNumber*currentNumber</div><div class=\"line\">   <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i,n <span class=\"keyword\">in</span> square,<span class=\"number\">3</span>,<span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">   <span class=\"built_in\">print</span>(i,n)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>输出结果如下：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span>   <span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">3</span>   <span class=\"number\">9</span></div></pre></td></tr></table></figure></p>\n<p>我们可以稍作修改，以模仿迭代器的工作方式ipairs函数：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span><span class=\"params\">(iteratorMaxCount,currentNumber)</span></span></div><div class=\"line\">   <span class=\"keyword\">if</span> currentNumber&lt;iteratorMaxCount</div><div class=\"line\">   <span class=\"keyword\">then</span></div><div class=\"line\">      currentNumber = currentNumber+<span class=\"number\">1</span></div><div class=\"line\">   <span class=\"keyword\">return</span> currentNumber, currentNumber*currentNumber</div><div class=\"line\">   <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">squares</span><span class=\"params\">(iteratorMaxCount)</span></span></div><div class=\"line\">   <span class=\"keyword\">return</span> square,iteratorMaxCount,<span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">end</span>  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i,n <span class=\"keyword\">in</span> squares(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"keyword\">do</span> </div><div class=\"line\">    <span class=\"built_in\">print</span>(i,n)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p><strong>有状态迭代器</strong></p>\n<p>使用闭包的概念可以实现:<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">array = &#123;<span class=\"string\">\"Lua\"</span>, <span class=\"string\">\"Tutorial\"</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">elementIterator</span> <span class=\"params\">(collection)</span></span></div><div class=\"line\">   <span class=\"keyword\">local</span> index = <span class=\"number\">0</span></div><div class=\"line\">   <span class=\"keyword\">local</span> count = #collection</div><div class=\"line\">   <span class=\"comment\">-- The closure function is returned</span></div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span></div><div class=\"line\">      index = index + <span class=\"number\">1</span></div><div class=\"line\">      <span class=\"keyword\">if</span> index &lt;= count</div><div class=\"line\">      <span class=\"keyword\">then</span></div><div class=\"line\">         <span class=\"comment\">-- return the current element of the iterator</span></div><div class=\"line\">         <span class=\"keyword\">return</span> collection[index]</div><div class=\"line\">      <span class=\"keyword\">end</span></div><div class=\"line\">   <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> elementIterator(array)</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">   <span class=\"built_in\">print</span>(element)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>当我们运行上面的程序，会得到下面的输出。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Lua</div><div class=\"line\">Tutorial</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Lua基础知识\"><a href=\"#Lua基础知识\" class=\"headerlink\" title=\"Lua基础知识\"></a>Lua基础知识</h2><h3 id=\"不一样\"><a href=\"#不一样\" class=\"headerlink\" title=\"不一样\"></a>不一样</h3><ol>\n<li>变量没有类型，值有类型</li>\n<li>变量默认都是global，除非声明local，若变量名相同，将覆盖之</li>\n<li>变量交换值方便<code>a,b = b,a</code></li>\n<li>当变量没有被初始化（仅仅是声明），被定义为nil</li>\n<li><strong>索引从1开始，这点跟其他的语言区别很大，格外注意</strong></li>\n<li><strong>0和空字符串被认为是true,条件检查也是如此</strong></li>\n<li>不等于号<code>~=</code></li>\n<li>使用两个点<code>..</code> 连接两个字符串</li>\n<li><code>#</code>:一个一元运算符返回一个字符串或一个表的长度,   #”Hello” 会返回 5.</li>\n</ol>\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><blockquote>\n<p>迭代器是一种结构，使能够遍历所谓的集合或容器中的元素。在Lua中，这些集合通常是指那些用于创建各种数据结构，如数组表。</p>\n</blockquote>\n<h4 id=\"一般迭代器\"><a href=\"#一般迭代器\" class=\"headerlink\" title=\"一般迭代器\"></a>一般迭代器</h4><p>一个通用的迭代器提供的键值对集合中的每个元素：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">array = &#123;<span class=\"string\">\"Lua\"</span>, <span class=\"string\">\"Tutorial\"</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(array)   <span class=\"comment\">-- 使用默认ipairs迭代函数</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">   <span class=\"built_in\">print</span>(key, value)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>输出结果如下：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>  Lua</div><div class=\"line\"><span class=\"number\">2</span>  Tutorial</div></pre></td></tr></table></figure></p>\n<p>Lua中，有时候使用函数来表示迭代器。基于这些迭代器的功能状态保持，有两种主要类型：</p>\n<ul>\n<li>无状态的迭代器</li>\n<li>迭代器状态</li>\n</ul>\n<p><strong>无状态的迭代器</strong></p>\n<p>这类型的迭代器功能不保留任何状态。<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- 实现打印n个数的平方</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span><span class=\"params\">(iteratorMaxCount,currentNumber)</span></span></div><div class=\"line\">   <span class=\"keyword\">if</span> currentNumber&lt;iteratorMaxCount</div><div class=\"line\">   <span class=\"keyword\">then</span></div><div class=\"line\">      currentNumber = currentNumber+<span class=\"number\">1</span></div><div class=\"line\">   <span class=\"keyword\">return</span> currentNumber, currentNumber*currentNumber</div><div class=\"line\">   <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i,n <span class=\"keyword\">in</span> square,<span class=\"number\">3</span>,<span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">   <span class=\"built_in\">print</span>(i,n)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>输出结果如下：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span>   <span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">3</span>   <span class=\"number\">9</span></div></pre></td></tr></table></figure></p>\n<p>我们可以稍作修改，以模仿迭代器的工作方式ipairs函数：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span><span class=\"params\">(iteratorMaxCount,currentNumber)</span></span></div><div class=\"line\">   <span class=\"keyword\">if</span> currentNumber&lt;iteratorMaxCount</div><div class=\"line\">   <span class=\"keyword\">then</span></div><div class=\"line\">      currentNumber = currentNumber+<span class=\"number\">1</span></div><div class=\"line\">   <span class=\"keyword\">return</span> currentNumber, currentNumber*currentNumber</div><div class=\"line\">   <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">squares</span><span class=\"params\">(iteratorMaxCount)</span></span></div><div class=\"line\">   <span class=\"keyword\">return</span> square,iteratorMaxCount,<span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">end</span>  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i,n <span class=\"keyword\">in</span> squares(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"keyword\">do</span> </div><div class=\"line\">    <span class=\"built_in\">print</span>(i,n)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p><strong>有状态迭代器</strong></p>\n<p>使用闭包的概念可以实现:<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">array = &#123;<span class=\"string\">\"Lua\"</span>, <span class=\"string\">\"Tutorial\"</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">elementIterator</span> <span class=\"params\">(collection)</span></span></div><div class=\"line\">   <span class=\"keyword\">local</span> index = <span class=\"number\">0</span></div><div class=\"line\">   <span class=\"keyword\">local</span> count = #collection</div><div class=\"line\">   <span class=\"comment\">-- The closure function is returned</span></div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span></div><div class=\"line\">      index = index + <span class=\"number\">1</span></div><div class=\"line\">      <span class=\"keyword\">if</span> index &lt;= count</div><div class=\"line\">      <span class=\"keyword\">then</span></div><div class=\"line\">         <span class=\"comment\">-- return the current element of the iterator</span></div><div class=\"line\">         <span class=\"keyword\">return</span> collection[index]</div><div class=\"line\">      <span class=\"keyword\">end</span></div><div class=\"line\">   <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> elementIterator(array)</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">   <span class=\"built_in\">print</span>(element)</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure></p>\n<p>当我们运行上面的程序，会得到下面的输出。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Lua</div><div class=\"line\">Tutorial</div></pre></td></tr></table></figure>\n"},{"title":"lua 协同程序","date":"2017-09-13T03:43:55.000Z","_content":"\n## 什么是协同程序？\n> Lua 协同程序(coroutine)与线程比较类似：拥有独立的堆栈，独立的局部变量，独立的指令指针，同时又与其它协同程序共享全局变量和其它大部分东西。协同是非常强大的功能，但是用起来也很复杂。\n\n## 线程与协程的区别\n> 线程与协同程序的主要区别在于，*一个具有多个线程的程序可以同时运行几个线程，而协同程序却需要彼此协作的运行*。**在任一指定时刻只有一个协同程序在运行，并且这个正在运行的协同程序只有在明确的被要求挂起的时候才会被挂起**。协同程序有点类似同步的多线程，在等待同一个线程锁的几个线程有点类似协同。\n\n## 基本语法\n- coroutine.create()  创建coroutine，返回coroutine，参数是一个函数，当和resume配合使用的时候就唤醒函数调用\n- coroutine.resume()重启coroutine和create配合使用,这个函数可以传参数给协同程序，调用成功会返回true.\n- coroutine.yield()挂起coroutine，将coroutine设置为挂起状态，这个和resume配合使用能有很多有用的效果，这个函数可以返回函数给主线程！！！\n- coroutine.status()  查看coroutine的状态 ,注：coroutine的状态有三种：dead，suspend，running，具体什么时候有这样的状态请参考下面的程序\n- coroutine.wrap()创建coroutine，返回一个函数，一旦你调用这个函数，就进入coroutine，和create功能重复\n- coroutine.running() 返回正在跑的coroutine，一个coroutine就是一个线程，当使用running的时候，就是返回一个corouting的线程号\n\n## 协程函数基本用法\n```lua\nco = coroutine.create(\n    function(i)\n        print(i);\n    end\n)\n \ncoroutine.resume(co, 1)   -- 1\nprint(coroutine.status(co))  -- dead\n \nprint(\"----------\")\n \nco = coroutine.wrap(\n    function(i)\n        print(i);\n    end\n)\n \nco(1)\n \nprint(\"----------\")\n \nco2 = coroutine.create(\n    function()\n        for i=1,10 do\n            print(i)\n            if i == 3 then\n                print(coroutine.status(co2))  --running\n                print(coroutine.running()) --thread:XXXXXX\n            end\n            coroutine.yield()\n        end\n    end\n)\n \ncoroutine.resume(co2) --1\ncoroutine.resume(co2) --2\ncoroutine.resume(co2) --3\n \nprint(coroutine.status(co2))   -- suspended\nprint(coroutine.running())\n \nprint(\"----------\")\n```\n\n输出为：\n```lua\n1\ndead\n----------\n1\n----------\n1\n2\n3\nrunning\nthread: 0x7fb801c05868  false\nsuspended\nthread: 0x7fb801c04c88  true\n----------\n```\n\ncoroutine.running就可以看出来,coroutine在底层实现就是一个线程。\n当create一个coroutine的时候就是在新线程中注册了一个事件。\n当使用resume触发事件的时候，create的coroutine函数就被执行了，当遇到yield的时候就代表挂起当前线程，等候再次resume触发事件。\n接下来我们分析一个更详细的实例：\n```lua\nfunction foo (a)\n    print(\"foo 函数输出\", a)\n    return coroutine.yield(2 * a) -- 返回  2*a 的值\nend\n \nco = coroutine.create(function (a , b)\n    print(\"第一次协同程序执行输出\", a, b) -- co-body 1 10\n    local r = foo(a + 1)\n     \n    print(\"第二次协同程序执行输出\", r)\n    local r, s = coroutine.yield(a + b, a - b)  -- a，b的值为第一次调用协同程序时传入\n     \n    print(\"第三次协同程序执行输出\", r, s)\n    return b, \"结束协同程序\"                   -- b的值为第二次调用协同程序时传入\nend)\n        \nprint(\"main\", coroutine.resume(co, 1, 10)) -- true, 4\nprint(\"--分割线----\")\nprint(\"main\", coroutine.resume(co, \"r\")) -- true 11 -9\nprint(\"---分割线---\")\nprint(\"main\", coroutine.resume(co, \"x\", \"y\")) -- true 10 end\nprint(\"---分割线---\")\nprint(\"main\", coroutine.resume(co, \"x\", \"y\")) -- cannot resume dead coroutine\nprint(\"---分割线---\")\n```\n\n输出为：\n```lua\n第一次协同程序执行输出 1   10\nfoo 函数输出    2\nmain    true    4\n--分割线----\n第二次协同程序执行输出 r\nmain    true    11  -9\n---分割线---\n第三次协同程序执行输出 x   y\nmain    true    10  结束协同程序\n---分割线---\nmain    false   cannot resume dead coroutine\n---分割线---\n```\n\n以上实例执行步骤说明如下：\n- 调用resume，将协同程序唤醒,resume操作成功返回true，否则返回false；\n- 协同程序运行；\n- 运行到yield语句；\n- yield挂起协同程序，第一次resume返回；（注意：此处yield返回，参数是resume的参数）\n- 第二次resume，再次唤醒协同程序；（注意：此处resume的参数中，除了第一个参数，剩下的参数将作为yield的参数）\n- yield返回；\n- 协同程序继续运行；\n- 如果使用的协同程序继续运行完成后继续调用 resume方法则输出：cannot resume dead coroutine\n- resume和yield的配合强大之处在于，resume处于主程中，它将外部状态（数据）传入到协同程序内部；而yield则将内部的状态（数据）返回到主程中。\n\n## 生产者-消费者问题\n现在我就使用Lua的协同程序来完成生产者-消费者这一经典问题。\n```lua\nlocal newProductor\n\nfunction productor()\n     local i = 0\n     while true do\n          i = i + 1\n          send(i)     -- 将生产的物品发送给消费者\n     end\nend\n\nfunction consumer()\n     while true do\n          local i = receive()     -- 从生产者那里得到物品\n          print(i)\n     end\nend\n\nfunction receive()\n     local status, value = coroutine.resume(newProductor)\n     return value\nend\n\nfunction send(x)\n     coroutine.yield(x)     -- x表示需要发送的值，值返回以后，就挂起该协同程序\nend\n-- 启动程序\nnewProductor = coroutine.create(productor)\nconsumer()\n```\n\n以上实例执行输出结果为：\n```lua \n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n……\n```\n\n\n","source":"_posts/lua-协同程序.md","raw":"---\ntitle: lua 协同程序\ndate: 2017-09-13 11:43:55\ntags:\n    lua\n---\n\n## 什么是协同程序？\n> Lua 协同程序(coroutine)与线程比较类似：拥有独立的堆栈，独立的局部变量，独立的指令指针，同时又与其它协同程序共享全局变量和其它大部分东西。协同是非常强大的功能，但是用起来也很复杂。\n\n## 线程与协程的区别\n> 线程与协同程序的主要区别在于，*一个具有多个线程的程序可以同时运行几个线程，而协同程序却需要彼此协作的运行*。**在任一指定时刻只有一个协同程序在运行，并且这个正在运行的协同程序只有在明确的被要求挂起的时候才会被挂起**。协同程序有点类似同步的多线程，在等待同一个线程锁的几个线程有点类似协同。\n\n## 基本语法\n- coroutine.create()  创建coroutine，返回coroutine，参数是一个函数，当和resume配合使用的时候就唤醒函数调用\n- coroutine.resume()重启coroutine和create配合使用,这个函数可以传参数给协同程序，调用成功会返回true.\n- coroutine.yield()挂起coroutine，将coroutine设置为挂起状态，这个和resume配合使用能有很多有用的效果，这个函数可以返回函数给主线程！！！\n- coroutine.status()  查看coroutine的状态 ,注：coroutine的状态有三种：dead，suspend，running，具体什么时候有这样的状态请参考下面的程序\n- coroutine.wrap()创建coroutine，返回一个函数，一旦你调用这个函数，就进入coroutine，和create功能重复\n- coroutine.running() 返回正在跑的coroutine，一个coroutine就是一个线程，当使用running的时候，就是返回一个corouting的线程号\n\n## 协程函数基本用法\n```lua\nco = coroutine.create(\n    function(i)\n        print(i);\n    end\n)\n \ncoroutine.resume(co, 1)   -- 1\nprint(coroutine.status(co))  -- dead\n \nprint(\"----------\")\n \nco = coroutine.wrap(\n    function(i)\n        print(i);\n    end\n)\n \nco(1)\n \nprint(\"----------\")\n \nco2 = coroutine.create(\n    function()\n        for i=1,10 do\n            print(i)\n            if i == 3 then\n                print(coroutine.status(co2))  --running\n                print(coroutine.running()) --thread:XXXXXX\n            end\n            coroutine.yield()\n        end\n    end\n)\n \ncoroutine.resume(co2) --1\ncoroutine.resume(co2) --2\ncoroutine.resume(co2) --3\n \nprint(coroutine.status(co2))   -- suspended\nprint(coroutine.running())\n \nprint(\"----------\")\n```\n\n输出为：\n```lua\n1\ndead\n----------\n1\n----------\n1\n2\n3\nrunning\nthread: 0x7fb801c05868  false\nsuspended\nthread: 0x7fb801c04c88  true\n----------\n```\n\ncoroutine.running就可以看出来,coroutine在底层实现就是一个线程。\n当create一个coroutine的时候就是在新线程中注册了一个事件。\n当使用resume触发事件的时候，create的coroutine函数就被执行了，当遇到yield的时候就代表挂起当前线程，等候再次resume触发事件。\n接下来我们分析一个更详细的实例：\n```lua\nfunction foo (a)\n    print(\"foo 函数输出\", a)\n    return coroutine.yield(2 * a) -- 返回  2*a 的值\nend\n \nco = coroutine.create(function (a , b)\n    print(\"第一次协同程序执行输出\", a, b) -- co-body 1 10\n    local r = foo(a + 1)\n     \n    print(\"第二次协同程序执行输出\", r)\n    local r, s = coroutine.yield(a + b, a - b)  -- a，b的值为第一次调用协同程序时传入\n     \n    print(\"第三次协同程序执行输出\", r, s)\n    return b, \"结束协同程序\"                   -- b的值为第二次调用协同程序时传入\nend)\n        \nprint(\"main\", coroutine.resume(co, 1, 10)) -- true, 4\nprint(\"--分割线----\")\nprint(\"main\", coroutine.resume(co, \"r\")) -- true 11 -9\nprint(\"---分割线---\")\nprint(\"main\", coroutine.resume(co, \"x\", \"y\")) -- true 10 end\nprint(\"---分割线---\")\nprint(\"main\", coroutine.resume(co, \"x\", \"y\")) -- cannot resume dead coroutine\nprint(\"---分割线---\")\n```\n\n输出为：\n```lua\n第一次协同程序执行输出 1   10\nfoo 函数输出    2\nmain    true    4\n--分割线----\n第二次协同程序执行输出 r\nmain    true    11  -9\n---分割线---\n第三次协同程序执行输出 x   y\nmain    true    10  结束协同程序\n---分割线---\nmain    false   cannot resume dead coroutine\n---分割线---\n```\n\n以上实例执行步骤说明如下：\n- 调用resume，将协同程序唤醒,resume操作成功返回true，否则返回false；\n- 协同程序运行；\n- 运行到yield语句；\n- yield挂起协同程序，第一次resume返回；（注意：此处yield返回，参数是resume的参数）\n- 第二次resume，再次唤醒协同程序；（注意：此处resume的参数中，除了第一个参数，剩下的参数将作为yield的参数）\n- yield返回；\n- 协同程序继续运行；\n- 如果使用的协同程序继续运行完成后继续调用 resume方法则输出：cannot resume dead coroutine\n- resume和yield的配合强大之处在于，resume处于主程中，它将外部状态（数据）传入到协同程序内部；而yield则将内部的状态（数据）返回到主程中。\n\n## 生产者-消费者问题\n现在我就使用Lua的协同程序来完成生产者-消费者这一经典问题。\n```lua\nlocal newProductor\n\nfunction productor()\n     local i = 0\n     while true do\n          i = i + 1\n          send(i)     -- 将生产的物品发送给消费者\n     end\nend\n\nfunction consumer()\n     while true do\n          local i = receive()     -- 从生产者那里得到物品\n          print(i)\n     end\nend\n\nfunction receive()\n     local status, value = coroutine.resume(newProductor)\n     return value\nend\n\nfunction send(x)\n     coroutine.yield(x)     -- x表示需要发送的值，值返回以后，就挂起该协同程序\nend\n-- 启动程序\nnewProductor = coroutine.create(productor)\nconsumer()\n```\n\n以上实例执行输出结果为：\n```lua \n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n……\n```\n\n\n","slug":"lua-协同程序","published":1,"updated":"2017-09-13T03:57:11.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ihxmds000f6ci6i2zsiowe","content":"<h2 id=\"什么是协同程序？\"><a href=\"#什么是协同程序？\" class=\"headerlink\" title=\"什么是协同程序？\"></a>什么是协同程序？</h2><blockquote>\n<p>Lua 协同程序(coroutine)与线程比较类似：拥有独立的堆栈，独立的局部变量，独立的指令指针，同时又与其它协同程序共享全局变量和其它大部分东西。协同是非常强大的功能，但是用起来也很复杂。</p>\n</blockquote>\n<h2 id=\"线程与协程的区别\"><a href=\"#线程与协程的区别\" class=\"headerlink\" title=\"线程与协程的区别\"></a>线程与协程的区别</h2><blockquote>\n<p>线程与协同程序的主要区别在于，<em>一个具有多个线程的程序可以同时运行几个线程，而协同程序却需要彼此协作的运行</em>。<strong>在任一指定时刻只有一个协同程序在运行，并且这个正在运行的协同程序只有在明确的被要求挂起的时候才会被挂起</strong>。协同程序有点类似同步的多线程，在等待同一个线程锁的几个线程有点类似协同。</p>\n</blockquote>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><ul>\n<li>coroutine.create()  创建coroutine，返回coroutine，参数是一个函数，当和resume配合使用的时候就唤醒函数调用</li>\n<li>coroutine.resume()重启coroutine和create配合使用,这个函数可以传参数给协同程序，调用成功会返回true.</li>\n<li>coroutine.yield()挂起coroutine，将coroutine设置为挂起状态，这个和resume配合使用能有很多有用的效果，这个函数可以返回函数给主线程！！！</li>\n<li>coroutine.status()  查看coroutine的状态 ,注：coroutine的状态有三种：dead，suspend，running，具体什么时候有这样的状态请参考下面的程序</li>\n<li>coroutine.wrap()创建coroutine，返回一个函数，一旦你调用这个函数，就进入coroutine，和create功能重复</li>\n<li>coroutine.running() 返回正在跑的coroutine，一个coroutine就是一个线程，当使用running的时候，就是返回一个corouting的线程号</li>\n</ul>\n<h2 id=\"协程函数基本用法\"><a href=\"#协程函数基本用法\" class=\"headerlink\" title=\"协程函数基本用法\"></a>协程函数基本用法</h2><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">co = coroutine.<span class=\"built_in\">create</span>(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(i)</span></span></div><div class=\"line\">        <span class=\"built_in\">print</span>(i);</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co, <span class=\"number\">1</span>)   <span class=\"comment\">-- 1</span></div><div class=\"line\"><span class=\"built_in\">print</span>(coroutine.<span class=\"built_in\">status</span>(co))  <span class=\"comment\">-- dead</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"----------\"</span>)</div><div class=\"line\"> </div><div class=\"line\">co = coroutine.<span class=\"built_in\">wrap</span>(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(i)</span></span></div><div class=\"line\">        <span class=\"built_in\">print</span>(i);</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\">co(<span class=\"number\">1</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"----------\"</span>)</div><div class=\"line\"> </div><div class=\"line\">co2 = coroutine.<span class=\"built_in\">create</span>(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></div><div class=\"line\">        <span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,<span class=\"number\">10</span> <span class=\"keyword\">do</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(i)</div><div class=\"line\">            <span class=\"keyword\">if</span> i == <span class=\"number\">3</span> <span class=\"keyword\">then</span></div><div class=\"line\">                <span class=\"built_in\">print</span>(coroutine.<span class=\"built_in\">status</span>(co2))  <span class=\"comment\">--running</span></div><div class=\"line\">                <span class=\"built_in\">print</span>(coroutine.<span class=\"built_in\">running</span>()) <span class=\"comment\">--thread:XXXXXX</span></div><div class=\"line\">            <span class=\"keyword\">end</span></div><div class=\"line\">            coroutine.<span class=\"built_in\">yield</span>()</div><div class=\"line\">        <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co2) <span class=\"comment\">--1</span></div><div class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co2) <span class=\"comment\">--2</span></div><div class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co2) <span class=\"comment\">--3</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(coroutine.<span class=\"built_in\">status</span>(co2))   <span class=\"comment\">-- suspended</span></div><div class=\"line\"><span class=\"built_in\">print</span>(coroutine.<span class=\"built_in\">running</span>())</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"----------\"</span>)</div></pre></td></tr></table></figure>\n<p>输出为：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\">dead</div><div class=\"line\"><span class=\"comment\">----------</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">----------</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"built_in\">running</span></div><div class=\"line\">thread: <span class=\"number\">0x7fb801c05868</span>  <span class=\"literal\">false</span></div><div class=\"line\">suspended</div><div class=\"line\">thread: <span class=\"number\">0x7fb801c04c88</span>  <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\">----------</span></div></pre></td></tr></table></figure></p>\n<p>coroutine.running就可以看出来,coroutine在底层实现就是一个线程。<br>当create一个coroutine的时候就是在新线程中注册了一个事件。<br>当使用resume触发事件的时候，create的coroutine函数就被执行了，当遇到yield的时候就代表挂起当前线程，等候再次resume触发事件。<br>接下来我们分析一个更详细的实例：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">(a)</span></span></div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"foo 函数输出\"</span>, a)</div><div class=\"line\">    <span class=\"keyword\">return</span> coroutine.<span class=\"built_in\">yield</span>(<span class=\"number\">2</span> * a) <span class=\"comment\">-- 返回  2*a 的值</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\">co = coroutine.<span class=\"built_in\">create</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a , b)</span></span></div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"第一次协同程序执行输出\"</span>, a, b) <span class=\"comment\">-- co-body 1 10</span></div><div class=\"line\">    <span class=\"keyword\">local</span> r = foo(a + <span class=\"number\">1</span>)</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"第二次协同程序执行输出\"</span>, r)</div><div class=\"line\">    <span class=\"keyword\">local</span> r, s = coroutine.<span class=\"built_in\">yield</span>(a + b, a - b)  <span class=\"comment\">-- a，b的值为第一次调用协同程序时传入</span></div><div class=\"line\">     </div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"第三次协同程序执行输出\"</span>, r, s)</div><div class=\"line\">    <span class=\"keyword\">return</span> b, <span class=\"string\">\"结束协同程序\"</span>                   <span class=\"comment\">-- b的值为第二次调用协同程序时传入</span></div><div class=\"line\"><span class=\"keyword\">end</span>)</div><div class=\"line\">        </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"main\"</span>, coroutine.<span class=\"built_in\">resume</span>(co, <span class=\"number\">1</span>, <span class=\"number\">10</span>)) <span class=\"comment\">-- true, 4</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"--分割线----\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"main\"</span>, coroutine.<span class=\"built_in\">resume</span>(co, <span class=\"string\">\"r\"</span>)) <span class=\"comment\">-- true 11 -9</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"---分割线---\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"main\"</span>, coroutine.<span class=\"built_in\">resume</span>(co, <span class=\"string\">\"x\"</span>, <span class=\"string\">\"y\"</span>)) <span class=\"comment\">-- true 10 end</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"---分割线---\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"main\"</span>, coroutine.<span class=\"built_in\">resume</span>(co, <span class=\"string\">\"x\"</span>, <span class=\"string\">\"y\"</span>)) <span class=\"comment\">-- cannot resume dead coroutine</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"---分割线---\"</span>)</div></pre></td></tr></table></figure></p>\n<p>输出为：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一次协同程序执行输出 <span class=\"number\">1</span>   <span class=\"number\">10</span></div><div class=\"line\">foo 函数输出    <span class=\"number\">2</span></div><div class=\"line\">main    <span class=\"literal\">true</span>    <span class=\"number\">4</span></div><div class=\"line\"><span class=\"comment\">--分割线----</span></div><div class=\"line\">第二次协同程序执行输出 r</div><div class=\"line\">main    <span class=\"literal\">true</span>    <span class=\"number\">11</span>  <span class=\"number\">-9</span></div><div class=\"line\"><span class=\"comment\">---分割线---</span></div><div class=\"line\">第三次协同程序执行输出 x   y</div><div class=\"line\">main    <span class=\"literal\">true</span>    <span class=\"number\">10</span>  结束协同程序</div><div class=\"line\"><span class=\"comment\">---分割线---</span></div><div class=\"line\">main    <span class=\"literal\">false</span>   cannot <span class=\"built_in\">resume</span> dead coroutine</div><div class=\"line\"><span class=\"comment\">---分割线---</span></div></pre></td></tr></table></figure></p>\n<p>以上实例执行步骤说明如下：</p>\n<ul>\n<li>调用resume，将协同程序唤醒,resume操作成功返回true，否则返回false；</li>\n<li>协同程序运行；</li>\n<li>运行到yield语句；</li>\n<li>yield挂起协同程序，第一次resume返回；（注意：此处yield返回，参数是resume的参数）</li>\n<li>第二次resume，再次唤醒协同程序；（注意：此处resume的参数中，除了第一个参数，剩下的参数将作为yield的参数）</li>\n<li>yield返回；</li>\n<li>协同程序继续运行；</li>\n<li>如果使用的协同程序继续运行完成后继续调用 resume方法则输出：cannot resume dead coroutine</li>\n<li>resume和yield的配合强大之处在于，resume处于主程中，它将外部状态（数据）传入到协同程序内部；而yield则将内部的状态（数据）返回到主程中。</li>\n</ul>\n<h2 id=\"生产者-消费者问题\"><a href=\"#生产者-消费者问题\" class=\"headerlink\" title=\"生产者-消费者问题\"></a>生产者-消费者问题</h2><p>现在我就使用Lua的协同程序来完成生产者-消费者这一经典问题。<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">local</span> newProductor</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">productor</span><span class=\"params\">()</span></span></div><div class=\"line\">     <span class=\"keyword\">local</span> i = <span class=\"number\">0</span></div><div class=\"line\">     <span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></div><div class=\"line\">          i = i + <span class=\"number\">1</span></div><div class=\"line\">          send(i)     <span class=\"comment\">-- 将生产的物品发送给消费者</span></div><div class=\"line\">     <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">consumer</span><span class=\"params\">()</span></span></div><div class=\"line\">     <span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></div><div class=\"line\">          <span class=\"keyword\">local</span> i = receive()     <span class=\"comment\">-- 从生产者那里得到物品</span></div><div class=\"line\">          <span class=\"built_in\">print</span>(i)</div><div class=\"line\">     <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">receive</span><span class=\"params\">()</span></span></div><div class=\"line\">     <span class=\"keyword\">local</span> <span class=\"built_in\">status</span>, value = coroutine.<span class=\"built_in\">resume</span>(newProductor)</div><div class=\"line\">     <span class=\"keyword\">return</span> value</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span><span class=\"params\">(x)</span></span></div><div class=\"line\">     coroutine.<span class=\"built_in\">yield</span>(x)     <span class=\"comment\">-- x表示需要发送的值，值返回以后，就挂起该协同程序</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"comment\">-- 启动程序</span></div><div class=\"line\">newProductor = coroutine.<span class=\"built_in\">create</span>(productor)</div><div class=\"line\">consumer()</div></pre></td></tr></table></figure></p>\n<p>以上实例执行输出结果为：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">7</span></div><div class=\"line\"><span class=\"number\">8</span></div><div class=\"line\"><span class=\"number\">9</span></div><div class=\"line\"><span class=\"number\">10</span></div><div class=\"line\"><span class=\"number\">11</span></div><div class=\"line\"><span class=\"number\">12</span></div><div class=\"line\"><span class=\"number\">13</span></div><div class=\"line\">……</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是协同程序？\"><a href=\"#什么是协同程序？\" class=\"headerlink\" title=\"什么是协同程序？\"></a>什么是协同程序？</h2><blockquote>\n<p>Lua 协同程序(coroutine)与线程比较类似：拥有独立的堆栈，独立的局部变量，独立的指令指针，同时又与其它协同程序共享全局变量和其它大部分东西。协同是非常强大的功能，但是用起来也很复杂。</p>\n</blockquote>\n<h2 id=\"线程与协程的区别\"><a href=\"#线程与协程的区别\" class=\"headerlink\" title=\"线程与协程的区别\"></a>线程与协程的区别</h2><blockquote>\n<p>线程与协同程序的主要区别在于，<em>一个具有多个线程的程序可以同时运行几个线程，而协同程序却需要彼此协作的运行</em>。<strong>在任一指定时刻只有一个协同程序在运行，并且这个正在运行的协同程序只有在明确的被要求挂起的时候才会被挂起</strong>。协同程序有点类似同步的多线程，在等待同一个线程锁的几个线程有点类似协同。</p>\n</blockquote>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><ul>\n<li>coroutine.create()  创建coroutine，返回coroutine，参数是一个函数，当和resume配合使用的时候就唤醒函数调用</li>\n<li>coroutine.resume()重启coroutine和create配合使用,这个函数可以传参数给协同程序，调用成功会返回true.</li>\n<li>coroutine.yield()挂起coroutine，将coroutine设置为挂起状态，这个和resume配合使用能有很多有用的效果，这个函数可以返回函数给主线程！！！</li>\n<li>coroutine.status()  查看coroutine的状态 ,注：coroutine的状态有三种：dead，suspend，running，具体什么时候有这样的状态请参考下面的程序</li>\n<li>coroutine.wrap()创建coroutine，返回一个函数，一旦你调用这个函数，就进入coroutine，和create功能重复</li>\n<li>coroutine.running() 返回正在跑的coroutine，一个coroutine就是一个线程，当使用running的时候，就是返回一个corouting的线程号</li>\n</ul>\n<h2 id=\"协程函数基本用法\"><a href=\"#协程函数基本用法\" class=\"headerlink\" title=\"协程函数基本用法\"></a>协程函数基本用法</h2><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">co = coroutine.<span class=\"built_in\">create</span>(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(i)</span></span></div><div class=\"line\">        <span class=\"built_in\">print</span>(i);</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co, <span class=\"number\">1</span>)   <span class=\"comment\">-- 1</span></div><div class=\"line\"><span class=\"built_in\">print</span>(coroutine.<span class=\"built_in\">status</span>(co))  <span class=\"comment\">-- dead</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"----------\"</span>)</div><div class=\"line\"> </div><div class=\"line\">co = coroutine.<span class=\"built_in\">wrap</span>(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(i)</span></span></div><div class=\"line\">        <span class=\"built_in\">print</span>(i);</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\">co(<span class=\"number\">1</span>)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"----------\"</span>)</div><div class=\"line\"> </div><div class=\"line\">co2 = coroutine.<span class=\"built_in\">create</span>(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></div><div class=\"line\">        <span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,<span class=\"number\">10</span> <span class=\"keyword\">do</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(i)</div><div class=\"line\">            <span class=\"keyword\">if</span> i == <span class=\"number\">3</span> <span class=\"keyword\">then</span></div><div class=\"line\">                <span class=\"built_in\">print</span>(coroutine.<span class=\"built_in\">status</span>(co2))  <span class=\"comment\">--running</span></div><div class=\"line\">                <span class=\"built_in\">print</span>(coroutine.<span class=\"built_in\">running</span>()) <span class=\"comment\">--thread:XXXXXX</span></div><div class=\"line\">            <span class=\"keyword\">end</span></div><div class=\"line\">            coroutine.<span class=\"built_in\">yield</span>()</div><div class=\"line\">        <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">)</div><div class=\"line\"> </div><div class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co2) <span class=\"comment\">--1</span></div><div class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co2) <span class=\"comment\">--2</span></div><div class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co2) <span class=\"comment\">--3</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(coroutine.<span class=\"built_in\">status</span>(co2))   <span class=\"comment\">-- suspended</span></div><div class=\"line\"><span class=\"built_in\">print</span>(coroutine.<span class=\"built_in\">running</span>())</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"----------\"</span>)</div></pre></td></tr></table></figure>\n<p>输出为：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\">dead</div><div class=\"line\"><span class=\"comment\">----------</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">----------</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"built_in\">running</span></div><div class=\"line\">thread: <span class=\"number\">0x7fb801c05868</span>  <span class=\"literal\">false</span></div><div class=\"line\">suspended</div><div class=\"line\">thread: <span class=\"number\">0x7fb801c04c88</span>  <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\">----------</span></div></pre></td></tr></table></figure></p>\n<p>coroutine.running就可以看出来,coroutine在底层实现就是一个线程。<br>当create一个coroutine的时候就是在新线程中注册了一个事件。<br>当使用resume触发事件的时候，create的coroutine函数就被执行了，当遇到yield的时候就代表挂起当前线程，等候再次resume触发事件。<br>接下来我们分析一个更详细的实例：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> <span class=\"params\">(a)</span></span></div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"foo 函数输出\"</span>, a)</div><div class=\"line\">    <span class=\"keyword\">return</span> coroutine.<span class=\"built_in\">yield</span>(<span class=\"number\">2</span> * a) <span class=\"comment\">-- 返回  2*a 的值</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\">co = coroutine.<span class=\"built_in\">create</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a , b)</span></span></div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"第一次协同程序执行输出\"</span>, a, b) <span class=\"comment\">-- co-body 1 10</span></div><div class=\"line\">    <span class=\"keyword\">local</span> r = foo(a + <span class=\"number\">1</span>)</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"第二次协同程序执行输出\"</span>, r)</div><div class=\"line\">    <span class=\"keyword\">local</span> r, s = coroutine.<span class=\"built_in\">yield</span>(a + b, a - b)  <span class=\"comment\">-- a，b的值为第一次调用协同程序时传入</span></div><div class=\"line\">     </div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"第三次协同程序执行输出\"</span>, r, s)</div><div class=\"line\">    <span class=\"keyword\">return</span> b, <span class=\"string\">\"结束协同程序\"</span>                   <span class=\"comment\">-- b的值为第二次调用协同程序时传入</span></div><div class=\"line\"><span class=\"keyword\">end</span>)</div><div class=\"line\">        </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"main\"</span>, coroutine.<span class=\"built_in\">resume</span>(co, <span class=\"number\">1</span>, <span class=\"number\">10</span>)) <span class=\"comment\">-- true, 4</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"--分割线----\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"main\"</span>, coroutine.<span class=\"built_in\">resume</span>(co, <span class=\"string\">\"r\"</span>)) <span class=\"comment\">-- true 11 -9</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"---分割线---\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"main\"</span>, coroutine.<span class=\"built_in\">resume</span>(co, <span class=\"string\">\"x\"</span>, <span class=\"string\">\"y\"</span>)) <span class=\"comment\">-- true 10 end</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"---分割线---\"</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"main\"</span>, coroutine.<span class=\"built_in\">resume</span>(co, <span class=\"string\">\"x\"</span>, <span class=\"string\">\"y\"</span>)) <span class=\"comment\">-- cannot resume dead coroutine</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"---分割线---\"</span>)</div></pre></td></tr></table></figure></p>\n<p>输出为：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一次协同程序执行输出 <span class=\"number\">1</span>   <span class=\"number\">10</span></div><div class=\"line\">foo 函数输出    <span class=\"number\">2</span></div><div class=\"line\">main    <span class=\"literal\">true</span>    <span class=\"number\">4</span></div><div class=\"line\"><span class=\"comment\">--分割线----</span></div><div class=\"line\">第二次协同程序执行输出 r</div><div class=\"line\">main    <span class=\"literal\">true</span>    <span class=\"number\">11</span>  <span class=\"number\">-9</span></div><div class=\"line\"><span class=\"comment\">---分割线---</span></div><div class=\"line\">第三次协同程序执行输出 x   y</div><div class=\"line\">main    <span class=\"literal\">true</span>    <span class=\"number\">10</span>  结束协同程序</div><div class=\"line\"><span class=\"comment\">---分割线---</span></div><div class=\"line\">main    <span class=\"literal\">false</span>   cannot <span class=\"built_in\">resume</span> dead coroutine</div><div class=\"line\"><span class=\"comment\">---分割线---</span></div></pre></td></tr></table></figure></p>\n<p>以上实例执行步骤说明如下：</p>\n<ul>\n<li>调用resume，将协同程序唤醒,resume操作成功返回true，否则返回false；</li>\n<li>协同程序运行；</li>\n<li>运行到yield语句；</li>\n<li>yield挂起协同程序，第一次resume返回；（注意：此处yield返回，参数是resume的参数）</li>\n<li>第二次resume，再次唤醒协同程序；（注意：此处resume的参数中，除了第一个参数，剩下的参数将作为yield的参数）</li>\n<li>yield返回；</li>\n<li>协同程序继续运行；</li>\n<li>如果使用的协同程序继续运行完成后继续调用 resume方法则输出：cannot resume dead coroutine</li>\n<li>resume和yield的配合强大之处在于，resume处于主程中，它将外部状态（数据）传入到协同程序内部；而yield则将内部的状态（数据）返回到主程中。</li>\n</ul>\n<h2 id=\"生产者-消费者问题\"><a href=\"#生产者-消费者问题\" class=\"headerlink\" title=\"生产者-消费者问题\"></a>生产者-消费者问题</h2><p>现在我就使用Lua的协同程序来完成生产者-消费者这一经典问题。<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">local</span> newProductor</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">productor</span><span class=\"params\">()</span></span></div><div class=\"line\">     <span class=\"keyword\">local</span> i = <span class=\"number\">0</span></div><div class=\"line\">     <span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></div><div class=\"line\">          i = i + <span class=\"number\">1</span></div><div class=\"line\">          send(i)     <span class=\"comment\">-- 将生产的物品发送给消费者</span></div><div class=\"line\">     <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">consumer</span><span class=\"params\">()</span></span></div><div class=\"line\">     <span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></div><div class=\"line\">          <span class=\"keyword\">local</span> i = receive()     <span class=\"comment\">-- 从生产者那里得到物品</span></div><div class=\"line\">          <span class=\"built_in\">print</span>(i)</div><div class=\"line\">     <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">receive</span><span class=\"params\">()</span></span></div><div class=\"line\">     <span class=\"keyword\">local</span> <span class=\"built_in\">status</span>, value = coroutine.<span class=\"built_in\">resume</span>(newProductor)</div><div class=\"line\">     <span class=\"keyword\">return</span> value</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span><span class=\"params\">(x)</span></span></div><div class=\"line\">     coroutine.<span class=\"built_in\">yield</span>(x)     <span class=\"comment\">-- x表示需要发送的值，值返回以后，就挂起该协同程序</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"comment\">-- 启动程序</span></div><div class=\"line\">newProductor = coroutine.<span class=\"built_in\">create</span>(productor)</div><div class=\"line\">consumer()</div></pre></td></tr></table></figure></p>\n<p>以上实例执行输出结果为：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">7</span></div><div class=\"line\"><span class=\"number\">8</span></div><div class=\"line\"><span class=\"number\">9</span></div><div class=\"line\"><span class=\"number\">10</span></div><div class=\"line\"><span class=\"number\">11</span></div><div class=\"line\"><span class=\"number\">12</span></div><div class=\"line\"><span class=\"number\">13</span></div><div class=\"line\">……</div></pre></td></tr></table></figure></p>\n"},{"title":"strtok、strtok_s、strtok_r字符串分割","date":"2017-08-08T10:20:03.000Z","_content":"\n## strtok\n 原型：`char *strtok(char *s, char *delim);`\n## 功能\n分解字符串为一组标记串。s为要分解的字符串，delim为分隔符字符串。\n说明：**首次调用时，s必须指向要分解的字符串，随后调用要把s设成NULL。** strtok在s中查找包含在delim中的字符并用NULL('\\0')来替换，直到找遍整个字符串。 返回指向下一个标记串。当没有标记串时则返回空字符NULL。\n\n```\n#include <iostream>  \nusing namespace std;  \n  \nint main(int argc, char * argv[])  \n{  \n    //时间格式 2010/08/11 10:38:22  \n    char strEventTime[] = \"2010/08/11 10:38:22\";  \n    char *token = NULL;  \n      \n    token = strtok(strEventTime, \"/\");  \n    char *year = token;  \n    if (token != NULL)  \n    {  \n        token = strtok(NULL, \"/\");  \n    }  \n    char *month = token;  \n    if (token != NULL)  \n    {  \n        token = strtok(NULL, \" \");  \n    }  \n    char *day = token;  \n    if (token != NULL)  \n    {  \n        token = strtok(NULL, \":\");  \n    }  \n    char *hour = token;  \n    if (token != NULL)  \n    {  \n        token = strtok(NULL, \":\");  \n    }  \n    char *minute = token;  \n  \n    if (token != NULL)  \n    {  \n        token = strtok(NULL, \":\");  \n    }  \n    char *second = token;  \n  \n    printf(\"%s %s %s %s %s %s %s\\n\", year, month, day, hour, minute, second);  \n    return 0;  \n}  \n\n```\n\n上面这段程序在VS2015下编译会出现错误提醒，大概意思就是说strtok不安全。\n\n## strtok_s函数\nstrtok_s是windows下的一个分割字符串安全函数，其函数原型如下：\n\n`char *strtok_s( char *strToken, const char *strDelimit, char **buf);`\n\n这个函数将**剩余的字符串存储在buf变量中，而不是静态变量中，从而保证了安全性**。\n```\n#include <iostream>  \nusing namespace std;\n\nint main(int argc, char * argv[])\n{\n\t//时间格式 2010/08/11 10:38:22  \n\tchar strEventTime[] = \"2010/08/11 10:38:22\";\n\tchar *token = NULL;\n\tchar *next_token = NULL;\n\ttoken = strtok_s(strEventTime, \"/\", &next_token);\n\tchar *year = token;\n\tif (token != NULL)\n\t{\n\t\ttoken = strtok_s(NULL, \"/\",&next_token);\n\t}\n\tchar *month = token;\n\tif (token != NULL)\n\t{\n\t\ttoken = strtok_s(NULL, \" \", &next_token);\n\t}\n\tchar *day = token;\n\tif (token != NULL)\n\t{\n\t\ttoken = strtok_s(NULL, \":\", &next_token);\n\t}\n\tchar *hour = token;\n\tif (token != NULL)\n\t{\n\t\ttoken = strtok_s(NULL, \":\", &next_token);\n\t}\n\tchar *minute = token;\n\n\tif (token != NULL)\n\t{\n\t\ttoken = strtok_s(NULL, \":\", &next_token);\n\t}\n\tchar *second = token;\n\n\tprintf(\"%s %s %s %s %s %s \\n\", year, month, day, hour, minute, second);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n## strtok_r函数\nstrtok_s函数是**linux**下分割字符串的安全函数，函数声明如下：\n\n`char *strtok_r(char *str, const char *delim, char **saveptr);`\n\n该函数也会破坏带分解字符串的完整性，但是其将**剩余的字符串保存在saveptr变量中，保证了安全性。**","source":"_posts/strtok、strtok-s、strtok-r字符串分割.md","raw":"---\ntitle: strtok、strtok_s、strtok_r字符串分割\ndate: 2017-08-08 18:20:03\ntags:\n---\n\n## strtok\n 原型：`char *strtok(char *s, char *delim);`\n## 功能\n分解字符串为一组标记串。s为要分解的字符串，delim为分隔符字符串。\n说明：**首次调用时，s必须指向要分解的字符串，随后调用要把s设成NULL。** strtok在s中查找包含在delim中的字符并用NULL('\\0')来替换，直到找遍整个字符串。 返回指向下一个标记串。当没有标记串时则返回空字符NULL。\n\n```\n#include <iostream>  \nusing namespace std;  \n  \nint main(int argc, char * argv[])  \n{  \n    //时间格式 2010/08/11 10:38:22  \n    char strEventTime[] = \"2010/08/11 10:38:22\";  \n    char *token = NULL;  \n      \n    token = strtok(strEventTime, \"/\");  \n    char *year = token;  \n    if (token != NULL)  \n    {  \n        token = strtok(NULL, \"/\");  \n    }  \n    char *month = token;  \n    if (token != NULL)  \n    {  \n        token = strtok(NULL, \" \");  \n    }  \n    char *day = token;  \n    if (token != NULL)  \n    {  \n        token = strtok(NULL, \":\");  \n    }  \n    char *hour = token;  \n    if (token != NULL)  \n    {  \n        token = strtok(NULL, \":\");  \n    }  \n    char *minute = token;  \n  \n    if (token != NULL)  \n    {  \n        token = strtok(NULL, \":\");  \n    }  \n    char *second = token;  \n  \n    printf(\"%s %s %s %s %s %s %s\\n\", year, month, day, hour, minute, second);  \n    return 0;  \n}  \n\n```\n\n上面这段程序在VS2015下编译会出现错误提醒，大概意思就是说strtok不安全。\n\n## strtok_s函数\nstrtok_s是windows下的一个分割字符串安全函数，其函数原型如下：\n\n`char *strtok_s( char *strToken, const char *strDelimit, char **buf);`\n\n这个函数将**剩余的字符串存储在buf变量中，而不是静态变量中，从而保证了安全性**。\n```\n#include <iostream>  \nusing namespace std;\n\nint main(int argc, char * argv[])\n{\n\t//时间格式 2010/08/11 10:38:22  \n\tchar strEventTime[] = \"2010/08/11 10:38:22\";\n\tchar *token = NULL;\n\tchar *next_token = NULL;\n\ttoken = strtok_s(strEventTime, \"/\", &next_token);\n\tchar *year = token;\n\tif (token != NULL)\n\t{\n\t\ttoken = strtok_s(NULL, \"/\",&next_token);\n\t}\n\tchar *month = token;\n\tif (token != NULL)\n\t{\n\t\ttoken = strtok_s(NULL, \" \", &next_token);\n\t}\n\tchar *day = token;\n\tif (token != NULL)\n\t{\n\t\ttoken = strtok_s(NULL, \":\", &next_token);\n\t}\n\tchar *hour = token;\n\tif (token != NULL)\n\t{\n\t\ttoken = strtok_s(NULL, \":\", &next_token);\n\t}\n\tchar *minute = token;\n\n\tif (token != NULL)\n\t{\n\t\ttoken = strtok_s(NULL, \":\", &next_token);\n\t}\n\tchar *second = token;\n\n\tprintf(\"%s %s %s %s %s %s \\n\", year, month, day, hour, minute, second);\n\tsystem(\"pause\");\n\treturn 0;\n}\n```\n## strtok_r函数\nstrtok_s函数是**linux**下分割字符串的安全函数，函数声明如下：\n\n`char *strtok_r(char *str, const char *delim, char **saveptr);`\n\n该函数也会破坏带分解字符串的完整性，但是其将**剩余的字符串保存在saveptr变量中，保证了安全性。**","slug":"strtok、strtok-s、strtok-r字符串分割","published":1,"updated":"2017-08-08T10:20:30.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ihxmdt000g6ci61b42l3jk","content":"<h2 id=\"strtok\"><a href=\"#strtok\" class=\"headerlink\" title=\"strtok\"></a>strtok</h2><p> 原型：<code>char *strtok(char *s, char *delim);</code></p>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><p>分解字符串为一组标记串。s为要分解的字符串，delim为分隔符字符串。<br>说明：<strong>首次调用时，s必须指向要分解的字符串，随后调用要把s设成NULL。</strong> strtok在s中查找包含在delim中的字符并用NULL(‘\\0’)来替换，直到找遍整个字符串。 返回指向下一个标记串。当没有标记串时则返回空字符NULL。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;iostream&gt;  </div><div class=\"line\">using namespace std;  </div><div class=\"line\">  </div><div class=\"line\">int main(int argc, char * argv[])  </div><div class=\"line\">&#123;  </div><div class=\"line\">    //时间格式 2010/08/11 10:38:22  </div><div class=\"line\">    char strEventTime[] = &quot;2010/08/11 10:38:22&quot;;  </div><div class=\"line\">    char *token = NULL;  </div><div class=\"line\">      </div><div class=\"line\">    token = strtok(strEventTime, &quot;/&quot;);  </div><div class=\"line\">    char *year = token;  </div><div class=\"line\">    if (token != NULL)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        token = strtok(NULL, &quot;/&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    char *month = token;  </div><div class=\"line\">    if (token != NULL)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        token = strtok(NULL, &quot; &quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    char *day = token;  </div><div class=\"line\">    if (token != NULL)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        token = strtok(NULL, &quot;:&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    char *hour = token;  </div><div class=\"line\">    if (token != NULL)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        token = strtok(NULL, &quot;:&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    char *minute = token;  </div><div class=\"line\">  </div><div class=\"line\">    if (token != NULL)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        token = strtok(NULL, &quot;:&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    char *second = token;  </div><div class=\"line\">  </div><div class=\"line\">    printf(&quot;%s %s %s %s %s %s %s\\n&quot;, year, month, day, hour, minute, second);  </div><div class=\"line\">    return 0;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面这段程序在VS2015下编译会出现错误提醒，大概意思就是说strtok不安全。</p>\n<h2 id=\"strtok-s函数\"><a href=\"#strtok-s函数\" class=\"headerlink\" title=\"strtok_s函数\"></a>strtok_s函数</h2><p>strtok_s是windows下的一个分割字符串安全函数，其函数原型如下：</p>\n<p><code>char *strtok_s( char *strToken, const char *strDelimit, char **buf);</code></p>\n<p>这个函数将<strong>剩余的字符串存储在buf变量中，而不是静态变量中，从而保证了安全性</strong>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;iostream&gt;  </div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char * argv[])</div><div class=\"line\">&#123;</div><div class=\"line\">\t//时间格式 2010/08/11 10:38:22  </div><div class=\"line\">\tchar strEventTime[] = &quot;2010/08/11 10:38:22&quot;;</div><div class=\"line\">\tchar *token = NULL;</div><div class=\"line\">\tchar *next_token = NULL;</div><div class=\"line\">\ttoken = strtok_s(strEventTime, &quot;/&quot;, &amp;next_token);</div><div class=\"line\">\tchar *year = token;</div><div class=\"line\">\tif (token != NULL)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ttoken = strtok_s(NULL, &quot;/&quot;,&amp;next_token);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tchar *month = token;</div><div class=\"line\">\tif (token != NULL)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ttoken = strtok_s(NULL, &quot; &quot;, &amp;next_token);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tchar *day = token;</div><div class=\"line\">\tif (token != NULL)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ttoken = strtok_s(NULL, &quot;:&quot;, &amp;next_token);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tchar *hour = token;</div><div class=\"line\">\tif (token != NULL)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ttoken = strtok_s(NULL, &quot;:&quot;, &amp;next_token);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tchar *minute = token;</div><div class=\"line\"></div><div class=\"line\">\tif (token != NULL)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ttoken = strtok_s(NULL, &quot;:&quot;, &amp;next_token);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tchar *second = token;</div><div class=\"line\"></div><div class=\"line\">\tprintf(&quot;%s %s %s %s %s %s \\n&quot;, year, month, day, hour, minute, second);</div><div class=\"line\">\tsystem(&quot;pause&quot;);</div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"strtok-r函数\"><a href=\"#strtok-r函数\" class=\"headerlink\" title=\"strtok_r函数\"></a>strtok_r函数</h2><p>strtok_s函数是<strong>linux</strong>下分割字符串的安全函数，函数声明如下：</p>\n<p><code>char *strtok_r(char *str, const char *delim, char **saveptr);</code></p>\n<p>该函数也会破坏带分解字符串的完整性，但是其将<strong>剩余的字符串保存在saveptr变量中，保证了安全性。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"strtok\"><a href=\"#strtok\" class=\"headerlink\" title=\"strtok\"></a>strtok</h2><p> 原型：<code>char *strtok(char *s, char *delim);</code></p>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><p>分解字符串为一组标记串。s为要分解的字符串，delim为分隔符字符串。<br>说明：<strong>首次调用时，s必须指向要分解的字符串，随后调用要把s设成NULL。</strong> strtok在s中查找包含在delim中的字符并用NULL(‘\\0’)来替换，直到找遍整个字符串。 返回指向下一个标记串。当没有标记串时则返回空字符NULL。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;iostream&gt;  </div><div class=\"line\">using namespace std;  </div><div class=\"line\">  </div><div class=\"line\">int main(int argc, char * argv[])  </div><div class=\"line\">&#123;  </div><div class=\"line\">    //时间格式 2010/08/11 10:38:22  </div><div class=\"line\">    char strEventTime[] = &quot;2010/08/11 10:38:22&quot;;  </div><div class=\"line\">    char *token = NULL;  </div><div class=\"line\">      </div><div class=\"line\">    token = strtok(strEventTime, &quot;/&quot;);  </div><div class=\"line\">    char *year = token;  </div><div class=\"line\">    if (token != NULL)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        token = strtok(NULL, &quot;/&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    char *month = token;  </div><div class=\"line\">    if (token != NULL)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        token = strtok(NULL, &quot; &quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    char *day = token;  </div><div class=\"line\">    if (token != NULL)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        token = strtok(NULL, &quot;:&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    char *hour = token;  </div><div class=\"line\">    if (token != NULL)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        token = strtok(NULL, &quot;:&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    char *minute = token;  </div><div class=\"line\">  </div><div class=\"line\">    if (token != NULL)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        token = strtok(NULL, &quot;:&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    char *second = token;  </div><div class=\"line\">  </div><div class=\"line\">    printf(&quot;%s %s %s %s %s %s %s\\n&quot;, year, month, day, hour, minute, second);  </div><div class=\"line\">    return 0;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面这段程序在VS2015下编译会出现错误提醒，大概意思就是说strtok不安全。</p>\n<h2 id=\"strtok-s函数\"><a href=\"#strtok-s函数\" class=\"headerlink\" title=\"strtok_s函数\"></a>strtok_s函数</h2><p>strtok_s是windows下的一个分割字符串安全函数，其函数原型如下：</p>\n<p><code>char *strtok_s( char *strToken, const char *strDelimit, char **buf);</code></p>\n<p>这个函数将<strong>剩余的字符串存储在buf变量中，而不是静态变量中，从而保证了安全性</strong>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;iostream&gt;  </div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char * argv[])</div><div class=\"line\">&#123;</div><div class=\"line\">\t//时间格式 2010/08/11 10:38:22  </div><div class=\"line\">\tchar strEventTime[] = &quot;2010/08/11 10:38:22&quot;;</div><div class=\"line\">\tchar *token = NULL;</div><div class=\"line\">\tchar *next_token = NULL;</div><div class=\"line\">\ttoken = strtok_s(strEventTime, &quot;/&quot;, &amp;next_token);</div><div class=\"line\">\tchar *year = token;</div><div class=\"line\">\tif (token != NULL)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ttoken = strtok_s(NULL, &quot;/&quot;,&amp;next_token);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tchar *month = token;</div><div class=\"line\">\tif (token != NULL)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ttoken = strtok_s(NULL, &quot; &quot;, &amp;next_token);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tchar *day = token;</div><div class=\"line\">\tif (token != NULL)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ttoken = strtok_s(NULL, &quot;:&quot;, &amp;next_token);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tchar *hour = token;</div><div class=\"line\">\tif (token != NULL)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ttoken = strtok_s(NULL, &quot;:&quot;, &amp;next_token);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tchar *minute = token;</div><div class=\"line\"></div><div class=\"line\">\tif (token != NULL)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ttoken = strtok_s(NULL, &quot;:&quot;, &amp;next_token);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tchar *second = token;</div><div class=\"line\"></div><div class=\"line\">\tprintf(&quot;%s %s %s %s %s %s \\n&quot;, year, month, day, hour, minute, second);</div><div class=\"line\">\tsystem(&quot;pause&quot;);</div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"strtok-r函数\"><a href=\"#strtok-r函数\" class=\"headerlink\" title=\"strtok_r函数\"></a>strtok_r函数</h2><p>strtok_s函数是<strong>linux</strong>下分割字符串的安全函数，函数声明如下：</p>\n<p><code>char *strtok_r(char *str, const char *delim, char **saveptr);</code></p>\n<p>该函数也会破坏带分解字符串的完整性，但是其将<strong>剩余的字符串保存在saveptr变量中，保证了安全性。</strong></p>\n"},{"title":"C++ 递归 引用或者参数传递","date":"2017-08-10T10:29:40.000Z","_content":"\n> 递归很容易，且用且小心！\n\n当递归参数传递为引用或者指针时：\n\n```c++\nstruct A \n{\n    int value;\n};\nvoid func(A &a){\n    //todo something\n    // change a.value\n    func(A &a);\n}\n\n//开始调用\nA a;\nfunc(a);\n\n```\n\n> 可以发现value还是默认初始化的值为0,并没有在递归中change而change，这是因为当出栈的时候局部变量已经销毁，对a的修改并没返回。\n不管使用值传递还是引用传递（或者指针）效果都是一样的。\n\n那怎么样解决这样的问题呢？\n\n-  第一种办法就是使用返回值的方式记录出栈前的数据,最后使用返回值就行了\n\n```c++\nA func(A &a){\n    //todo something\n    // change a.value\n    return func(A &a);\n}\n\n```\n\n- 第二种办法就是使用数组将出栈前数据保存起来，这样就不会被销毁掉\n\n```c++\nvector<A> & vec_as\nvoid func(A &a,vector<A> & vec_as){\n    //todo something\n    // change a.value and vec_as.add a\n    func(A &a);\n}\n// 最后直接取数组vec_as中的数据就行了\n```\n\n\n> 递归很容易，且用且小心！\n","source":"_posts/C-递归-引用或者参数传递.md","raw":"---\ntitle: C++ 递归 引用或者参数传递\ndate: 2017-08-10 18:29:40\ntags:\n\tc++\n---\n\n> 递归很容易，且用且小心！\n\n当递归参数传递为引用或者指针时：\n\n```c++\nstruct A \n{\n    int value;\n};\nvoid func(A &a){\n    //todo something\n    // change a.value\n    func(A &a);\n}\n\n//开始调用\nA a;\nfunc(a);\n\n```\n\n> 可以发现value还是默认初始化的值为0,并没有在递归中change而change，这是因为当出栈的时候局部变量已经销毁，对a的修改并没返回。\n不管使用值传递还是引用传递（或者指针）效果都是一样的。\n\n那怎么样解决这样的问题呢？\n\n-  第一种办法就是使用返回值的方式记录出栈前的数据,最后使用返回值就行了\n\n```c++\nA func(A &a){\n    //todo something\n    // change a.value\n    return func(A &a);\n}\n\n```\n\n- 第二种办法就是使用数组将出栈前数据保存起来，这样就不会被销毁掉\n\n```c++\nvector<A> & vec_as\nvoid func(A &a,vector<A> & vec_as){\n    //todo something\n    // change a.value and vec_as.add a\n    func(A &a);\n}\n// 最后直接取数组vec_as中的数据就行了\n```\n\n\n> 递归很容易，且用且小心！\n","slug":"C-递归-引用或者参数传递","published":1,"updated":"2017-08-10T10:30:31.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ihxmdw000j6ci6lqlaf9ws","content":"<blockquote>\n<p>递归很容易，且用且小心！</p>\n</blockquote>\n<p>当递归参数传递为引用或者指针时：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span> </span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> value;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(A &amp;a)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//todo something</span></div><div class=\"line\">    <span class=\"comment\">// change a.value</span></div><div class=\"line\">    func(A &amp;a);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//开始调用</span></div><div class=\"line\">A a;</div><div class=\"line\">func(a);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>可以发现value还是默认初始化的值为0,并没有在递归中change而change，这是因为当出栈的时候局部变量已经销毁，对a的修改并没返回。<br>不管使用值传递还是引用传递（或者指针）效果都是一样的。</p>\n</blockquote>\n<p>那怎么样解决这样的问题呢？</p>\n<ul>\n<li>第一种办法就是使用返回值的方式记录出栈前的数据,最后使用返回值就行了</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">A <span class=\"title\">func</span><span class=\"params\">(A &amp;a)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//todo something</span></div><div class=\"line\">    <span class=\"comment\">// change a.value</span></div><div class=\"line\">    <span class=\"keyword\">return</span> func(A &amp;a);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>第二种办法就是使用数组将出栈前数据保存起来，这样就不会被销毁掉</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">vector</span>&lt;A&gt; &amp; vec_as</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(A &amp;a,<span class=\"built_in\">vector</span>&lt;A&gt; &amp; vec_as)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//todo something</span></div><div class=\"line\">    <span class=\"comment\">// change a.value and vec_as.add a</span></div><div class=\"line\">    func(A &amp;a);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 最后直接取数组vec_as中的数据就行了</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>递归很容易，且用且小心！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>递归很容易，且用且小心！</p>\n</blockquote>\n<p>当递归参数传递为引用或者指针时：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span> </span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> value;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(A &amp;a)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//todo something</span></div><div class=\"line\">    <span class=\"comment\">// change a.value</span></div><div class=\"line\">    func(A &amp;a);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//开始调用</span></div><div class=\"line\">A a;</div><div class=\"line\">func(a);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>可以发现value还是默认初始化的值为0,并没有在递归中change而change，这是因为当出栈的时候局部变量已经销毁，对a的修改并没返回。<br>不管使用值传递还是引用传递（或者指针）效果都是一样的。</p>\n</blockquote>\n<p>那怎么样解决这样的问题呢？</p>\n<ul>\n<li>第一种办法就是使用返回值的方式记录出栈前的数据,最后使用返回值就行了</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">A <span class=\"title\">func</span><span class=\"params\">(A &amp;a)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//todo something</span></div><div class=\"line\">    <span class=\"comment\">// change a.value</span></div><div class=\"line\">    <span class=\"keyword\">return</span> func(A &amp;a);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>第二种办法就是使用数组将出栈前数据保存起来，这样就不会被销毁掉</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">vector</span>&lt;A&gt; &amp; vec_as</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(A &amp;a,<span class=\"built_in\">vector</span>&lt;A&gt; &amp; vec_as)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//todo something</span></div><div class=\"line\">    <span class=\"comment\">// change a.value and vec_as.add a</span></div><div class=\"line\">    func(A &amp;a);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 最后直接取数组vec_as中的数据就行了</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>递归很容易，且用且小心！</p>\n</blockquote>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-08-01T08:03:05.274Z","updated":"2017-08-01T08:03:05.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ihxmdx000k6ci6ikmex195","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"条款02  尽量以const，enum，inline，替换#define","date":"2017-08-26T07:30:27.000Z","_content":"\n\n## 预处理器与编译器\n`#define`属于预处理，即在所有编译前将符号替换掉\n`const`,`enums`,`inline` 等属于编译期处理的\n\n## 常量定义\n```c++\n#define ASPECT_RATIO 1.63     //1\nconst double AspectRatio = 1.63   //2\n```\n\n1. 第一种写法导致在程序调试或者运行后看不到`ASPECT_RATIO` 的存在，因为在预处理器就已经替换所有，在编译器中记号表（`symbol table`）中找不到这个符号，这样就对程序调试造成很大困难，因为你并不知道1.63从哪里而来，表示什么意思；\n2. 第二种是比较推荐的，除了上述，这种可能比`#define`更小代码量，使用`#define`可能会导致目标码中出现多份1.63，而const只有一份存在\n\n## 常量替换\n\n- **定义常量指针**\n\n    务必使用两个`const`保证不会被改变，保持常量的性质\n    `const char* const authorName = \"huzhigen\"`,并且`string`一般都比`char*`要更加适合`const std:string authorName(\"huzhigen\")`\n    \n- **类专属常量**\n    \n    class专属常量，既然是常量就不会被改变，那么更好的做法是加上`static`修饰,所有类对象共享一个常量\n\n    ```c++\n    class GamePlayer\n    {\n        private:\n            static const int NumTurns =5; //1常量声明\n            int scores[NumTurns];  //2使用常量 \n    }\n    ```\n    \n    顺带一提，`#define`就没法定义class专属常量了，因为没法控制scope作用域，一旦宏被定义，他就在其后的编译过程中有效，除非使用`#undef`，并且也不能提供任何封装性，即没有`private #define`这样的语法。\n    \n    另外对于语句1，有些编译器是不支持（或者错误的不允许）常量声明时赋值的，即`in class 初值设定`,那么需要在类实现文件中定义此常量`const int GamePlayer::NumTurns = 5;`\n    \n    但是这时，语句2就会报错，数组声明时必须知道其大小（必须在编译器知道数组的长度），那么这时候怎么办呢？`enum hack` 无疑可以很好解决这样的问题。\n\n## the enum hack\n\n改用enum的写法后：\n```c++\nclass GamePlayer\n{\n    private:\n        enum { NumTurns = 5 };  //enum hack \n        int scores[NumTurns];  //2使用常量 \n}\n```\n`enum hack`与`#define`是比较像的，都不能获取其地址，而`const`就可以.\n\n### 使用`enum hack`的好处：\n\n- `enum hack`的行为更像`#define`而不是`const`，如果你不希望别人得到你的常量成员的指针或引用，你可以用`enum hack`替代之。（为什么不直接用#define呢？首先，因为#define是字符串替换，所以不利于程序调试。其次，#define的可视范围难以控制，比如你怎么让#define定义的常量只在一个类内可见呢？除非你用丑陋的#undef。\n- 使用enum hack不会导致 “不必要的内存分配”:创建一个pointer或者reference指向该常量后，不优秀的编译器可能会分配少许内存给指针等，当我们使用enum后，就可以加以约束，不允许有指针或者引用指向他们，**Enums和 #defines 一样绝不会导致非必要的内存分配**\n- enum hack是模板元编程的一项基本技术，大量的代码在使用它。当你看到它时，你要认识它。\n\n## 使用inline template function替换#define function\n\n`#define`定义的函数，虽然在省略了`function call`的开销，但是他不仅难看，而且很容出错，难以控制.\n\n例如：\n\n```c++\n#define GetMax(a , b)  f((a) > (b) ? (a) : (b))\n```\n\n写这种宏不仅痛苦，也不好看，每个参数也必须加括号，否者必然会遇到麻烦\n\n即使如此，也会出现一些意想不到的错误.\n\n```c++\nint a =5 ,b =0;\nGetMax(++a,b);    // a被累加依次\nGetMax(++a,b+10); //a会被累加两次\n```\n\na 的递增次数取决于 “它被拿来和谁比较”\n\n我们可以用inline template function更好实现这样的功能\n\n```c++\ntemplate<typename T>\ninline void GetMax(const T& a, const T& b)\n{\n    f(a>b?a:b);\n}\n```\n可以看出这里不需要为每个参数加括号，也不需要担心参数执行非预期行为，而且作用域也是可控的，只要愿意可以将此function写成private inline函数，这是宏没法做到的\n\n## 请记住\n\n- 对于单纯常量，最好以`const`对象或者`enum`替换`#define`\n- 对于形似函数的宏（`macros`），最好改用`inline`函数替换`#define`","source":"_posts/条款02-尽量以const，enum，inline，替换-define.md","raw":"---\ntitle: '条款02  尽量以const，enum，inline，替换#define'\ndate: 2017-08-26 15:30:27\ntags:\n    c++\n---\n\n\n## 预处理器与编译器\n`#define`属于预处理，即在所有编译前将符号替换掉\n`const`,`enums`,`inline` 等属于编译期处理的\n\n## 常量定义\n```c++\n#define ASPECT_RATIO 1.63     //1\nconst double AspectRatio = 1.63   //2\n```\n\n1. 第一种写法导致在程序调试或者运行后看不到`ASPECT_RATIO` 的存在，因为在预处理器就已经替换所有，在编译器中记号表（`symbol table`）中找不到这个符号，这样就对程序调试造成很大困难，因为你并不知道1.63从哪里而来，表示什么意思；\n2. 第二种是比较推荐的，除了上述，这种可能比`#define`更小代码量，使用`#define`可能会导致目标码中出现多份1.63，而const只有一份存在\n\n## 常量替换\n\n- **定义常量指针**\n\n    务必使用两个`const`保证不会被改变，保持常量的性质\n    `const char* const authorName = \"huzhigen\"`,并且`string`一般都比`char*`要更加适合`const std:string authorName(\"huzhigen\")`\n    \n- **类专属常量**\n    \n    class专属常量，既然是常量就不会被改变，那么更好的做法是加上`static`修饰,所有类对象共享一个常量\n\n    ```c++\n    class GamePlayer\n    {\n        private:\n            static const int NumTurns =5; //1常量声明\n            int scores[NumTurns];  //2使用常量 \n    }\n    ```\n    \n    顺带一提，`#define`就没法定义class专属常量了，因为没法控制scope作用域，一旦宏被定义，他就在其后的编译过程中有效，除非使用`#undef`，并且也不能提供任何封装性，即没有`private #define`这样的语法。\n    \n    另外对于语句1，有些编译器是不支持（或者错误的不允许）常量声明时赋值的，即`in class 初值设定`,那么需要在类实现文件中定义此常量`const int GamePlayer::NumTurns = 5;`\n    \n    但是这时，语句2就会报错，数组声明时必须知道其大小（必须在编译器知道数组的长度），那么这时候怎么办呢？`enum hack` 无疑可以很好解决这样的问题。\n\n## the enum hack\n\n改用enum的写法后：\n```c++\nclass GamePlayer\n{\n    private:\n        enum { NumTurns = 5 };  //enum hack \n        int scores[NumTurns];  //2使用常量 \n}\n```\n`enum hack`与`#define`是比较像的，都不能获取其地址，而`const`就可以.\n\n### 使用`enum hack`的好处：\n\n- `enum hack`的行为更像`#define`而不是`const`，如果你不希望别人得到你的常量成员的指针或引用，你可以用`enum hack`替代之。（为什么不直接用#define呢？首先，因为#define是字符串替换，所以不利于程序调试。其次，#define的可视范围难以控制，比如你怎么让#define定义的常量只在一个类内可见呢？除非你用丑陋的#undef。\n- 使用enum hack不会导致 “不必要的内存分配”:创建一个pointer或者reference指向该常量后，不优秀的编译器可能会分配少许内存给指针等，当我们使用enum后，就可以加以约束，不允许有指针或者引用指向他们，**Enums和 #defines 一样绝不会导致非必要的内存分配**\n- enum hack是模板元编程的一项基本技术，大量的代码在使用它。当你看到它时，你要认识它。\n\n## 使用inline template function替换#define function\n\n`#define`定义的函数，虽然在省略了`function call`的开销，但是他不仅难看，而且很容出错，难以控制.\n\n例如：\n\n```c++\n#define GetMax(a , b)  f((a) > (b) ? (a) : (b))\n```\n\n写这种宏不仅痛苦，也不好看，每个参数也必须加括号，否者必然会遇到麻烦\n\n即使如此，也会出现一些意想不到的错误.\n\n```c++\nint a =5 ,b =0;\nGetMax(++a,b);    // a被累加依次\nGetMax(++a,b+10); //a会被累加两次\n```\n\na 的递增次数取决于 “它被拿来和谁比较”\n\n我们可以用inline template function更好实现这样的功能\n\n```c++\ntemplate<typename T>\ninline void GetMax(const T& a, const T& b)\n{\n    f(a>b?a:b);\n}\n```\n可以看出这里不需要为每个参数加括号，也不需要担心参数执行非预期行为，而且作用域也是可控的，只要愿意可以将此function写成private inline函数，这是宏没法做到的\n\n## 请记住\n\n- 对于单纯常量，最好以`const`对象或者`enum`替换`#define`\n- 对于形似函数的宏（`macros`），最好改用`inline`函数替换`#define`","slug":"条款02-尽量以const，enum，inline，替换-define","published":1,"updated":"2017-08-26T07:39:14.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ihxme0000n6ci6uu47zm5a","content":"<h2 id=\"预处理器与编译器\"><a href=\"#预处理器与编译器\" class=\"headerlink\" title=\"预处理器与编译器\"></a>预处理器与编译器</h2><p><code>#define</code>属于预处理，即在所有编译前将符号替换掉<br><code>const</code>,<code>enums</code>,<code>inline</code> 等属于编译期处理的</p>\n<h2 id=\"常量定义\"><a href=\"#常量定义\" class=\"headerlink\" title=\"常量定义\"></a>常量定义</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ASPECT_RATIO 1.63     <span class=\"comment\">//1</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> AspectRatio = <span class=\"number\">1.63</span>   <span class=\"comment\">//2</span></div></pre></td></tr></table></figure>\n<ol>\n<li>第一种写法导致在程序调试或者运行后看不到<code>ASPECT_RATIO</code> 的存在，因为在预处理器就已经替换所有，在编译器中记号表（<code>symbol table</code>）中找不到这个符号，这样就对程序调试造成很大困难，因为你并不知道1.63从哪里而来，表示什么意思；</li>\n<li>第二种是比较推荐的，除了上述，这种可能比<code>#define</code>更小代码量，使用<code>#define</code>可能会导致目标码中出现多份1.63，而const只有一份存在</li>\n</ol>\n<h2 id=\"常量替换\"><a href=\"#常量替换\" class=\"headerlink\" title=\"常量替换\"></a>常量替换</h2><ul>\n<li><p><strong>定义常量指针</strong></p>\n<p>  务必使用两个<code>const</code>保证不会被改变，保持常量的性质<br>  <code>const char* const authorName = &quot;huzhigen&quot;</code>,并且<code>string</code>一般都比<code>char*</code>要更加适合<code>const std:string authorName(&quot;huzhigen&quot;)</code></p>\n</li>\n<li><p><strong>类专属常量</strong></p>\n<p>  class专属常量，既然是常量就不会被改变，那么更好的做法是加上<code>static</code>修饰,所有类对象共享一个常量</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayer</span></span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\">    <span class=\"keyword\">private</span>:</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> NumTurns =<span class=\"number\">5</span>; <span class=\"comment\">//1常量声明</span></div><div class=\"line\">        <span class=\"keyword\">int</span> scores[NumTurns];  <span class=\"comment\">//2使用常量 </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>顺带一提，`#define`就没法定义class专属常量了，因为没法控制scope作用域，一旦宏被定义，他就在其后的编译过程中有效，除非使用`#undef`，并且也不能提供任何封装性，即没有`private #define`这样的语法。\n\n另外对于语句1，有些编译器是不支持（或者错误的不允许）常量声明时赋值的，即`in class 初值设定`,那么需要在类实现文件中定义此常量`const int GamePlayer::NumTurns = 5;`\n\n但是这时，语句2就会报错，数组声明时必须知道其大小（必须在编译器知道数组的长度），那么这时候怎么办呢？`enum hack` 无疑可以很好解决这样的问题。\n</code></pre><h2 id=\"the-enum-hack\"><a href=\"#the-enum-hack\" class=\"headerlink\" title=\"the enum hack\"></a>the enum hack</h2><p>改用enum的写法后：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayer</span></span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\">    <span class=\"keyword\">private</span>:</div><div class=\"line\">        <span class=\"keyword\">enum</span> &#123; NumTurns = <span class=\"number\">5</span> &#125;;  <span class=\"comment\">//enum hack </span></div><div class=\"line\">        <span class=\"keyword\">int</span> scores[NumTurns];  <span class=\"comment\">//2使用常量 </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>enum hack</code>与<code>#define</code>是比较像的，都不能获取其地址，而<code>const</code>就可以.</p>\n<h3 id=\"使用enum-hack的好处：\"><a href=\"#使用enum-hack的好处：\" class=\"headerlink\" title=\"使用enum hack的好处：\"></a>使用<code>enum hack</code>的好处：</h3><ul>\n<li><code>enum hack</code>的行为更像<code>#define</code>而不是<code>const</code>，如果你不希望别人得到你的常量成员的指针或引用，你可以用<code>enum hack</code>替代之。（为什么不直接用#define呢？首先，因为#define是字符串替换，所以不利于程序调试。其次，#define的可视范围难以控制，比如你怎么让#define定义的常量只在一个类内可见呢？除非你用丑陋的#undef。</li>\n<li>使用enum hack不会导致 “不必要的内存分配”:创建一个pointer或者reference指向该常量后，不优秀的编译器可能会分配少许内存给指针等，当我们使用enum后，就可以加以约束，不允许有指针或者引用指向他们，<strong>Enums和 #defines 一样绝不会导致非必要的内存分配</strong></li>\n<li>enum hack是模板元编程的一项基本技术，大量的代码在使用它。当你看到它时，你要认识它。</li>\n</ul>\n<h2 id=\"使用inline-template-function替换-define-function\"><a href=\"#使用inline-template-function替换-define-function\" class=\"headerlink\" title=\"使用inline template function替换#define function\"></a>使用inline template function替换#define function</h2><p><code>#define</code>定义的函数，虽然在省略了<code>function call</code>的开销，但是他不仅难看，而且很容出错，难以控制.</p>\n<p>例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GetMax(a , b)  f((a) &gt; (b) ? (a) : (b))</span></div></pre></td></tr></table></figure>\n<p>写这种宏不仅痛苦，也不好看，每个参数也必须加括号，否者必然会遇到麻烦</p>\n<p>即使如此，也会出现一些意想不到的错误.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> a =<span class=\"number\">5</span> ,b =<span class=\"number\">0</span>;</div><div class=\"line\">GetMax(++a,b);    <span class=\"comment\">// a被累加依次</span></div><div class=\"line\">GetMax(++a,b+<span class=\"number\">10</span>); <span class=\"comment\">//a会被累加两次</span></div></pre></td></tr></table></figure>\n<p>a 的递增次数取决于 “它被拿来和谁比较”</p>\n<p>我们可以用inline template function更好实现这样的功能</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">GetMax</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; a, <span class=\"keyword\">const</span> T&amp; b)</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    f(a&gt;b?a:b);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出这里不需要为每个参数加括号，也不需要担心参数执行非预期行为，而且作用域也是可控的，只要愿意可以将此function写成private inline函数，这是宏没法做到的</p>\n<h2 id=\"请记住\"><a href=\"#请记住\" class=\"headerlink\" title=\"请记住\"></a>请记住</h2><ul>\n<li>对于单纯常量，最好以<code>const</code>对象或者<code>enum</code>替换<code>#define</code></li>\n<li>对于形似函数的宏（<code>macros</code>），最好改用<code>inline</code>函数替换<code>#define</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"预处理器与编译器\"><a href=\"#预处理器与编译器\" class=\"headerlink\" title=\"预处理器与编译器\"></a>预处理器与编译器</h2><p><code>#define</code>属于预处理，即在所有编译前将符号替换掉<br><code>const</code>,<code>enums</code>,<code>inline</code> 等属于编译期处理的</p>\n<h2 id=\"常量定义\"><a href=\"#常量定义\" class=\"headerlink\" title=\"常量定义\"></a>常量定义</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ASPECT_RATIO 1.63     <span class=\"comment\">//1</span></span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> AspectRatio = <span class=\"number\">1.63</span>   <span class=\"comment\">//2</span></div></pre></td></tr></table></figure>\n<ol>\n<li>第一种写法导致在程序调试或者运行后看不到<code>ASPECT_RATIO</code> 的存在，因为在预处理器就已经替换所有，在编译器中记号表（<code>symbol table</code>）中找不到这个符号，这样就对程序调试造成很大困难，因为你并不知道1.63从哪里而来，表示什么意思；</li>\n<li>第二种是比较推荐的，除了上述，这种可能比<code>#define</code>更小代码量，使用<code>#define</code>可能会导致目标码中出现多份1.63，而const只有一份存在</li>\n</ol>\n<h2 id=\"常量替换\"><a href=\"#常量替换\" class=\"headerlink\" title=\"常量替换\"></a>常量替换</h2><ul>\n<li><p><strong>定义常量指针</strong></p>\n<p>  务必使用两个<code>const</code>保证不会被改变，保持常量的性质<br>  <code>const char* const authorName = &quot;huzhigen&quot;</code>,并且<code>string</code>一般都比<code>char*</code>要更加适合<code>const std:string authorName(&quot;huzhigen&quot;)</code></p>\n</li>\n<li><p><strong>类专属常量</strong></p>\n<p>  class专属常量，既然是常量就不会被改变，那么更好的做法是加上<code>static</code>修饰,所有类对象共享一个常量</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayer</span></span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\">    <span class=\"keyword\">private</span>:</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> NumTurns =<span class=\"number\">5</span>; <span class=\"comment\">//1常量声明</span></div><div class=\"line\">        <span class=\"keyword\">int</span> scores[NumTurns];  <span class=\"comment\">//2使用常量 </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>顺带一提，`#define`就没法定义class专属常量了，因为没法控制scope作用域，一旦宏被定义，他就在其后的编译过程中有效，除非使用`#undef`，并且也不能提供任何封装性，即没有`private #define`这样的语法。\n\n另外对于语句1，有些编译器是不支持（或者错误的不允许）常量声明时赋值的，即`in class 初值设定`,那么需要在类实现文件中定义此常量`const int GamePlayer::NumTurns = 5;`\n\n但是这时，语句2就会报错，数组声明时必须知道其大小（必须在编译器知道数组的长度），那么这时候怎么办呢？`enum hack` 无疑可以很好解决这样的问题。\n</code></pre><h2 id=\"the-enum-hack\"><a href=\"#the-enum-hack\" class=\"headerlink\" title=\"the enum hack\"></a>the enum hack</h2><p>改用enum的写法后：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePlayer</span></span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\">    <span class=\"keyword\">private</span>:</div><div class=\"line\">        <span class=\"keyword\">enum</span> &#123; NumTurns = <span class=\"number\">5</span> &#125;;  <span class=\"comment\">//enum hack </span></div><div class=\"line\">        <span class=\"keyword\">int</span> scores[NumTurns];  <span class=\"comment\">//2使用常量 </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>enum hack</code>与<code>#define</code>是比较像的，都不能获取其地址，而<code>const</code>就可以.</p>\n<h3 id=\"使用enum-hack的好处：\"><a href=\"#使用enum-hack的好处：\" class=\"headerlink\" title=\"使用enum hack的好处：\"></a>使用<code>enum hack</code>的好处：</h3><ul>\n<li><code>enum hack</code>的行为更像<code>#define</code>而不是<code>const</code>，如果你不希望别人得到你的常量成员的指针或引用，你可以用<code>enum hack</code>替代之。（为什么不直接用#define呢？首先，因为#define是字符串替换，所以不利于程序调试。其次，#define的可视范围难以控制，比如你怎么让#define定义的常量只在一个类内可见呢？除非你用丑陋的#undef。</li>\n<li>使用enum hack不会导致 “不必要的内存分配”:创建一个pointer或者reference指向该常量后，不优秀的编译器可能会分配少许内存给指针等，当我们使用enum后，就可以加以约束，不允许有指针或者引用指向他们，<strong>Enums和 #defines 一样绝不会导致非必要的内存分配</strong></li>\n<li>enum hack是模板元编程的一项基本技术，大量的代码在使用它。当你看到它时，你要认识它。</li>\n</ul>\n<h2 id=\"使用inline-template-function替换-define-function\"><a href=\"#使用inline-template-function替换-define-function\" class=\"headerlink\" title=\"使用inline template function替换#define function\"></a>使用inline template function替换#define function</h2><p><code>#define</code>定义的函数，虽然在省略了<code>function call</code>的开销，但是他不仅难看，而且很容出错，难以控制.</p>\n<p>例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GetMax(a , b)  f((a) &gt; (b) ? (a) : (b))</span></div></pre></td></tr></table></figure>\n<p>写这种宏不仅痛苦，也不好看，每个参数也必须加括号，否者必然会遇到麻烦</p>\n<p>即使如此，也会出现一些意想不到的错误.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> a =<span class=\"number\">5</span> ,b =<span class=\"number\">0</span>;</div><div class=\"line\">GetMax(++a,b);    <span class=\"comment\">// a被累加依次</span></div><div class=\"line\">GetMax(++a,b+<span class=\"number\">10</span>); <span class=\"comment\">//a会被累加两次</span></div></pre></td></tr></table></figure>\n<p>a 的递增次数取决于 “它被拿来和谁比较”</p>\n<p>我们可以用inline template function更好实现这样的功能</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">GetMax</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; a, <span class=\"keyword\">const</span> T&amp; b)</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    f(a&gt;b?a:b);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出这里不需要为每个参数加括号，也不需要担心参数执行非预期行为，而且作用域也是可控的，只要愿意可以将此function写成private inline函数，这是宏没法做到的</p>\n<h2 id=\"请记住\"><a href=\"#请记住\" class=\"headerlink\" title=\"请记住\"></a>请记住</h2><ul>\n<li>对于单纯常量，最好以<code>const</code>对象或者<code>enum</code>替换<code>#define</code></li>\n<li>对于形似函数的宏（<code>macros</code>），最好改用<code>inline</code>函数替换<code>#define</code></li>\n</ul>\n"},{"title":"C++ 模板与泛型编程","date":"2017-08-05T09:30:49.000Z","_content":" \n## 模板定义\n \n- 函数模板\n ```\n template <typename T>  //这里class与typename关键字作用一样，都可以用\nint compare(const T& v1, const T& v2) \n{\n\tif (v1 < v2) \n\t{ \n\t\treturn -1; \n\t}\n\tif (v2 < v1)\n\t{\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n ```\n \n - 一个类模板的每个实例都形成一个独立的类。类型Base<string>与Base<int>等都没关联，包括成员函数和字段等，也不会对其他任何Base类型的成员有特殊访问权限。\n - 默认情况下，对于一个实例化的类模板，其成员只有在使用时才被实例化。\n - 在类模板内简化模板类名的使用，下面两种写法等价：(在类模板的作用域内，可以直接使用模板名而不必指定模板实参)\n ```\n template <class T>class Base{\n public:\n    /*****构造函数******/\n    /*******第一种写法***********/\n    Base& operator++();\n    Base& operator--();\n    /*******第二种写法***********/\n    Base<T>& operator++();\n    Base<T>& operator--();\n    \n };\n ```\n \n - 如果 一个类模板包含一个非模板友元，则友元被授权可以访问所有模板实例。如果友元自身是模板，类可以授权给所有友元模板实例，也可以只授权给特定实例。\n - 通用和特定模板的友好关系：\n ![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/9CCDA37E1870448CA985A66A8DF6A4F2/4065)\n\n - 可以使得模板自己的类型参数成为友元,因此对于某个类型名Foo，Foo将成为Base<Foo>的友元：\n ```\n template <class Type> class Base{\n   friend Type;    \n };\n ```\n \n - 模板参数与作用域：\n```\ntypedef double A;\ntemplate <typename A,typename B> void f(A a,B b){\n    A tmp = a; //tmp的类型为模板参数A的类型，而非double\n    double B; //错误： 重声明模板参数B\n}\n```\n- 参数名字不能重用，在模板参数列表中只能出现一次；模板声明必须包含模板参数\n\n## 模板实参推断\n\n### 类型转换与模板类型参数\n- 编译器通常不是对实参进行类型转换，而是生成一个新的实例，除了一下情况：\n    1. const转换:可以将一个非const对象的引用或者指针传递给一个const的引用或者指针形参；\n    2. 数组或者函数指针转换：如果函数形参不是引用类型，则可以对数组或者函数类型的实参应用正常的指针转换，一个数组实参可以转换为一个指向其首元素的指针。类似的函数实参可以转换为一个该函数类型的指针。\n    3. 其他的类型转换比如算术转换、基类与派生类转换以及其他用户自定义的转换都不能应用于函数模板。将实参传递给模板类型的函数形参时，能够自动应用的类型转换只有const转换及数组或者函数到指针的转换。\n\n- 如果函数参数类型不是模板参数，则对实参进行正常的类型转换\n\n## 函数模板显式实参\n\n- 指定显式模板实参\n```\ntemplate <typename T1,typename T2,typename T3>\nT1 compare(T2,T3);\n```\n\n在调用时必须显式指定T1的类型\n```\ncompare<long long>(int ,long);\n```\n\n显式模板实参按照从左到右的顺序与对应的模板参数匹配：\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/8E305BB7C4D54BF6B472B374A90924B4/4152)\n\n\n## 可变参数模板\n\n- 参数包：模板参数包表示讴歌或者多个模板参数；函数参数包表示0个或者多个函数参数\n```\n // Args 是一个模板参数包；rest是一个函数参数包\n // Args 表示0个或或者多个模板类型参数\n // rest 表示0个或者多个函数参数\n template <typename T,typename... Args>\n void foo(const T &t ,const Args & ... rest);\n```\n\n使用方式：\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/EBEFAD990E9E41339FB1C5B459F8AF6D/4174)\n\n- sizeof... 运算符获取参数包的包含的参数数量\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/06459E5366EE457DBF2C6E29EC704802/4181)\n\n## 可变参数函数模板\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/48033A2D37C049E29657B31FDBD7AE38/4186)\n\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/6857EBF5297A40B9A1EB3CD46088C92B/4188)\n\n\n## 特例化成员模板\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/7028FF936E88491CAFCBFBF239AAA7CF/4196)\n","source":"_posts/C-模板与泛型编程.md","raw":"---\ntitle: C++ 模板与泛型编程\ndate: 2017-08-05 17:30:49\ntags:\n\tc++\n---\n \n## 模板定义\n \n- 函数模板\n ```\n template <typename T>  //这里class与typename关键字作用一样，都可以用\nint compare(const T& v1, const T& v2) \n{\n\tif (v1 < v2) \n\t{ \n\t\treturn -1; \n\t}\n\tif (v2 < v1)\n\t{\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n ```\n \n - 一个类模板的每个实例都形成一个独立的类。类型Base<string>与Base<int>等都没关联，包括成员函数和字段等，也不会对其他任何Base类型的成员有特殊访问权限。\n - 默认情况下，对于一个实例化的类模板，其成员只有在使用时才被实例化。\n - 在类模板内简化模板类名的使用，下面两种写法等价：(在类模板的作用域内，可以直接使用模板名而不必指定模板实参)\n ```\n template <class T>class Base{\n public:\n    /*****构造函数******/\n    /*******第一种写法***********/\n    Base& operator++();\n    Base& operator--();\n    /*******第二种写法***********/\n    Base<T>& operator++();\n    Base<T>& operator--();\n    \n };\n ```\n \n - 如果 一个类模板包含一个非模板友元，则友元被授权可以访问所有模板实例。如果友元自身是模板，类可以授权给所有友元模板实例，也可以只授权给特定实例。\n - 通用和特定模板的友好关系：\n ![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/9CCDA37E1870448CA985A66A8DF6A4F2/4065)\n\n - 可以使得模板自己的类型参数成为友元,因此对于某个类型名Foo，Foo将成为Base<Foo>的友元：\n ```\n template <class Type> class Base{\n   friend Type;    \n };\n ```\n \n - 模板参数与作用域：\n```\ntypedef double A;\ntemplate <typename A,typename B> void f(A a,B b){\n    A tmp = a; //tmp的类型为模板参数A的类型，而非double\n    double B; //错误： 重声明模板参数B\n}\n```\n- 参数名字不能重用，在模板参数列表中只能出现一次；模板声明必须包含模板参数\n\n## 模板实参推断\n\n### 类型转换与模板类型参数\n- 编译器通常不是对实参进行类型转换，而是生成一个新的实例，除了一下情况：\n    1. const转换:可以将一个非const对象的引用或者指针传递给一个const的引用或者指针形参；\n    2. 数组或者函数指针转换：如果函数形参不是引用类型，则可以对数组或者函数类型的实参应用正常的指针转换，一个数组实参可以转换为一个指向其首元素的指针。类似的函数实参可以转换为一个该函数类型的指针。\n    3. 其他的类型转换比如算术转换、基类与派生类转换以及其他用户自定义的转换都不能应用于函数模板。将实参传递给模板类型的函数形参时，能够自动应用的类型转换只有const转换及数组或者函数到指针的转换。\n\n- 如果函数参数类型不是模板参数，则对实参进行正常的类型转换\n\n## 函数模板显式实参\n\n- 指定显式模板实参\n```\ntemplate <typename T1,typename T2,typename T3>\nT1 compare(T2,T3);\n```\n\n在调用时必须显式指定T1的类型\n```\ncompare<long long>(int ,long);\n```\n\n显式模板实参按照从左到右的顺序与对应的模板参数匹配：\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/8E305BB7C4D54BF6B472B374A90924B4/4152)\n\n\n## 可变参数模板\n\n- 参数包：模板参数包表示讴歌或者多个模板参数；函数参数包表示0个或者多个函数参数\n```\n // Args 是一个模板参数包；rest是一个函数参数包\n // Args 表示0个或或者多个模板类型参数\n // rest 表示0个或者多个函数参数\n template <typename T,typename... Args>\n void foo(const T &t ,const Args & ... rest);\n```\n\n使用方式：\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/EBEFAD990E9E41339FB1C5B459F8AF6D/4174)\n\n- sizeof... 运算符获取参数包的包含的参数数量\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/06459E5366EE457DBF2C6E29EC704802/4181)\n\n## 可变参数函数模板\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/48033A2D37C049E29657B31FDBD7AE38/4186)\n\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/6857EBF5297A40B9A1EB3CD46088C92B/4188)\n\n\n## 特例化成员模板\n![image](http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/7028FF936E88491CAFCBFBF239AAA7CF/4196)\n","slug":"C-模板与泛型编程","published":1,"updated":"2017-08-05T09:31:39.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7ihxme2000p6ci6gfp2nafb","content":"<h2 id=\"模板定义\"><a href=\"#模板定义\" class=\"headerlink\" title=\"模板定义\"></a>模板定义</h2><ul>\n<li>函数模板<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> template &lt;typename T&gt;  //这里class与typename关键字作用一样，都可以用</div><div class=\"line\">int compare(const T&amp; v1, const T&amp; v2) </div><div class=\"line\">&#123;</div><div class=\"line\">\tif (v1 &lt; v2) </div><div class=\"line\">\t&#123; </div><div class=\"line\">\t\treturn -1; </div><div class=\"line\">\t&#125;</div><div class=\"line\">\tif (v2 &lt; v1)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\treturn 1;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>一个类模板的每个实例都形成一个独立的类。类型Base<string>与Base<int>等都没关联，包括成员函数和字段等，也不会对其他任何Base类型的成员有特殊访问权限。</int></string></li>\n<li>默认情况下，对于一个实例化的类模板，其成员只有在使用时才被实例化。</li>\n<li>在类模板内简化模板类名的使用，下面两种写法等价：(在类模板的作用域内，可以直接使用模板名而不必指定模板实参)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">template &lt;class T&gt;class Base&#123;</div><div class=\"line\">public:</div><div class=\"line\">   /*****构造函数******/</div><div class=\"line\">   /*******第一种写法***********/</div><div class=\"line\">   Base&amp; operator++();</div><div class=\"line\">   Base&amp; operator--();</div><div class=\"line\">   /*******第二种写法***********/</div><div class=\"line\">   Base&lt;T&gt;&amp; operator++();</div><div class=\"line\">   Base&lt;T&gt;&amp; operator--();</div><div class=\"line\">   </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>如果 一个类模板包含一个非模板友元，则友元被授权可以访问所有模板实例。如果友元自身是模板，类可以授权给所有友元模板实例，也可以只授权给特定实例。</li>\n<li><p>通用和特定模板的友好关系：<br><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/9CCDA37E1870448CA985A66A8DF6A4F2/4065\" alt=\"image\"></p>\n</li>\n<li><p>可以使得模板自己的类型参数成为友元,因此对于某个类型名Foo，Foo将成为Base<foo>的友元：</foo></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">template &lt;class Type&gt; class Base&#123;</div><div class=\"line\">  friend Type;    </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>模板参数与作用域：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef double A;</div><div class=\"line\">template &lt;typename A,typename B&gt; void f(A a,B b)&#123;</div><div class=\"line\">    A tmp = a; //tmp的类型为模板参数A的类型，而非double</div><div class=\"line\">    double B; //错误： 重声明模板参数B</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>参数名字不能重用，在模板参数列表中只能出现一次；模板声明必须包含模板参数</li>\n</ul>\n<h2 id=\"模板实参推断\"><a href=\"#模板实参推断\" class=\"headerlink\" title=\"模板实参推断\"></a>模板实参推断</h2><h3 id=\"类型转换与模板类型参数\"><a href=\"#类型转换与模板类型参数\" class=\"headerlink\" title=\"类型转换与模板类型参数\"></a>类型转换与模板类型参数</h3><ul>\n<li><p>编译器通常不是对实参进行类型转换，而是生成一个新的实例，除了一下情况：</p>\n<ol>\n<li>const转换:可以将一个非const对象的引用或者指针传递给一个const的引用或者指针形参；</li>\n<li>数组或者函数指针转换：如果函数形参不是引用类型，则可以对数组或者函数类型的实参应用正常的指针转换，一个数组实参可以转换为一个指向其首元素的指针。类似的函数实参可以转换为一个该函数类型的指针。</li>\n<li>其他的类型转换比如算术转换、基类与派生类转换以及其他用户自定义的转换都不能应用于函数模板。将实参传递给模板类型的函数形参时，能够自动应用的类型转换只有const转换及数组或者函数到指针的转换。</li>\n</ol>\n</li>\n<li><p>如果函数参数类型不是模板参数，则对实参进行正常的类型转换</p>\n</li>\n</ul>\n<h2 id=\"函数模板显式实参\"><a href=\"#函数模板显式实参\" class=\"headerlink\" title=\"函数模板显式实参\"></a>函数模板显式实参</h2><ul>\n<li>指定显式模板实参<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">template &lt;typename T1,typename T2,typename T3&gt;</div><div class=\"line\">T1 compare(T2,T3);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在调用时必须显式指定T1的类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compare&lt;long long&gt;(int ,long);</div></pre></td></tr></table></figure></p>\n<p>显式模板实参按照从左到右的顺序与对应的模板参数匹配：<br><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/8E305BB7C4D54BF6B472B374A90924B4/4152\" alt=\"image\"></p>\n<h2 id=\"可变参数模板\"><a href=\"#可变参数模板\" class=\"headerlink\" title=\"可变参数模板\"></a>可变参数模板</h2><ul>\n<li>参数包：模板参数包表示讴歌或者多个模板参数；函数参数包表示0个或者多个函数参数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Args 是一个模板参数包；rest是一个函数参数包</div><div class=\"line\">// Args 表示0个或或者多个模板类型参数</div><div class=\"line\">// rest 表示0个或者多个函数参数</div><div class=\"line\">template &lt;typename T,typename... Args&gt;</div><div class=\"line\">void foo(const T &amp;t ,const Args &amp; ... rest);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>使用方式：<br><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/EBEFAD990E9E41339FB1C5B459F8AF6D/4174\" alt=\"image\"></p>\n<ul>\n<li>sizeof… 运算符获取参数包的包含的参数数量<br><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/06459E5366EE457DBF2C6E29EC704802/4181\" alt=\"image\"></li>\n</ul>\n<h2 id=\"可变参数函数模板\"><a href=\"#可变参数函数模板\" class=\"headerlink\" title=\"可变参数函数模板\"></a>可变参数函数模板</h2><p><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/48033A2D37C049E29657B31FDBD7AE38/4186\" alt=\"image\"></p>\n<p><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/6857EBF5297A40B9A1EB3CD46088C92B/4188\" alt=\"image\"></p>\n<h2 id=\"特例化成员模板\"><a href=\"#特例化成员模板\" class=\"headerlink\" title=\"特例化成员模板\"></a>特例化成员模板</h2><p><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/7028FF936E88491CAFCBFBF239AAA7CF/4196\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模板定义\"><a href=\"#模板定义\" class=\"headerlink\" title=\"模板定义\"></a>模板定义</h2><ul>\n<li>函数模板<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> template &lt;typename T&gt;  //这里class与typename关键字作用一样，都可以用</div><div class=\"line\">int compare(const T&amp; v1, const T&amp; v2) </div><div class=\"line\">&#123;</div><div class=\"line\">\tif (v1 &lt; v2) </div><div class=\"line\">\t&#123; </div><div class=\"line\">\t\treturn -1; </div><div class=\"line\">\t&#125;</div><div class=\"line\">\tif (v2 &lt; v1)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\treturn 1;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>一个类模板的每个实例都形成一个独立的类。类型Base<string>与Base<int>等都没关联，包括成员函数和字段等，也不会对其他任何Base类型的成员有特殊访问权限。</int></string></li>\n<li>默认情况下，对于一个实例化的类模板，其成员只有在使用时才被实例化。</li>\n<li>在类模板内简化模板类名的使用，下面两种写法等价：(在类模板的作用域内，可以直接使用模板名而不必指定模板实参)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">template &lt;class T&gt;class Base&#123;</div><div class=\"line\">public:</div><div class=\"line\">   /*****构造函数******/</div><div class=\"line\">   /*******第一种写法***********/</div><div class=\"line\">   Base&amp; operator++();</div><div class=\"line\">   Base&amp; operator--();</div><div class=\"line\">   /*******第二种写法***********/</div><div class=\"line\">   Base&lt;T&gt;&amp; operator++();</div><div class=\"line\">   Base&lt;T&gt;&amp; operator--();</div><div class=\"line\">   </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>如果 一个类模板包含一个非模板友元，则友元被授权可以访问所有模板实例。如果友元自身是模板，类可以授权给所有友元模板实例，也可以只授权给特定实例。</li>\n<li><p>通用和特定模板的友好关系：<br><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/9CCDA37E1870448CA985A66A8DF6A4F2/4065\" alt=\"image\"></p>\n</li>\n<li><p>可以使得模板自己的类型参数成为友元,因此对于某个类型名Foo，Foo将成为Base<foo>的友元：</foo></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">template &lt;class Type&gt; class Base&#123;</div><div class=\"line\">  friend Type;    </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>模板参数与作用域：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef double A;</div><div class=\"line\">template &lt;typename A,typename B&gt; void f(A a,B b)&#123;</div><div class=\"line\">    A tmp = a; //tmp的类型为模板参数A的类型，而非double</div><div class=\"line\">    double B; //错误： 重声明模板参数B</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>参数名字不能重用，在模板参数列表中只能出现一次；模板声明必须包含模板参数</li>\n</ul>\n<h2 id=\"模板实参推断\"><a href=\"#模板实参推断\" class=\"headerlink\" title=\"模板实参推断\"></a>模板实参推断</h2><h3 id=\"类型转换与模板类型参数\"><a href=\"#类型转换与模板类型参数\" class=\"headerlink\" title=\"类型转换与模板类型参数\"></a>类型转换与模板类型参数</h3><ul>\n<li><p>编译器通常不是对实参进行类型转换，而是生成一个新的实例，除了一下情况：</p>\n<ol>\n<li>const转换:可以将一个非const对象的引用或者指针传递给一个const的引用或者指针形参；</li>\n<li>数组或者函数指针转换：如果函数形参不是引用类型，则可以对数组或者函数类型的实参应用正常的指针转换，一个数组实参可以转换为一个指向其首元素的指针。类似的函数实参可以转换为一个该函数类型的指针。</li>\n<li>其他的类型转换比如算术转换、基类与派生类转换以及其他用户自定义的转换都不能应用于函数模板。将实参传递给模板类型的函数形参时，能够自动应用的类型转换只有const转换及数组或者函数到指针的转换。</li>\n</ol>\n</li>\n<li><p>如果函数参数类型不是模板参数，则对实参进行正常的类型转换</p>\n</li>\n</ul>\n<h2 id=\"函数模板显式实参\"><a href=\"#函数模板显式实参\" class=\"headerlink\" title=\"函数模板显式实参\"></a>函数模板显式实参</h2><ul>\n<li>指定显式模板实参<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">template &lt;typename T1,typename T2,typename T3&gt;</div><div class=\"line\">T1 compare(T2,T3);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在调用时必须显式指定T1的类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compare&lt;long long&gt;(int ,long);</div></pre></td></tr></table></figure></p>\n<p>显式模板实参按照从左到右的顺序与对应的模板参数匹配：<br><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/8E305BB7C4D54BF6B472B374A90924B4/4152\" alt=\"image\"></p>\n<h2 id=\"可变参数模板\"><a href=\"#可变参数模板\" class=\"headerlink\" title=\"可变参数模板\"></a>可变参数模板</h2><ul>\n<li>参数包：模板参数包表示讴歌或者多个模板参数；函数参数包表示0个或者多个函数参数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Args 是一个模板参数包；rest是一个函数参数包</div><div class=\"line\">// Args 表示0个或或者多个模板类型参数</div><div class=\"line\">// rest 表示0个或者多个函数参数</div><div class=\"line\">template &lt;typename T,typename... Args&gt;</div><div class=\"line\">void foo(const T &amp;t ,const Args &amp; ... rest);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>使用方式：<br><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/EBEFAD990E9E41339FB1C5B459F8AF6D/4174\" alt=\"image\"></p>\n<ul>\n<li>sizeof… 运算符获取参数包的包含的参数数量<br><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/06459E5366EE457DBF2C6E29EC704802/4181\" alt=\"image\"></li>\n</ul>\n<h2 id=\"可变参数函数模板\"><a href=\"#可变参数函数模板\" class=\"headerlink\" title=\"可变参数函数模板\"></a>可变参数函数模板</h2><p><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/48033A2D37C049E29657B31FDBD7AE38/4186\" alt=\"image\"></p>\n<p><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/6857EBF5297A40B9A1EB3CD46088C92B/4188\" alt=\"image\"></p>\n<h2 id=\"特例化成员模板\"><a href=\"#特例化成员模板\" class=\"headerlink\" title=\"特例化成员模板\"></a>特例化成员模板</h2><p><img src=\"http://note.youdao.com/yws/public/resource/442f4d903c7a49013290c1fd611019a7/xmlnote/7028FF936E88491CAFCBFBF239AAA7CF/4196\" alt=\"image\"></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj7ihxmcv00016ci6svocd85g","tag_id":"cj7ihxmdc00046ci6z297mero","_id":"cj7ihxmdo00096ci6zlpdjc2m"},{"post_id":"cj7ihxmdl00076ci6vyqt39co","tag_id":"cj7ihxmdc00046ci6z297mero","_id":"cj7ihxmdq000b6ci6ze7c89cl"},{"post_id":"cj7ihxmd800036ci6xu7jwn5h","tag_id":"cj7ihxmdc00046ci6z297mero","_id":"cj7ihxmdr000e6ci6kl5rdc53"},{"post_id":"cj7ihxmdf00056ci630yq4ye1","tag_id":"cj7ihxmdc00046ci6z297mero","_id":"cj7ihxmdv000i6ci6tgweld5i"},{"post_id":"cj7ihxmdw000j6ci6lqlaf9ws","tag_id":"cj7ihxmdc00046ci6z297mero","_id":"cj7ihxmdz000m6ci6rfinz2dj"},{"post_id":"cj7ihxmdi00066ci6pxlozou7","tag_id":"cj7ihxmdu000h6ci6l5utv5tg","_id":"cj7ihxme1000o6ci630c7fpvd"},{"post_id":"cj7ihxme0000n6ci6uu47zm5a","tag_id":"cj7ihxmdc00046ci6z297mero","_id":"cj7ihxme4000r6ci6bcaju22d"},{"post_id":"cj7ihxmdo000a6ci6eme4xrnb","tag_id":"cj7ihxmdy000l6ci6rdp1qcue","_id":"cj7ihxme5000s6ci6dur7xa55"},{"post_id":"cj7ihxme2000p6ci6gfp2nafb","tag_id":"cj7ihxmdc00046ci6z297mero","_id":"cj7ihxme6000t6ci6tdm22xvf"},{"post_id":"cj7ihxmdq000c6ci6uk170s7q","tag_id":"cj7ihxme3000q6ci6wm82x59h","_id":"cj7ihxme7000v6ci6olqw6wkv"},{"post_id":"cj7ihxmds000f6ci6i2zsiowe","tag_id":"cj7ihxme3000q6ci6wm82x59h","_id":"cj7ihxme9000w6ci6znvtye8n"}],"Tag":[{"name":"c++","_id":"cj7ihxmdc00046ci6z297mero"},{"name":"C++","_id":"cj7ihxmdu000h6ci6l5utv5tg"},{"name":"java","_id":"cj7ihxmdy000l6ci6rdp1qcue"},{"name":"lua","_id":"cj7ihxme3000q6ci6wm82x59h"}]}}